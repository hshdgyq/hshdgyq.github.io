<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LitCTF复现</title>
      <link href="/2023/05/16/LitCTF%E5%A4%8D%E7%8E%B0/"/>
      <url>/2023/05/16/LitCTF%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="LitCTF复现"><a href="#LitCTF复现" class="headerlink" title="LitCTF复现"></a>LitCTF复现</h1><h2 id="世界上最棒的程序员"><a href="#世界上最棒的程序员" class="headerlink" title="世界上最棒的程序员"></a>世界上最棒的程序员</h2><p>直接扔进ida，F5反编译后直接看到flag</p><h2 id="ez-XOR"><a href="#ez-XOR" class="headerlink" title="ez_XOR"></a>ez_XOR</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  <span class="built_in">strcpy</span>(Str2, <span class="string">&quot;E`&#125;J]OrQF[V8zV:hzpV&#125;fVF[t&quot;</span>);</span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  v11 = <span class="number">0</span>;</span><br><span class="line">  v12 = <span class="number">0</span>;</span><br><span class="line">  v13 = <span class="number">0</span>;</span><br><span class="line">  v14 = <span class="number">0</span>;</span><br><span class="line">  v15 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter The Right FLAG:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, Str1);</span><br><span class="line">  <span class="built_in">XOR</span>(Str1, <span class="number">3</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(Str1, Str2) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;U Saved IT!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Wrong!Try again!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">main</span>(v4, v5, v6);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XOR：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">size_t</span> __cdecl <span class="title">XOR</span><span class="params">(<span class="type">char</span> *Str, <span class="type">char</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">size_t</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+2Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="built_in">strlen</span>(Str);</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    Str[i] ^= <span class="number">3</span> * a2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很简单的异或操作，直接把str2亦或9即可</p><h2 id="enbase64"><a href="#enbase64" class="headerlink" title="enbase64"></a>enbase64</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> Source[<span class="number">61</span>]; <span class="comment">// [esp+1Fh] [ebp-81Dh] BYREF</span></span><br><span class="line">  <span class="type">char</span> v5[<span class="number">4</span>]; <span class="comment">// [esp+5Ch] [ebp-7E0h] BYREF</span></span><br><span class="line">  <span class="type">char</span> Str1[<span class="number">1000</span>]; <span class="comment">// [esp+60h] [ebp-7DCh] BYREF</span></span><br><span class="line">  <span class="type">char</span> Str[<span class="number">1012</span>]; <span class="comment">// [esp+448h] [ebp-3F4h] BYREF</span></span><br><span class="line"></span><br><span class="line">  __main();</span><br><span class="line">  <span class="built_in">memset</span>(Str, <span class="number">0</span>, <span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">memset</span>(Str1, <span class="number">0</span>, <span class="built_in">sizeof</span>(Str1));</span><br><span class="line">  *(_DWORD *)Source = *(_DWORD *)<span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(v5, <span class="string">&quot;9+/&quot;</span>);</span><br><span class="line">  <span class="built_in">qmemcpy</span>(&amp;Source[<span class="number">1</span>], &amp;aAbcdefghijklmn[-(Source - &amp;Source[<span class="number">1</span>])], <span class="number">4</span> * (((Source - &amp;Source[<span class="number">1</span>] + <span class="number">65</span>) &amp; <span class="number">0xFFFFFFFC</span>) &gt;&gt; <span class="number">2</span>));</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please input flag:&quot;</span>);</span><br><span class="line">  <span class="built_in">gets</span>(Str);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(Str) == <span class="number">33</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">base64</span>(Source, Str, Str1);</span><br><span class="line">    <span class="built_in">basecheck</span>(Str1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入base64</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">signed</span> <span class="type">int</span> __cdecl <span class="title">base64</span><span class="params">(<span class="type">char</span> *Source, <span class="type">char</span> *Str, <span class="type">char</span> *a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> v4; <span class="comment">// [esp+14h] [ebp-14h]</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> i; <span class="comment">// [esp+18h] [ebp-10h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">basechange</span>(Source);</span><br><span class="line">  v4 = <span class="built_in">strlen</span>(Str);</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; i += <span class="number">3</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = i;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= v4 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    a3[v6] = Source[Str[i] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">    a3[v6 + <span class="number">1</span>] = Source[(<span class="number">16</span> * Str[i]) &amp; <span class="number">0x30</span> | (Str[i + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>)];</span><br><span class="line">    a3[v6 + <span class="number">2</span>] = Source[(<span class="number">4</span> * Str[i + <span class="number">1</span>]) &amp; <span class="number">0x3C</span> | (Str[i + <span class="number">2</span>] &gt;&gt; <span class="number">6</span>)];</span><br><span class="line">    a3[v6 + <span class="number">3</span>] = Source[Str[i + <span class="number">2</span>] &amp; <span class="number">0x3F</span>];</span><br><span class="line">    v6 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>basechange函数是要换表，根据换表步骤换表即可，但是这里我用python写出来的代码换表不成功，c语言就行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">basechange</span><span class="params">(<span class="type">char</span>* table)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>* result; <span class="comment">// eax</span></span><br><span class="line">    <span class="type">char</span> des[<span class="number">65</span>]; <span class="comment">// [esp+13h] [ebp-155h] BYREF</span></span><br><span class="line">    <span class="type">int</span> key[<span class="number">65</span>]; <span class="comment">// [esp+54h] [ebp-114h] BYREF</span></span><br><span class="line">    <span class="type">int</span> j; <span class="comment">// [esp+158h] [ebp-10h]</span></span><br><span class="line">    <span class="type">int</span> i; <span class="comment">// [esp+15Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(key, <span class="number">0</span>, <span class="keyword">sizeof</span>(key));</span><br><span class="line">    key[<span class="number">0</span>] = <span class="number">16</span>;</span><br><span class="line">    key[<span class="number">1</span>] = <span class="number">34</span>;</span><br><span class="line">    key[<span class="number">2</span>] = <span class="number">56</span>;</span><br><span class="line">    key[<span class="number">3</span>] = <span class="number">7</span>;</span><br><span class="line">    key[<span class="number">4</span>] = <span class="number">46</span>;</span><br><span class="line">    key[<span class="number">5</span>] = <span class="number">2</span>;</span><br><span class="line">    key[<span class="number">6</span>] = <span class="number">10</span>;</span><br><span class="line">    key[<span class="number">7</span>] = <span class="number">44</span>;</span><br><span class="line">    key[<span class="number">8</span>] = <span class="number">20</span>;</span><br><span class="line">    key[<span class="number">9</span>] = <span class="number">41</span>;</span><br><span class="line">    key[<span class="number">10</span>] = <span class="number">59</span>;</span><br><span class="line">    key[<span class="number">11</span>] = <span class="number">31</span>;</span><br><span class="line">    key[<span class="number">12</span>] = <span class="number">51</span>;</span><br><span class="line">    key[<span class="number">13</span>] = <span class="number">60</span>;</span><br><span class="line">    key[<span class="number">14</span>] = <span class="number">61</span>;</span><br><span class="line">    key[<span class="number">15</span>] = <span class="number">26</span>;</span><br><span class="line">    key[<span class="number">16</span>] = <span class="number">5</span>;</span><br><span class="line">    key[<span class="number">17</span>] = <span class="number">40</span>;</span><br><span class="line">    key[<span class="number">18</span>] = <span class="number">21</span>;</span><br><span class="line">    key[<span class="number">19</span>] = <span class="number">38</span>;</span><br><span class="line">    key[<span class="number">20</span>] = <span class="number">4</span>;</span><br><span class="line">    key[<span class="number">21</span>] = <span class="number">54</span>;</span><br><span class="line">    key[<span class="number">22</span>] = <span class="number">52</span>;</span><br><span class="line">    key[<span class="number">23</span>] = <span class="number">47</span>;</span><br><span class="line">    key[<span class="number">24</span>] = <span class="number">3</span>;</span><br><span class="line">    key[<span class="number">25</span>] = <span class="number">11</span>;</span><br><span class="line">    key[<span class="number">26</span>] = <span class="number">58</span>;</span><br><span class="line">    key[<span class="number">27</span>] = <span class="number">48</span>;</span><br><span class="line">    key[<span class="number">28</span>] = <span class="number">32</span>;</span><br><span class="line">    key[<span class="number">29</span>] = <span class="number">15</span>;</span><br><span class="line">    key[<span class="number">30</span>] = <span class="number">49</span>;</span><br><span class="line">    key[<span class="number">31</span>] = <span class="number">14</span>;</span><br><span class="line">    key[<span class="number">32</span>] = <span class="number">37</span>;</span><br><span class="line">    key[<span class="number">34</span>] = <span class="number">55</span>;</span><br><span class="line">    key[<span class="number">35</span>] = <span class="number">53</span>;</span><br><span class="line">    key[<span class="number">36</span>] = <span class="number">24</span>;</span><br><span class="line">    key[<span class="number">37</span>] = <span class="number">35</span>;</span><br><span class="line">    key[<span class="number">38</span>] = <span class="number">18</span>;</span><br><span class="line">    key[<span class="number">39</span>] = <span class="number">25</span>;</span><br><span class="line">    key[<span class="number">40</span>] = <span class="number">33</span>;</span><br><span class="line">    key[<span class="number">41</span>] = <span class="number">43</span>;</span><br><span class="line">    key[<span class="number">42</span>] = <span class="number">50</span>;</span><br><span class="line">    key[<span class="number">43</span>] = <span class="number">39</span>;</span><br><span class="line">    key[<span class="number">44</span>] = <span class="number">12</span>;</span><br><span class="line">    key[<span class="number">45</span>] = <span class="number">19</span>;</span><br><span class="line">    key[<span class="number">46</span>] = <span class="number">13</span>;</span><br><span class="line">    key[<span class="number">47</span>] = <span class="number">42</span>;</span><br><span class="line">    key[<span class="number">48</span>] = <span class="number">9</span>;</span><br><span class="line">    key[<span class="number">49</span>] = <span class="number">17</span>;</span><br><span class="line">    key[<span class="number">50</span>] = <span class="number">28</span>;</span><br><span class="line">    key[<span class="number">51</span>] = <span class="number">30</span>;</span><br><span class="line">    key[<span class="number">52</span>] = <span class="number">23</span>;</span><br><span class="line">    key[<span class="number">53</span>] = <span class="number">36</span>;</span><br><span class="line">    key[<span class="number">54</span>] = <span class="number">1</span>;</span><br><span class="line">    key[<span class="number">55</span>] = <span class="number">22</span>;</span><br><span class="line">    key[<span class="number">56</span>] = <span class="number">57</span>;</span><br><span class="line">    key[<span class="number">57</span>] = <span class="number">63</span>;</span><br><span class="line">    key[<span class="number">58</span>] = <span class="number">8</span>;</span><br><span class="line">    key[<span class="number">59</span>] = <span class="number">27</span>;</span><br><span class="line">    key[<span class="number">60</span>] = <span class="number">6</span>;</span><br><span class="line">    key[<span class="number">61</span>] = <span class="number">62</span>;</span><br><span class="line">    key[<span class="number">62</span>] = <span class="number">45</span>;</span><br><span class="line">    key[<span class="number">63</span>] = <span class="number">29</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(des, table);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">47</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= <span class="number">63</span>; ++j)</span><br><span class="line">            table[j] = des[key[j]];</span><br><span class="line">        <span class="built_in">strcpy</span>(des, table);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> table[<span class="number">65</span>] = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;</span><br><span class="line">    basechange(table);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, table);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>换表后，表为：gJ1BRjQie&#x2F;FIWhEslq7GxbnL26M4+HXUtcpmVTKaydOP38of5v90ZSwrkYzCAuND</p><p>直接进入basecheck函数拿到加密的字符串即可解密</p><h2 id="snake"><a href="#snake" class="headerlink" title="snake"></a>snake</h2><p>pyc文件直接拿去反编，发现缺少magic number，补齐这个文件的magic number，这个文件版本为3.7，magic number为 42 0D 0D 0A，2.7版本：03 F3 0D 0A</p><p>3.5和3.6版本：33 0D 0D 0A</p><p>补齐之后直接反编</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uncompyle6.exe xxx.pyc &gt; xxx.py</span><br></pre></td></tr></table></figure><p>然后直接在代码中找到flag的数据，直接转换为字符即可</p><h2 id="For-Aiur"><a href="#For-Aiur" class="headerlink" title="For Aiur"></a>For Aiur</h2><p>先用pyinstxtractor解包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python pyinstxtractor.py xxx.exe</span><br></pre></td></tr></table></figure><p>得到pyc文件，本地的uncomple6没有反编译出，找了个在线网站编译，得到的py文件里唯一有用的信息就是调用了ch包里的check函数，在前面解的包里的PYZ-00.pyz_extracted文件夹中有ch.pyc文件，反编译，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">enc = [</span><br><span class="line"> <span class="number">98</span>, <span class="number">77</span>, <span class="number">94</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">107</span>, <span class="number">125</span>, <span class="number">66</span>, <span class="number">87</span>, <span class="number">70</span>, <span class="number">113</span>, <span class="number">92</span>, <span class="number">83</span>, <span class="number">70</span>, <span class="number">85</span>, <span class="number">81</span>, </span><br><span class="line"> <span class="number">19</span>, <span class="number">21</span>, <span class="number">109</span>, <span class="number">99</span>, <span class="number">87</span>, <span class="number">107</span>, <span class="number">127</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">64</span>, <span class="number">109</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">90</span>, <span class="number">65</span>, </span><br><span class="line"> <span class="number">64</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">81</span>, <span class="number">3</span>, <span class="number">109</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">80</span>, <span class="number">91</span>, <span class="number">64</span>, <span class="number">91</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">0</span>, <span class="number">94</span>, </span><br><span class="line"> <span class="number">107</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">94</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">71</span>]</span><br><span class="line">lis = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">num</span>):</span><br><span class="line">    flag = <span class="string">&#x27;LitCTF&#123;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> num % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> num % <span class="number">6</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> num % <span class="number">8</span> == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">if</span> num % <span class="number">12</span> == <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">if</span> num % <span class="number">13</span> == <span class="number">11</span>:</span><br><span class="line">                            k = <span class="built_in">str</span>(num)</span><br><span class="line">                            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">                                flag += <span class="built_in">chr</span>(<span class="built_in">ord</span>(k[i % <span class="built_in">len</span>(k)]) ^ enc[i])</span><br><span class="line">                                lis.append(<span class="built_in">ord</span>(k[i % <span class="built_in">len</span>(k)]) ^ enc[i])</span><br><span class="line">                            <span class="keyword">else</span>:</span><br><span class="line">                                flag += <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">                                <span class="keyword">from</span> cv2 <span class="keyword">import</span> imread, imshow, namedWindow, WINDOW_NORMAL, FONT_HERSHEY_SIMPLEX, getTickCount, getTickFrequency, putText, LINE_AA, waitKey, getTextSize, resize, moveWindow, IMREAD_UNCHANGED, destroyAllWindows</span><br><span class="line">                                <span class="keyword">from</span> numpy <span class="keyword">import</span> uint8, zeros</span><br><span class="line">                                img = zeros((<span class="number">200</span>, <span class="number">20000</span>, <span class="number">3</span>), uint8)</span><br><span class="line">                                img.fill(<span class="number">255</span>)</span><br><span class="line">                                text = flag</span><br><span class="line">                                font = FONT_HERSHEY_SIMPLEX</span><br><span class="line">                                pos = (<span class="number">50</span>, <span class="number">120</span>)</span><br><span class="line">                                color = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">                                thickness = <span class="number">2</span></span><br><span class="line">                                putText(img, text, pos, font, <span class="number">1</span>, color, thickness, LINE_AA)</span><br><span class="line">                                imshow(<span class="string">&#x27;flag&#x27;</span>, img)</span><br><span class="line">                                waitKey(<span class="number">0</span>)</span><br><span class="line">                                destroyAllWindows()</span><br></pre></td></tr></table></figure><p>直接根据代码写脚本即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">enc = [</span><br><span class="line"> <span class="number">98</span>, <span class="number">77</span>, <span class="number">94</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">107</span>, <span class="number">125</span>, <span class="number">66</span>, <span class="number">87</span>, <span class="number">70</span>, <span class="number">113</span>, <span class="number">92</span>, <span class="number">83</span>, <span class="number">70</span>, <span class="number">85</span>, <span class="number">81</span>, </span><br><span class="line"> <span class="number">19</span>, <span class="number">21</span>, <span class="number">109</span>, <span class="number">99</span>, <span class="number">87</span>, <span class="number">107</span>, <span class="number">127</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">64</span>, <span class="number">109</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">90</span>, <span class="number">65</span>, </span><br><span class="line"> <span class="number">64</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">81</span>, <span class="number">3</span>, <span class="number">109</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">80</span>, <span class="number">91</span>, <span class="number">64</span>, <span class="number">91</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">0</span>, <span class="number">94</span>, </span><br><span class="line"> <span class="number">107</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">94</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">71</span>]</span><br><span class="line">num=<span class="number">0</span></span><br><span class="line">flag=<span class="string">&quot;LitCTF&#123;&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> num % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> num % <span class="number">6</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> num % <span class="number">8</span> == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">if</span> num % <span class="number">12</span> == <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">if</span> num % <span class="number">13</span> == <span class="number">11</span>:</span><br><span class="line">                            k = <span class="built_in">str</span>(num)</span><br><span class="line">                            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">                                flag += <span class="built_in">chr</span>(<span class="built_in">ord</span>(k[i % <span class="built_in">len</span>(k)]) ^ enc[i])</span><br><span class="line">                                </span><br><span class="line">                            <span class="keyword">else</span>:</span><br><span class="line">                                flag += <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">    num=num+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="程序和人能跑一个就行"><a href="#程序和人能跑一个就行" class="headerlink" title="程序和人能跑一个就行"></a>程序和人能跑一个就行</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  _DWORD *v6; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [esp+0h] [ebp-2ACh] BYREF</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [esp+14h] [ebp-298h]</span></span><br><span class="line">  <span class="type">int</span> *v9; <span class="comment">// [esp+18h] [ebp-294h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [esp+1Ch] [ebp-290h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [esp+20h] [ebp-28Ch]</span></span><br><span class="line">  <span class="built_in">int</span> (__cdecl *v12)(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>); <span class="comment">// [esp+34h] [ebp-278h]</span></span><br><span class="line">  <span class="type">int</span> *v13; <span class="comment">// [esp+38h] [ebp-274h]</span></span><br><span class="line">  <span class="type">int</span> *v14; <span class="comment">// [esp+3Ch] [ebp-270h]</span></span><br><span class="line">  <span class="type">void</span> *v15; <span class="comment">// [esp+40h] [ebp-26Ch]</span></span><br><span class="line">  <span class="type">int</span> *v16; <span class="comment">// [esp+44h] [ebp-268h]</span></span><br><span class="line">  <span class="type">char</span> Buf1[<span class="number">27</span>]; <span class="comment">// [esp+68h] [ebp-244h] BYREF</span></span><br><span class="line">  <span class="type">char</span> Buf2[<span class="number">256</span>]; <span class="comment">// [esp+A0h] [ebp-20Ch] BYREF</span></span><br><span class="line">  <span class="type">char</span> Destination[<span class="number">268</span>]; <span class="comment">// [esp+1A0h] [ebp-10Ch] BYREF</span></span><br><span class="line">  <span class="type">int</span> savedregs; <span class="comment">// [esp+2ACh] [ebp+0h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v9 = &amp;v10;</span><br><span class="line">  v12 = sub_4752F0;</span><br><span class="line">  v13 = dword_476078;</span><br><span class="line">  v14 = &amp;savedregs;</span><br><span class="line">  v15 = &amp;loc_475B38;</span><br><span class="line">  v16 = &amp;v7;</span><br><span class="line">  <span class="built_in">sub_40A8F0</span>(&amp;v10);</span><br><span class="line">  <span class="built_in">sub_409B80</span>();</span><br><span class="line">  v11 = <span class="number">-1</span>;</span><br><span class="line">  <span class="built_in">sub_472810</span>((<span class="type">int</span>)&amp;dword_47DD80, Buf2);</span><br><span class="line">  <span class="built_in">strcpy</span>(Destination, <span class="string">&quot;litctf&quot;</span>);</span><br><span class="line">  <span class="built_in">sub_4015A0</span>(Buf2, <span class="built_in">strlen</span>(Buf2), Destination, <span class="number">6</span>);</span><br><span class="line">  Buf1[<span class="number">0</span>] = <span class="number">-115</span>;</span><br><span class="line">  Buf1[<span class="number">1</span>] = <span class="number">108</span>;</span><br><span class="line">  Buf1[<span class="number">2</span>] = <span class="number">-123</span>;</span><br><span class="line">  Buf1[<span class="number">3</span>] = <span class="number">118</span>;</span><br><span class="line">  Buf1[<span class="number">4</span>] = <span class="number">50</span>;</span><br><span class="line">  Buf1[<span class="number">5</span>] = <span class="number">114</span>;</span><br><span class="line">  Buf1[<span class="number">6</span>] = <span class="number">-73</span>;</span><br><span class="line">  Buf1[<span class="number">7</span>] = <span class="number">64</span>;</span><br><span class="line">  Buf1[<span class="number">8</span>] = <span class="number">-120</span>;</span><br><span class="line">  Buf1[<span class="number">9</span>] = <span class="number">126</span>;</span><br><span class="line">  Buf1[<span class="number">10</span>] = <span class="number">-107</span>;</span><br><span class="line">  Buf1[<span class="number">11</span>] = <span class="number">-18</span>;</span><br><span class="line">  Buf1[<span class="number">12</span>] = <span class="number">-59</span>;</span><br><span class="line">  Buf1[<span class="number">13</span>] = <span class="number">-19</span>;</span><br><span class="line">  Buf1[<span class="number">14</span>] = <span class="number">46</span>;</span><br><span class="line">  Buf1[<span class="number">15</span>] = <span class="number">113</span>;</span><br><span class="line">  Buf1[<span class="number">16</span>] = <span class="number">55</span>;</span><br><span class="line">  Buf1[<span class="number">17</span>] = <span class="number">-15</span>;</span><br><span class="line">  Buf1[<span class="number">18</span>] = <span class="number">74</span>;</span><br><span class="line">  Buf1[<span class="number">19</span>] = <span class="number">-103</span>;</span><br><span class="line">  Buf1[<span class="number">20</span>] = <span class="number">53</span>;</span><br><span class="line">  Buf1[<span class="number">21</span>] = <span class="number">24</span>;</span><br><span class="line">  Buf1[<span class="number">22</span>] = <span class="number">-89</span>;</span><br><span class="line">  Buf1[<span class="number">23</span>] = <span class="number">-80</span>;</span><br><span class="line">  Buf1[<span class="number">24</span>] = <span class="number">0</span>;</span><br><span class="line">  Buf1[<span class="number">25</span>] = <span class="number">-106</span>;</span><br><span class="line">  Buf1[<span class="number">26</span>] = <span class="number">-73</span>;</span><br><span class="line">  v8 = <span class="built_in">memcmp</span>(Buf1, Buf2, <span class="number">0x1B</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( v8 )</span><br><span class="line">  &#123;</span><br><span class="line">    v11 = <span class="number">1</span>;</span><br><span class="line">    v5 = <span class="built_in">sub_471AE0</span>((<span class="type">int</span>)&amp;dword_47DF60, <span class="string">&quot;U are wrong?&quot;</span>);</span><br><span class="line">    <span class="built_in">sub_46FBA0</span>(v5);</span><br><span class="line">    v6 = (_DWORD *)<span class="built_in">sub_474310</span>(<span class="number">4</span>);</span><br><span class="line">    *v6 = Buf2;</span><br><span class="line">    <span class="built_in">sub_475190</span>(v6, &amp;off_483660, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v11 = <span class="number">1</span>;</span><br><span class="line">  v3 = <span class="built_in">sub_471AE0</span>((<span class="type">int</span>)&amp;dword_47DF60, <span class="string">&quot;U are right?&quot;</span>);</span><br><span class="line">  <span class="built_in">sub_46FBA0</span>(v3);</span><br><span class="line">  <span class="built_in">sub_40AA70</span>(v9);</span><br><span class="line">  <span class="keyword">return</span> v8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个RC4加密，这里的Buf1是假的flag，因为无论如何if语句都会执行，去找真的flag的数据，在sub_475190处设下断点，然后运行，F8把这个函数跳过，往后面找，就可以找到真正的flag数据</p><p><img src="/2023/05/16/LitCTF%E5%A4%8D%E7%8E%B0/1.png"></p><p>前面提到了密钥为litctf，直接写出脚本即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ARC4</span><br><span class="line"></span><br><span class="line">val=[<span class="number">0x8D</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, </span><br><span class="line">  <span class="number">0x24</span>, <span class="number">0x84</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x6C</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x85</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x85</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x86</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x76</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x87</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x32</span>, </span><br><span class="line">  <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x88</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x72</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, </span><br><span class="line">  <span class="number">0x24</span>, <span class="number">0x89</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xB7</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x8A</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x43</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x8B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x85</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x8C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x7B</span>, </span><br><span class="line">  <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x8D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x85</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, </span><br><span class="line">  <span class="number">0x24</span>, <span class="number">0x8E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xDE</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x8F</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x90</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xFB</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x91</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x2E</span>, </span><br><span class="line">  <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x92</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x64</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, </span><br><span class="line">  <span class="number">0x24</span>, <span class="number">0x93</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x94</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC8</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x95</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x5F</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x96</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x9A</span>, </span><br><span class="line">  <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x97</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x35</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, </span><br><span class="line">  <span class="number">0x24</span>, <span class="number">0x98</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x18</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x99</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xAD</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x9A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xB5</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x9B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x15</span>, </span><br><span class="line">  <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x9C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x92</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, </span><br><span class="line">  <span class="number">0x24</span>, <span class="number">0x9D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xBE</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x9E</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x1B</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x9F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x88</span>]</span><br><span class="line">vals=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(val),<span class="number">8</span>):</span><br><span class="line">    vals.append(val[i])</span><br><span class="line">vals_b=<span class="built_in">bytes</span>(vals)</span><br><span class="line">key=<span class="string">b&quot;litctf&quot;</span></span><br><span class="line">enc=ARC4.new(key)</span><br><span class="line">flag=enc.decrypt(vals_b)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="debase64"><a href="#debase64" class="headerlink" title="debase64"></a>debase64</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v4[<span class="number">4</span>]; <span class="comment">// [esp+10h] [ebp-44h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v5; <span class="comment">// [esp+20h] [ebp-34h]</span></span><br><span class="line">  __int16 v6; <span class="comment">// [esp+21h] [ebp-33h]</span></span><br><span class="line">  __int16 v7; <span class="comment">// [esp+23h] [ebp-31h]</span></span><br><span class="line">  __int16 v8; <span class="comment">// [esp+25h] [ebp-2Fh]</span></span><br><span class="line">  __int16 v9; <span class="comment">// [esp+27h] [ebp-2Dh]</span></span><br><span class="line">  __int16 v10; <span class="comment">// [esp+29h] [ebp-2Bh]</span></span><br><span class="line">  __int16 v11; <span class="comment">// [esp+2Bh] [ebp-29h]</span></span><br><span class="line">  __int16 v12; <span class="comment">// [esp+2Dh] [ebp-27h]</span></span><br><span class="line">  <span class="type">char</span> v13[<span class="number">20</span>]; <span class="comment">// [esp+3Ch] [ebp-18h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">sub_402290</span>();</span><br><span class="line">  <span class="built_in">puts</span>(&amp;Buffer);</span><br><span class="line">  <span class="built_in">memset</span>(v4, <span class="number">0</span>, <span class="number">15</span>);</span><br><span class="line">  <span class="built_in">memset</span>(v13, <span class="number">0</span>, <span class="built_in">sizeof</span>(v13));</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, v13);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(v13) != <span class="number">20</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(&amp;byte_404053);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v5 = <span class="number">70</span>;</span><br><span class="line">  v6 = <span class="number">6381</span>;</span><br><span class="line">  v7 = <span class="number">22166</span>;</span><br><span class="line">  v8 = <span class="number">-11618</span>;</span><br><span class="line">  v9 = <span class="number">-19854</span>;</span><br><span class="line">  v10 = <span class="number">-32589</span>;</span><br><span class="line">  v11 = <span class="number">-144</span>;</span><br><span class="line">  v12 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">sub_401520</span>(v13, v4);</span><br><span class="line">  <span class="keyword">if</span> ( v5 != <span class="built_in">LOBYTE</span>(v4[<span class="number">0</span>])</span><br><span class="line">    || v6 != *(_WORD *)((<span class="type">char</span> *)v4 + <span class="number">1</span>)</span><br><span class="line">    || v7 != *(_WORD *)((<span class="type">char</span> *)v4 + <span class="number">3</span>)</span><br><span class="line">    || v8 != *(_WORD *)((<span class="type">char</span> *)&amp;v4[<span class="number">1</span>] + <span class="number">1</span>)</span><br><span class="line">    || v9 != *(_WORD *)((<span class="type">char</span> *)&amp;v4[<span class="number">1</span>] + <span class="number">3</span>)</span><br><span class="line">    || v10 != *(_WORD *)((<span class="type">char</span> *)&amp;v4[<span class="number">2</span>] + <span class="number">1</span>)</span><br><span class="line">    || v11 != *(_WORD *)((<span class="type">char</span> *)&amp;v4[<span class="number">2</span>] + <span class="number">3</span>)</span><br><span class="line">    || v12 != *(_WORD *)((<span class="type">char</span> *)&amp;v4[<span class="number">3</span>] + <span class="number">1</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(&amp;byte_40405E);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(&amp;byte_404065);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入 sub_401520</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">sub_401520</span><span class="params">(_BYTE *a1, <span class="type">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _BYTE *v2; <span class="comment">// ebp</span></span><br><span class="line">  _BYTE *v3; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// edx</span></span><br><span class="line">  _BYTE *v7; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// ecx</span></span><br><span class="line">  _BYTE *v9; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> k; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// [esp+0h] [ebp-38h]</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// [esp+4h] [ebp-34h]</span></span><br><span class="line">  <span class="type">int</span> v14; <span class="comment">// [esp+Ch] [ebp-2Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !*a1 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  v2 = a1 + <span class="number">4</span>;</span><br><span class="line">  v3 = a1;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  v13 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v14 = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i != <span class="number">64</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( byte_404000[i] != *v3 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( ++i == <span class="number">64</span> )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_7;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">LOBYTE</span>(v14) = i;</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_7:</span><br><span class="line">    <span class="built_in">LOBYTE</span>(i) = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( byte_404000[i] != a1[v4 + <span class="number">1</span>] )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( ++i == <span class="number">64</span> )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_11;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">BYTE1</span>(v14) = i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( i != <span class="number">64</span> );</span><br><span class="line">LABEL_11:</span><br><span class="line">    v7 = &amp;a1[v4 + <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j != <span class="number">64</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( byte_404000[j] != *v7 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( ++j == <span class="number">64</span> )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_15;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">BYTE2</span>(v14) = j;</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_15:</span><br><span class="line">    v9 = &amp;a1[v4 + <span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0</span>; k != <span class="number">64</span>; ++k )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( byte_404000[k] != *v9 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( ++k == <span class="number">64</span> )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_19;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">HIBYTE</span>(v14) = k;</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_19:</span><br><span class="line">    v12 = v5 + <span class="number">1</span>;</span><br><span class="line">    *(_BYTE *)(a2 + v5) = (<span class="number">4</span> * <span class="built_in">HIBYTE</span>(v14)) | (<span class="built_in">BYTE2</span>(v14) &gt;&gt; <span class="number">4</span>) &amp; <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *v7 == <span class="number">61</span> )</span><br><span class="line">      <span class="keyword">return</span> v12;</span><br><span class="line">    v12 = v5 + <span class="number">2</span>;</span><br><span class="line">    *(_BYTE *)(a2 + v5 + <span class="number">1</span>) = (<span class="number">16</span> * <span class="built_in">BYTE2</span>(v14)) | (<span class="built_in">BYTE1</span>(v14) &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0xF</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *v9 == <span class="number">61</span> )</span><br><span class="line">      <span class="keyword">return</span> v12;</span><br><span class="line">    v5 += <span class="number">3</span>;</span><br><span class="line">    v3 = v2;</span><br><span class="line">    v2 += <span class="number">4</span>;</span><br><span class="line">    v13 += <span class="number">4</span>;</span><br><span class="line">    v4 = v13;</span><br><span class="line">    *(_BYTE *)(a2 + v5 - <span class="number">1</span>) = (<span class="built_in">BYTE1</span>(v14) &lt;&lt; <span class="number">6</span>) | v14 &amp; <span class="number">0x3F</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !*(v2 - <span class="number">4</span>) )</span><br><span class="line">      <span class="keyword">return</span> v5;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个类似base64的算法，将输入的20个字符分为4组每组分别反序做base64运算，这里字符会与v4作比较，直接在sub_401520处设个断点进入就能看到v4的值了</p><p><img src="/2023/05/16/LitCTF%E5%A4%8D%E7%8E%B0/2.png"></p><p>但是拿到的字符会有一位不知道，因为题目给了最后的md5值，直接爆破就好，脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">val=[<span class="number">0x46</span>,<span class="number">0xED</span>,<span class="number">0X18</span>,<span class="number">0X96</span>,<span class="number">0X56</span>,<span class="number">0X9E</span>,<span class="number">0XD2</span>,<span class="number">0X72</span>,<span class="number">0XB2</span>,<span class="number">0XB3</span>,<span class="number">0X80</span>,<span class="number">0X70</span>,<span class="number">0XFF</span>]</span><br><span class="line">val_b=<span class="built_in">bytes</span>(val)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(val_b))<span class="comment">#Ru0Yllae0nKys4Bw/w==   --&gt; Y0uReallyKn0wB4s?===</span></span><br><span class="line"></span><br><span class="line">key=<span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> key:</span><br><span class="line">    flag=<span class="string">&quot;Y0uReallyKn0wB4s&quot;</span>+i+<span class="string">&quot;===&quot;</span></span><br><span class="line">    <span class="keyword">if</span> hashlib.md5(flag.encode()).hexdigest()==<span class="string">&quot;5a3ebb487ad0046e52db00570339aace&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>知道了ARC4加密方式的处理，知道了magic number。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 赛事复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve.young_driver</title>
      <link href="/2023/05/08/reserve-young-driver/"/>
      <url>/2023/05/08/reserve-young-driver/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="buuctf-young-driver"><a href="#buuctf-young-driver" class="headerlink" title="buuctf young_driver"></a>buuctf young_driver</h1><h2 id="查壳，脱去upx壳"><a href="#查壳，脱去upx壳" class="headerlink" title="查壳，脱去upx壳"></a>查壳，脱去upx壳</h2><h2 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h2><p>找到打开main函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main_0</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  HANDLE Thread; <span class="comment">// [esp+D0h] [ebp-14h]</span></span><br><span class="line">  HANDLE hObject; <span class="comment">// [esp+DCh] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  ((<span class="built_in">void</span> (*)(<span class="type">void</span>))sub_4110FF)();</span><br><span class="line">  ::hObject = <span class="built_in">CreateMutexW</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">j_strcpy</span>(Destination, &amp;Source);</span><br><span class="line">  hObject = <span class="built_in">CreateThread</span>(<span class="number">0</span>, <span class="number">0</span>, StartAddress, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);<span class="comment">//线程1</span></span><br><span class="line">  Thread = <span class="built_in">CreateThread</span>(<span class="number">0</span>, <span class="number">0</span>, sub_41119F, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);<span class="comment">//线程2</span></span><br><span class="line">  <span class="built_in">CloseHandle</span>(hObject);</span><br><span class="line">  <span class="built_in">CloseHandle</span>(Thread);</span><br><span class="line">  <span class="keyword">while</span> ( dword_418008 != <span class="number">-1</span> )</span><br><span class="line">    ;</span><br><span class="line">  <span class="built_in">sub_411190</span>();</span><br><span class="line">  <span class="built_in">CloseHandle</span>(::hObject);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入线程1，</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __stdcall __noreturn <span class="title">StartAddress_0</span><span class="params">(<span class="type">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">WaitForSingleObject</span>(hObject, <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">    <span class="keyword">if</span> ( dword_418008 &gt; <span class="number">-1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">sub_41112C</span>(Source, dword_418008);<span class="comment">//一个加密函数，通过追踪sub_411190()函数知道Source就是指向off_418004</span></span><br><span class="line">      --dword_418008;<span class="comment">//间隔两个线程</span></span><br><span class="line">      <span class="built_in">Sleep</span>(<span class="number">0x64</span>u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">ReleaseMutex</span>(hObject);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>打开加密函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span> *__cdecl <span class="title">sub_411940</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> *result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> v3; <span class="comment">// [esp+D3h] [ebp-5h]</span></span><br><span class="line"></span><br><span class="line">  v3 = *(_BYTE *)(a2 + a1);</span><br><span class="line">  <span class="keyword">if</span> ( (v3 &lt; <span class="number">97</span> || v3 &gt; <span class="number">122</span>) &amp;&amp; (v3 &lt; <span class="number">65</span> || v3 &gt; <span class="number">90</span>) )<span class="comment">//不在字母范围就直接退出</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v3 &lt; <span class="number">97</span> || v3 &gt; <span class="number">122</span> )<span class="comment">//小写的操作</span></span><br><span class="line">  &#123;</span><br><span class="line">    result = off_418000[<span class="number">0</span>];</span><br><span class="line">    *(_BYTE *)(a2 + a1) = off_418000[<span class="number">0</span>][*(<span class="type">char</span> *)(a2 + a1) - <span class="number">38</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span><span class="comment">//大写的操作</span></span><br><span class="line">  &#123;</span><br><span class="line">    result = off_418000[<span class="number">0</span>];</span><br><span class="line">    *(_BYTE *)(a2 + a1) = off_418000[<span class="number">0</span>][*(<span class="type">char</span> *)(a2 + a1) - <span class="number">96</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开线程2</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __stdcall __noreturn <span class="title">sub_411B10</span><span class="params">(<span class="type">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">WaitForSingleObject</span>(hObject, <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">    <span class="keyword">if</span> ( dword_418008 &gt; <span class="number">-1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">Sleep</span>(<span class="number">0x64</span>u);</span><br><span class="line">      --dword_418008;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">ReleaseMutex</span>(hObject);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程2没有做事情，但是也占了一个运行为，也就是在奇数位进行加密，偶数位不加密。</p><p>跟进dword_418008，拿到关键字符</p><p><img src="/2023/05/08/reserve-young-driver/key1.png"></p><p>最后写脚本即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">key1 = <span class="string">&quot;QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm&quot;</span></span><br><span class="line">key2 = <span class="string">&quot;TOiZiZtOrYaToUwPnToBsOaOapsyS&quot;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key2)):</span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">        flag += key2[i]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> key2[i].isupper():</span><br><span class="line">            flag += <span class="built_in">chr</span>(key1.find(key2[i])+<span class="number">96</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flag += <span class="built_in">chr</span>(key1.find(key2[i])+<span class="number">38</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>buuctf上的flag需要在后面加一个E</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>多线程题目，注意主线程和每个线程进行情况。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve.maze</title>
      <link href="/2023/05/07/reserve-maze/"/>
      <url>/2023/05/07/reserve-maze/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="buuctf-HDCTF2019-maze"><a href="#buuctf-HDCTF2019-maze" class="headerlink" title="buuctf [HDCTF2019]maze"></a>buuctf [HDCTF2019]maze</h2><h2 id="查壳，UPX壳"><a href="#查壳，UPX壳" class="headerlink" title="查壳，UPX壳"></a>查壳，UPX壳</h2><p>扔进kali脱壳</p><h2 id="脱完壳后扔进ida"><a href="#脱完壳后扔进ida" class="headerlink" title="脱完壳后扔进ida"></a>脱完壳后扔进ida</h2><p>先shift+f12找到关键字符串，然后追踪到如下函数：</p><p><img src="/2023/05/07/reserve-maze/key1.png"></p><p>这里是main函数，但是打不开，网上查阅知道这就是花指令，这里需要把call这里的跳转nop掉，但是0x40102C是指向这里的，所以也要nop掉，但注意，call这里不能直接nop，因为里面可能有数据，所以先按d转化为数据，再一个一个nop，我们发现只要nop掉第一个数据就可以选中关键数据然后按p得到伪代码了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+10h] [ebp-14h]</span></span><br><span class="line">  <span class="type">char</span> v5[<span class="number">16</span>]; <span class="comment">// [esp+14h] [ebp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">sub_401140</span>(aGoThroughTheMa);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%14s&quot;</span>, v5);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">13</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> ( v5[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">        --*(_DWORD *)asc_408078;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">        ++*(_DWORD *)asc_408078;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">        --dword_40807C;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line">        ++dword_40807C;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( *(_DWORD *)asc_408078 == <span class="number">5</span> &amp;&amp; dword_40807C == <span class="number">-4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">sub_401140</span>(aCongratulation);</span><br><span class="line">    <span class="built_in">sub_401140</span>(aHereIsTheFlagF);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">sub_401140</span>(aTryAgain);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再找到迷宫：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*******+**</span><br><span class="line">******* **</span><br><span class="line">****    **</span><br><span class="line">**   *****</span><br><span class="line">** **F****</span><br><span class="line">**    ****</span><br><span class="line">**********</span><br></pre></td></tr></table></figure><p>不难看出+是入口，F是终点，上：w，下：s，左：a，右：d</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>第一次接触到花指令，知道了需要将花指令出nop掉，然后利用ida得到伪代码，需要注意的是，在nop的时候要小心数据，不要一下全部nop。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/05/02/hello-world/"/>
      <url>/2023/05/02/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.hsh’s new blog.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>reserve.usualCrypt</title>
      <link href="/2023/04/28/reserve-usualCrypt/"/>
      <url>/2023/04/28/reserve-usualCrypt/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="buuctf-ACTF新生赛-usualCrypt"><a href="#buuctf-ACTF新生赛-usualCrypt" class="headerlink" title="buuctf [ACTF新生赛]usualCrypt"></a>buuctf [ACTF新生赛]usualCrypt</h1><h2 id="查壳，无壳"><a href="#查壳，无壳" class="headerlink" title="查壳，无壳"></a>查壳，无壳</h2><h2 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h2><p>发现三个有关函数</p><p>sub_401000</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sub_401000</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> v1; <span class="comment">// cl</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( result = <span class="number">6</span>; result &lt; <span class="number">15</span>; ++result )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = byte_40E0AA[result];</span><br><span class="line">    byte_40E0AA[result] = byte_40E0A0[result];</span><br><span class="line">    byte_40E0A0[result] = v1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sub_401030</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">sub_401030</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> v2; <span class="comment">// al</span></span><br><span class="line"></span><br><span class="line">  v1 = <span class="number">0</span>i64;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(a1) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v2 = a1[<span class="built_in">HIDWORD</span>(v1)];</span><br><span class="line">      <span class="keyword">if</span> ( v2 &lt; <span class="number">97</span> || v2 &gt; <span class="number">122</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v2 &lt; <span class="number">65</span> || v2 &gt; <span class="number">90</span> )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_9;</span><br><span class="line">        <span class="built_in">LOBYTE</span>(v1) = v2 + <span class="number">32</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">LOBYTE</span>(v1) = v2 - <span class="number">32</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      a1[<span class="built_in">HIDWORD</span>(v1)] = v1;</span><br><span class="line">LABEL_9:</span><br><span class="line">      <span class="built_in">LODWORD</span>(v1) = <span class="number">0</span>;</span><br><span class="line">      ++<span class="built_in">HIDWORD</span>(v1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">HIDWORD</span>(v1) &lt; <span class="built_in">strlen</span>(a1) );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sub_401080</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">sub_401080</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2, <span class="type">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// edi</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// esi</span></span><br><span class="line">  _BYTE *v12; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// [esp+18h] [ebp+8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">sub_401000</span>();</span><br><span class="line">  v5 = a2 % <span class="number">3</span>;</span><br><span class="line">  v6 = a1;</span><br><span class="line">  v7 = a2 - a2 % <span class="number">3</span>;</span><br><span class="line">  v15 = a2 % <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v7 &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">LOBYTE</span>(v5) = *(_BYTE *)(a1 + v3);</span><br><span class="line">      v3 += <span class="number">3</span>;</span><br><span class="line">      v8 = v4 + <span class="number">1</span>;</span><br><span class="line">      *(_BYTE *)(v8 + a3 - <span class="number">1</span>) = byte_40E0A0[(v5 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x3F</span>];</span><br><span class="line">      *(_BYTE *)(++v8 + a3 - <span class="number">1</span>) = byte_40E0A0[<span class="number">16</span> * (*(_BYTE *)(a1 + v3 - <span class="number">3</span>) &amp; <span class="number">3</span>)</span><br><span class="line">                                            + (((<span class="type">int</span>)*(<span class="type">unsigned</span> __int8 *)(a1 + v3 - <span class="number">2</span>) &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xF</span>)];</span><br><span class="line">      *(_BYTE *)(++v8 + a3 - <span class="number">1</span>) = byte_40E0A0[<span class="number">4</span> * (*(_BYTE *)(a1 + v3 - <span class="number">2</span>) &amp; <span class="number">0xF</span>)</span><br><span class="line">                                            + (((<span class="type">int</span>)*(<span class="type">unsigned</span> __int8 *)(a1 + v3 - <span class="number">1</span>) &gt;&gt; <span class="number">6</span>) &amp; <span class="number">3</span>)];</span><br><span class="line">      v5 = *(_BYTE *)(a1 + v3 - <span class="number">1</span>) &amp; <span class="number">0x3F</span>;</span><br><span class="line">      v4 = v8 + <span class="number">1</span>;</span><br><span class="line">      *(_BYTE *)(v4 + a3 - <span class="number">1</span>) = byte_40E0A0[v5];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v3 &lt; v7 );</span><br><span class="line">    v5 = v15;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v5 == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">LOBYTE</span>(v7) = *(_BYTE *)(v3 + a1);</span><br><span class="line">    v9 = v4 + <span class="number">1</span>;</span><br><span class="line">    *(_BYTE *)(v9 + a3 - <span class="number">1</span>) = byte_40E0A0[(v7 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x3F</span>];</span><br><span class="line">    v10 = v9 + <span class="number">1</span>;</span><br><span class="line">    *(_BYTE *)(v10 + a3 - <span class="number">1</span>) = byte_40E0A0[<span class="number">16</span> * (*(_BYTE *)(v3 + a1) &amp; <span class="number">3</span>)];</span><br><span class="line">    *(_BYTE *)(v10 + a3) = <span class="number">61</span>;</span><br><span class="line">LABEL_8:</span><br><span class="line">    v13 = v10 + <span class="number">1</span>;</span><br><span class="line">    *(_BYTE *)(v13 + a3) = <span class="number">61</span>;</span><br><span class="line">    v4 = v13 + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_9;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v5 == <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v11 = v4 + <span class="number">1</span>;</span><br><span class="line">    *(_BYTE *)(v11 + a3 - <span class="number">1</span>) = byte_40E0A0[((<span class="type">int</span>)*(<span class="type">unsigned</span> __int8 *)(v3 + a1) &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x3F</span>];</span><br><span class="line">    v12 = (_BYTE *)(v3 + a1 + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">LOBYTE</span>(v6) = *v12;</span><br><span class="line">    v10 = v11 + <span class="number">1</span>;</span><br><span class="line">    *(_BYTE *)(v10 + a3 - <span class="number">1</span>) = byte_40E0A0[<span class="number">16</span> * (*(_BYTE *)(v3 + a1) &amp; <span class="number">3</span>) + ((v6 &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xF</span>)];</span><br><span class="line">    *(_BYTE *)(v10 + a3) = byte_40E0A0[<span class="number">4</span> * (*v12 &amp; <span class="number">0xF</span>)];</span><br><span class="line">    <span class="keyword">goto</span> LABEL_8;</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_9:</span><br><span class="line">  *(_BYTE *)(v4 + a3) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">sub_401030</span>(a3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在main函数中并没有找到有用的信息，所以依次找到了这三个函数，第一个函数是交换字符元素，但要注意的是由于byte_40E0A0位数不够，所以多余的位数是访问到了byte_40E0AA，因为他们的内存空间是连续的。</p><p>第二个函数相当于就是将字符串大写转换为小写，小写转换为大写。</p><p>第三个函数先一用一遍第一个函数，再进行base64加密。</p><p>思路清晰了，相当于就是通过字符交换拿到新的密码表，然后将字符转化后拿去用密码表base64解密。脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">key=[<span class="number">0x41</span>, <span class="number">0x42</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0x45</span>, <span class="number">0x46</span>, <span class="number">0x47</span>, <span class="number">0x48</span>, <span class="number">0x49</span>, <span class="number">0x4A</span>,<span class="number">0x4B</span>, <span class="number">0x4C</span>, <span class="number">0x4D</span>, <span class="number">0x4E</span>, <span class="number">0x4F</span>, <span class="number">0x50</span>, <span class="number">0x51</span>, <span class="number">0x52</span>, <span class="number">0x53</span>, <span class="number">0x54</span>,</span><br><span class="line">  <span class="number">0x55</span>, <span class="number">0x56</span>, <span class="number">0x57</span>, <span class="number">0x58</span>, <span class="number">0x59</span>, <span class="number">0x5A</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x63</span>, <span class="number">0x64</span>,</span><br><span class="line">  <span class="number">0x65</span>, <span class="number">0x66</span>, <span class="number">0x67</span>, <span class="number">0x68</span>, <span class="number">0x69</span>, <span class="number">0x6A</span>, <span class="number">0x6B</span>, <span class="number">0x6C</span>, <span class="number">0x6D</span>, <span class="number">0x6E</span>,</span><br><span class="line">  <span class="number">0x6F</span>, <span class="number">0x70</span>, <span class="number">0x71</span>, <span class="number">0x72</span>, <span class="number">0x73</span>, <span class="number">0x74</span>, <span class="number">0x75</span>, <span class="number">0x76</span>, <span class="number">0x77</span>, <span class="number">0x78</span>,</span><br><span class="line">  <span class="number">0x79</span>, <span class="number">0x7A</span>, <span class="number">0x30</span>, <span class="number">0x31</span>, <span class="number">0x32</span>, <span class="number">0x33</span>, <span class="number">0x34</span>, <span class="number">0x35</span>, <span class="number">0x36</span>, <span class="number">0x37</span>,</span><br><span class="line">  <span class="number">0x38</span>, <span class="number">0x39</span>, <span class="number">0x2B</span>, <span class="number">0x2F</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>,<span class="number">15</span>):</span><br><span class="line">    temp=key[i]</span><br><span class="line">    key[i]=key[i+<span class="number">10</span>]</span><br><span class="line">    key[i+<span class="number">10</span>]=temp</span><br><span class="line">val=<span class="string">&quot;zMXHz3TIgnxLxJhFAdtZn2fFk3lYCrtPC2l9&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> key:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i),end=<span class="string">&quot;&quot;</span>)<span class="comment">#密码表ABCDEFQRSTUVWXYPGHIJKLMNOZabcdefghijklmnopqrstuvwxyz0123456789+/</span></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(val.swapcase())<span class="comment">#密文ZmxhZ3tiGNXlXjHfaDTzN2FfK3LycRTpc2L9</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>没注意到byte_40E0A0和byte_40E0AA是连续的，所以开始一直手工拼接密码表，后来才看见是连续的内存，得到密码表后就很简单了。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDCTF复现</title>
      <link href="/2023/04/24/HDCTF%E5%A4%8D%E7%8E%B0/"/>
      <url>/2023/04/24/HDCTF%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="HDCTF-reverse部分复现"><a href="#HDCTF-reverse部分复现" class="headerlink" title="HDCTF reverse部分复现"></a>HDCTF reverse部分复现</h1><h2 id="easy-re"><a href="#easy-re" class="headerlink" title="easy_re"></a>easy_re</h2><h3 id="首先查壳"><a href="#首先查壳" class="headerlink" title="首先查壳"></a>首先查壳</h3><p>是UPX壳，扔进虚拟机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upx -d 文件名</span><br></pre></td></tr></table></figure><p>直接脱壳</p><h3 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+2Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  _main(argc, argv, envp);</span><br><span class="line">  <span class="built_in">func</span>(a, encode_a);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please input your flag:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt;= <span class="number">32</span>; ++i )</span><br><span class="line">    <span class="built_in">f3</span>(s);</span><br><span class="line">  <span class="built_in">func</span>(s, encode_s);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(encode_s, a) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Congratulations! You get the flag&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Sorry,try again&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没什么好说的，逻辑很简单，s就是flag，s的加密就是a，而a是字符串“SERDVEZ7WTB1X2hAdjJfL1wvXEA1N2VyM2RfN2hlX3IzdjNyczN9”，跟进func加密函数，可以分析到这是一个base64加密，直接把a拿去base64解密就行。</p><p>HDCTF{Y0u_h@v2_&#x2F;/@57er3d_7he_r3v3rs3}</p><h2 id="easy-arm"><a href="#easy-arm" class="headerlink" title="easy_arm"></a>easy_arm</h2><h3 id="直接扔进ida"><a href="#直接扔进ida" class="headerlink" title="直接扔进ida"></a>直接扔进ida</h3><p>打开代码，分析代码，发现主要就做了两件事，输入字符串然后将字符串与0x10进行亦或操作，字符串也很好找，因为只有一串有效的字符串，那么就直接上脚本吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">val=[<span class="number">0x4E</span>, <span class="number">0x6F</span>, <span class="number">0x74</span>, <span class="number">0x20</span>, <span class="number">0x65</span>, <span class="number">0x71</span>, <span class="number">0x75</span>, <span class="number">0x61</span>, <span class="number">0x6C</span>, <span class="number">0x21</span>,</span><br><span class="line">  <span class="number">0x24</span>, <span class="number">0x45</span>, <span class="number">0x71</span>, <span class="number">0x75</span>, <span class="number">0x61</span>, <span class="number">0x6C</span>, <span class="number">0x21</span>, <span class="number">0x24</span>, <span class="number">0x58</span>, <span class="number">0x54</span>,</span><br><span class="line">  <span class="number">0x53</span>, <span class="number">0x44</span>, <span class="number">0x56</span>, <span class="number">0x6B</span>, <span class="number">0x5A</span>, <span class="number">0x65</span>, <span class="number">0x63</span>, <span class="number">0x64</span>, <span class="number">0x4F</span>, <span class="number">0x71</span>,</span><br><span class="line">  <span class="number">0x4F</span>, <span class="number">0x75</span>, <span class="number">0x23</span>, <span class="number">0x63</span>, <span class="number">0x69</span>, <span class="number">0x4F</span>, <span class="number">0x71</span>, <span class="number">0x43</span>, <span class="number">0x7D</span>, <span class="number">0x6D</span>,</span><br><span class="line">  <span class="number">0x24</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> val:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i),end=<span class="string">&#x27;&#x27;</span>)<span class="comment">#Not equal!$Equal!$XTSDVkZecdOqOu#ciOqC&#125;m$</span></span><br><span class="line"></span><br><span class="line">realval=<span class="string">&#x27;XTSDVkZecdOqOu#ciOqC&#125;m&#x27;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> realval:</span><br><span class="line">    flag+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(i)^<span class="number">0x10</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="double-code"><a href="#double-code" class="headerlink" title="double_code"></a>double_code</h2><p>shellcode类题目，也是第一次见，还是要先去了解一下什么是shellcode，实际上就是跑病毒的代码，这里也是先借鉴一下大佬的wp，补一补shellcode的姿势。</p><p>先进入函数sub_14001F000,这个函数就是加载shellcode的代码，这里提示了“WriteProcessMemory:%d\n”，说明是写入了病毒的，打开后这里就可以用opcode去做了。这里可以看出v7 v9 v11 v13是flag的四部分，其实v0或v1就是外部所给数据，那么就可以根据这段伪代码得到脚本，只需将数据根据每部分逻辑逆向即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">val=[<span class="number">0x48</span>,<span class="number">0x67</span>,<span class="number">0x45</span>,<span class="number">0x51</span>,<span class="number">0x42</span>,<span class="number">0x7b</span>,<span class="number">0x70</span>,<span class="number">0x6a</span>,<span class="number">0x30</span>,<span class="number">0x68</span>,<span class="number">0x6c</span>,<span class="number">0x60</span>,<span class="number">0x32</span>,<span class="number">0x61</span>,<span class="number">0x61</span>,<span class="number">0x5f</span>,<span class="number">0x42</span>,<span class="number">0x70</span>,<span class="number">0x61</span>,<span class="number">0x5b</span>,<span class="number">0x30</span>,<span class="number">0x53</span>,<span class="number">0x65</span>,<span class="number">0x6c</span>,<span class="number">0x60</span>,<span class="number">0x65</span>,<span class="number">0x7c</span>,<span class="number">0x63</span>,<span class="number">0x69</span>,<span class="number">0x2d</span>,<span class="number">0x5f</span>,<span class="number">0x46</span>,<span class="number">0x35</span>,<span class="number">0x70</span>,<span class="number">0x75</span>,<span class="number">0x7d</span>]</span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(val)):</span><br><span class="line">    key=i%<span class="number">5</span></span><br><span class="line">    <span class="keyword">if</span> key==<span class="number">1</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(val[i]^<span class="number">0x23</span>)</span><br><span class="line">    <span class="keyword">elif</span> key==<span class="number">2</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(val[i]-<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">elif</span> key==<span class="number">3</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(val[i]+<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">elif</span> key==<span class="number">4</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(val[i]+<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">elif</span> key==<span class="number">5</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(val[i]+<span class="number">25</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(val[i])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="fake-game"><a href="#fake-game" class="headerlink" title="fake_game"></a>fake_game</h2><p>以前没做到过python打包的程序，所以看了一下做python打包程序的步骤，首先把程序用pyinstxtractor解包，具体步骤就是将要解包的程序放在pyinstxtractor文件根目录下，然后在根目录下打开终端，运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python .\pyinstxtractor.py 文件名.类型</span><br></pre></td></tr></table></figure><p>然后会在根目录下生成一个文件夹，在文件夹中我们可以找到解包好的文件名.pyc文件，然后将得到的pyc文件反编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uncompyle6.exe ./文件名.pyc &gt; 生成文件名.py</span><br></pre></td></tr></table></figure><p>打开得到的py文件，找到了关键的flag字眼</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">start_game</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">global</span> GAMEOVER</span><br><span class="line">    xorr = [</span><br><span class="line">     <span class="number">0</span>] * <span class="number">4</span></span><br><span class="line">    ans = [<span class="number">0</span>] * <span class="number">55</span></span><br><span class="line">    flag = [<span class="number">178868</span>, <span class="number">188</span>, <span class="number">56953</span>, <span class="number">2413</span>, <span class="number">178874</span>, <span class="number">131</span>, <span class="number">56957</span>, <span class="number">2313</span>, <span class="number">178867</span>, <span class="number">156</span>, </span><br><span class="line">     <span class="number">56933</span>, <span class="number">2377</span>, <span class="number">178832</span>, <span class="number">202</span>, <span class="number">56899</span>, <span class="number">2314</span>, <span class="number">178830</span>, <span class="number">167</span>, <span class="number">56924</span>, </span><br><span class="line">     <span class="number">2313</span>, <span class="number">178830</span>, <span class="number">167</span>, <span class="number">56938</span>, <span class="number">2383</span>, <span class="number">178822</span>, <span class="number">217</span>, <span class="number">56859</span>, <span class="number">2372</span>]</span><br><span class="line">    self.init_window()</span><br><span class="line">    self.init_plant_points()</span><br><span class="line">    self.init_map()</span><br><span class="line">    self.init_zombies()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> GAMEOVER:</span><br><span class="line">        MainGame.window.fill((<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line">        MainGame.window.blit(self.draw_text(<span class="string">&#x27;当前钱数$: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(MainGame.money), <span class="number">26</span>, (<span class="number">255</span>,</span><br><span class="line">                                                                                     <span class="number">0</span>,</span><br><span class="line">                                                                                     <span class="number">0</span>)), (<span class="number">500</span>,</span><br><span class="line">                                                                                           <span class="number">40</span>))</span><br><span class="line">        MainGame.window.blit(self.draw_text(<span class="string">&#x27;当前关数&#123;&#125;，得分&#123;&#125;,距离下关还差&#123;&#125;分&#x27;</span>.<span class="built_in">format</span>(MainGame.shaoguan, MainGame.score, MainGame.remnant_score), <span class="number">26</span>, (<span class="number">255</span>,</span><br><span class="line">                                                                                                                                            <span class="number">0</span>,</span><br><span class="line">                                                                                                                                            <span class="number">0</span>)), (<span class="number">5</span>,</span><br><span class="line">                                                                                                                                                  <span class="number">40</span>))</span><br><span class="line">        self.load_help_text()</span><br><span class="line">        xorr[<span class="number">0</span>] = MainGame.money</span><br><span class="line">        xorr[<span class="number">1</span>] = MainGame.shaoguan</span><br><span class="line">        xorr[<span class="number">2</span>] = MainGame.score</span><br><span class="line">        xorr[<span class="number">3</span>] = MainGame.remnant_score</span><br><span class="line">        <span class="keyword">if</span> xorr[<span class="number">0</span>] * <span class="number">256</span> - xorr[<span class="number">1</span>] / <span class="number">2</span> + xorr[<span class="number">2</span>] * <span class="number">23</span> + xorr[<span class="number">3</span>] / <span class="number">2</span> == <span class="number">47118166</span>:</span><br><span class="line">            <span class="keyword">if</span> xorr[<span class="number">0</span>] * <span class="number">252</span> - xorr[<span class="number">1</span>] * <span class="number">366</span> + xorr[<span class="number">2</span>] * <span class="number">23</span> + xorr[<span class="number">3</span>] / <span class="number">2</span> - <span class="number">1987</span> == <span class="number">46309775</span>:</span><br><span class="line">                <span class="keyword">if</span> xorr[<span class="number">0</span>] * <span class="number">6</span> - xorr[<span class="number">1</span>] * <span class="number">88</span> + xorr[<span class="number">2</span>] / <span class="number">2</span> + xorr[<span class="number">3</span>] / <span class="number">2</span> - <span class="number">11444</span> == <span class="number">1069997</span>:</span><br><span class="line">                    <span class="keyword">if</span> (xorr[<span class="number">0</span>] - <span class="number">652</span>) * <span class="number">2</span> - xorr[<span class="number">1</span>] * <span class="number">366</span> + xorr[<span class="number">2</span>] * <span class="number">233</span> + xorr[<span class="number">3</span>] / <span class="number">2</span> - <span class="number">13333</span> == <span class="number">13509025</span>:</span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">                            ans[i] = flag[i] ^ xorr[i % <span class="number">4</span>]</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> (f):</span><br><span class="line">                                f.write(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(a) <span class="keyword">for</span> a <span class="keyword">in</span> ans]))</span><br></pre></td></tr></table></figure><p>这里的逻辑也很简单，当游戏结束时，要满足if语句中的条件才能得到flag文件，这里直接用z3约束器求得xorr列表，再进行亦或即可，脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = [<span class="number">178868</span>, <span class="number">188</span>, <span class="number">56953</span>, <span class="number">2413</span>, <span class="number">178874</span>, <span class="number">131</span>, <span class="number">56957</span>, <span class="number">2313</span>, <span class="number">178867</span>, <span class="number">156</span>,</span><br><span class="line">         <span class="number">56933</span>, <span class="number">2377</span>, <span class="number">178832</span>, <span class="number">202</span>, <span class="number">56899</span>, <span class="number">2314</span>, <span class="number">178830</span>, <span class="number">167</span>, <span class="number">56924</span>,</span><br><span class="line">         <span class="number">2313</span>, <span class="number">178830</span>, <span class="number">167</span>, <span class="number">56938</span>, <span class="number">2383</span>, <span class="number">178822</span>, <span class="number">217</span>, <span class="number">56859</span>, <span class="number">2372</span>]</span><br><span class="line">flagg=<span class="string">&quot;&quot;</span></span><br><span class="line">a,b,c,d=Ints(<span class="string">&#x27;a b c d&#x27;</span>)</span><br><span class="line">s=Solver()</span><br><span class="line">s.add(a * <span class="number">256</span> - b / <span class="number">2</span> + c * <span class="number">23</span> + d / <span class="number">2</span> == <span class="number">47118166</span>)</span><br><span class="line">s.add(a * <span class="number">252</span> - b * <span class="number">366</span> + c * <span class="number">23</span> + d / <span class="number">2</span> - <span class="number">1987</span> == <span class="number">46309775</span>)</span><br><span class="line">s.add(a * <span class="number">6</span> - b * <span class="number">88</span> + c / <span class="number">2</span> + d / <span class="number">2</span> - <span class="number">11444</span> == <span class="number">1069997</span>)</span><br><span class="line">s.add((a - <span class="number">652</span>) * <span class="number">2</span> - b * <span class="number">366</span> + c * <span class="number">233</span> + d / <span class="number">2</span> - <span class="number">13333</span> == <span class="number">13509025</span>)</span><br><span class="line"><span class="keyword">if</span> s.check()==sat:</span><br><span class="line">    <span class="built_in">print</span>(s.model())<span class="comment">#[d = 2360, a = 178940, b = 248, c = 56890]</span></span><br><span class="line">xorr=[<span class="number">178940</span>,<span class="number">248</span>,<span class="number">56890</span>,<span class="number">2361</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    flagg+=<span class="built_in">chr</span>(flag[i]^xorr[i%<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flagg)</span><br></pre></td></tr></table></figure><p>但是这里出现了一个小问题，解出来的值最后一个数应该加上1才能得到完整的flag，可能是出题人弄错了，但是根据flag的格式也能得到。</p><h2 id="买了些什么呢"><a href="#买了些什么呢" class="headerlink" title="买了些什么呢"></a>买了些什么呢</h2><h3 id="典型0-1背包问题"><a href="#典型0-1背包问题" class="headerlink" title="典型0-1背包问题"></a><a href="https://www.cnblogs.com/xym4869/p/8513801.html">典型0-1背包问题</a></h3><p>直接拿出珍藏多年的01背包问题脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">good</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, num, eavy, value</span>):</span><br><span class="line">        self.num = num</span><br><span class="line">        self.value = value</span><br><span class="line">        self.eavy = eavy</span><br><span class="line">        self.avgvalue = value / eavy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">money = <span class="number">0</span></span><br><span class="line">weigt = <span class="number">50</span> <span class="comment">#重量</span></span><br><span class="line">count = <span class="number">40</span> <span class="comment">#容量</span></span><br><span class="line">goodlist = <span class="built_in">list</span>()</span><br><span class="line">flag = <span class="built_in">list</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">    num, eavy, value = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    goodlist.append(good(num, eavy, value))</span><br><span class="line">avglist = <span class="built_in">sorted</span>(goodlist, key=<span class="keyword">lambda</span> i: i.avgvalue, reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">    <span class="keyword">if</span> weigt &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> avglist[i].eavy &lt;= weigt:</span><br><span class="line">        weigt -= avglist[i].eavy</span><br><span class="line">        money += avglist[i].value</span><br><span class="line">        flag.append(avglist[i].num)</span><br><span class="line"></span><br><span class="line">flag.sort()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    flag[i] -= <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(money, weigt)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure><p>输入回显的数据即可，注意修改weigt 和 count</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 赛事复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve.re</title>
      <link href="/2023/04/13/reserve-re/"/>
      <url>/2023/04/13/reserve-re/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="buuctf-GUET-CTF2019-re"><a href="#buuctf-GUET-CTF2019-re" class="headerlink" title="buuctf [GUET-CTF2019]re"></a>buuctf [GUET-CTF2019]re</h1><h3 id="首先查壳"><a href="#首先查壳" class="headerlink" title="首先查壳"></a>首先查壳</h3><p><img src="/2023/04/13/reserve-re/key2.png"></p><p>UPX壳，扔进kali脱壳，指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upx -d 文件名</span><br></pre></td></tr></table></figure><h3 id="脱完壳扔进ida"><a href="#脱完壳扔进ida" class="headerlink" title="脱完壳扔进ida"></a>脱完壳扔进ida</h3><p><img src="/2023/04/13/reserve-re/key1.png"></p><p>找到提示字符的函数，跟进sub_4009AF，这里刚开始我看到如果这个函数为真就能得到正确的提示，我以为可以直接拿到flag，就在gdb中动态调试了一下，发现就显示了Correct!测，只能跟进函数了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_BOOL8 __fastcall <span class="title">sub_4009AE</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 savedregs; <span class="comment">// [rsp+0h] [rbp+0h]</span></span><br><span class="line"></span><br><span class="line">  *(&amp;savedregs - <span class="number">1</span>) = a1;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">1629056</span> * *(<span class="type">char</span> *)*(&amp;savedregs - <span class="number">1</span>) != <span class="number">166163712</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">6771600</span> * *(<span class="type">char</span> *)(*(&amp;savedregs - <span class="number">1</span>) + <span class="number">1</span>) != <span class="number">731332800</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">3682944</span> * *(<span class="type">char</span> *)(*(&amp;savedregs - <span class="number">1</span>) + <span class="number">2</span>) != <span class="number">357245568</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">10431000</span> * *(<span class="type">char</span> *)(*(&amp;savedregs - <span class="number">1</span>) + <span class="number">3</span>) != <span class="number">1074393000</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">3977328</span> * *(<span class="type">char</span> *)(*(&amp;savedregs - <span class="number">1</span>) + <span class="number">4</span>) != <span class="number">489211344</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">5138336</span> * *(<span class="type">char</span> *)(*(&amp;savedregs - <span class="number">1</span>) + <span class="number">5</span>) != <span class="number">518971936</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">7532250</span> * *(<span class="type">char</span> *)(*(&amp;savedregs - <span class="number">1</span>) + <span class="number">7</span>) != <span class="number">406741500</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">5551632</span> * *(<span class="type">char</span> *)(*(&amp;savedregs - <span class="number">1</span>) + <span class="number">8</span>) != <span class="number">294236496</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">3409728</span> * *(<span class="type">char</span> *)(*(&amp;savedregs - <span class="number">1</span>) + <span class="number">9</span>) != <span class="number">177305856</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">13013670</span> * *(<span class="type">char</span> *)(*(&amp;savedregs - <span class="number">1</span>) + <span class="number">10</span>) != <span class="number">650683500</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">6088797</span> * *(<span class="type">char</span> *)(*(&amp;savedregs - <span class="number">1</span>) + <span class="number">11</span>) != <span class="number">298351053</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">7884663</span> * *(<span class="type">char</span> *)(*(&amp;savedregs - <span class="number">1</span>) + <span class="number">12</span>) != <span class="number">386348487</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">8944053</span> * *(<span class="type">char</span> *)(*(&amp;savedregs - <span class="number">1</span>) + <span class="number">13</span>) != <span class="number">438258597</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">5198490</span> * *(<span class="type">char</span> *)(*(&amp;savedregs - <span class="number">1</span>) + <span class="number">14</span>) != <span class="number">249527520</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">4544518</span> * *(<span class="type">char</span> *)(*(&amp;savedregs - <span class="number">1</span>) + <span class="number">15</span>) != <span class="number">445362764</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">3645600</span> * *(<span class="type">char</span> *)(*(&amp;savedregs - <span class="number">1</span>) + <span class="number">17</span>) != <span class="number">174988800</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">10115280</span> * *(<span class="type">char</span> *)(*(&amp;savedregs - <span class="number">1</span>) + <span class="number">16</span>) != <span class="number">981182160</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">9667504</span> * *(<span class="type">char</span> *)(*(&amp;savedregs - <span class="number">1</span>) + <span class="number">18</span>) != <span class="number">493042704</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">5364450</span> * *(<span class="type">char</span> *)(*(&amp;savedregs - <span class="number">1</span>) + <span class="number">19</span>) != <span class="number">257493600</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">13464540</span> * *(<span class="type">char</span> *)(*(&amp;savedregs - <span class="number">1</span>) + <span class="number">20</span>) != <span class="number">767478780</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">5488432</span> * *(<span class="type">char</span> *)(*(&amp;savedregs - <span class="number">1</span>) + <span class="number">21</span>) != <span class="number">312840624</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">14479500</span> * *(<span class="type">char</span> *)(*(&amp;savedregs - <span class="number">1</span>) + <span class="number">22</span>) != <span class="number">1404511500</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">6451830</span> * *(<span class="type">char</span> *)(*(&amp;savedregs - <span class="number">1</span>) + <span class="number">23</span>) != <span class="number">316139670</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">6252576</span> * *(<span class="type">char</span> *)(*(&amp;savedregs - <span class="number">1</span>) + <span class="number">24</span>) != <span class="number">619005024</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">7763364</span> * *(<span class="type">char</span> *)(*(&amp;savedregs - <span class="number">1</span>) + <span class="number">25</span>) != <span class="number">372641472</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">7327320</span> * *(<span class="type">char</span> *)(*(&amp;savedregs - <span class="number">1</span>) + <span class="number">26</span>) != <span class="number">373693320</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">8741520</span> * *(<span class="type">char</span> *)(*(&amp;savedregs - <span class="number">1</span>) + <span class="number">27</span>) != <span class="number">498266640</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">8871876</span> * *(<span class="type">char</span> *)(*(&amp;savedregs - <span class="number">1</span>) + <span class="number">28</span>) != <span class="number">452465676</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">4086720</span> * *(<span class="type">char</span> *)(*(&amp;savedregs - <span class="number">1</span>) + <span class="number">29</span>) != <span class="number">208422720</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">9374400</span> * *(<span class="type">char</span> *)(*(&amp;savedregs - <span class="number">1</span>) + <span class="number">30</span>) == <span class="number">515592000</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5759124</span> * *(<span class="type">char</span> *)(*(&amp;savedregs - <span class="number">1</span>) + <span class="number">31</span>) == <span class="number">719890500</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一大堆，但逻辑简单，flag就是a1，只需要把a1这个数组全都解出来就行，但我发现少了a1[6]，但flag全是由数字和字母组成的，那就并且是小写字母，于是我都试了一遍，可恨的是都不对，看了看脚本和代码，发现a1[16]和a1[17]的位置竟然是相反的，擦，再一个一个试，最终得出了a1[6]&#x3D;”1”，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">0</span>]</span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line">a[<span class="number">0</span>]=<span class="number">166163712</span>/<span class="number">1629056</span></span><br><span class="line">a.append(<span class="number">731332800</span>/<span class="number">6771600</span>)</span><br><span class="line">a.append(<span class="number">357245568</span>/<span class="number">3682944</span>)</span><br><span class="line">a.append(<span class="number">1074393000</span>/<span class="number">10431000</span>)</span><br><span class="line">a.append(<span class="number">489211344</span>/<span class="number">3977328</span>)</span><br><span class="line">a.append(<span class="number">518971936</span>/<span class="number">5138336</span>)</span><br><span class="line">a.append(<span class="number">49</span>)</span><br><span class="line">a.append(<span class="number">406741500</span>/<span class="number">7532250</span>)</span><br><span class="line">a.append(<span class="number">294236496</span>/<span class="number">5551632</span>)</span><br><span class="line">a.append(<span class="number">177305856</span>/<span class="number">3409728</span>)</span><br><span class="line">a.append(<span class="number">650683500</span>/<span class="number">13013670</span>)</span><br><span class="line">a.append(<span class="number">298351053</span>/<span class="number">6088797</span>)</span><br><span class="line">a.append(<span class="number">386348487</span>/<span class="number">7884663</span>)</span><br><span class="line">a.append(<span class="number">438258597</span>/<span class="number">8944053</span>)</span><br><span class="line">a.append(<span class="number">249527520</span>/<span class="number">5198490</span>)</span><br><span class="line">a.append(<span class="number">445362764</span>/<span class="number">4544518</span>)</span><br><span class="line"></span><br><span class="line">a.append(<span class="number">981182160</span>/<span class="number">10115280</span>)</span><br><span class="line">a.append(<span class="number">174988800</span>/<span class="number">3645600</span>)</span><br><span class="line">a.append(<span class="number">493042704</span>/<span class="number">9667504</span>)</span><br><span class="line">a.append(<span class="number">257493600</span>/<span class="number">5364450</span>)</span><br><span class="line">a.append(<span class="number">767478780</span>/<span class="number">13464540</span>)</span><br><span class="line">a.append(<span class="number">312840624</span>/<span class="number">5488432</span>)</span><br><span class="line">a.append(<span class="number">1404511500</span>/<span class="number">14479500</span>)</span><br><span class="line">a.append(<span class="number">316139670</span>/<span class="number">6451830</span>)</span><br><span class="line">a.append(<span class="number">619005024</span>/<span class="number">6252576</span>)</span><br><span class="line">a.append(<span class="number">372641472</span>/<span class="number">7763364</span>)</span><br><span class="line">a.append(<span class="number">373693320</span>/<span class="number">7327320</span>)</span><br><span class="line">a.append(<span class="number">498266640</span>/<span class="number">8741520</span>)</span><br><span class="line">a.append(<span class="number">452465676</span>/<span class="number">8871876</span>)</span><br><span class="line">a.append(<span class="number">208422720</span>/<span class="number">4086720</span>)</span><br><span class="line">a.append(<span class="number">515592000</span>/<span class="number">9374400</span>)</span><br><span class="line">a.append(<span class="number">719890500</span>/<span class="number">5759124</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>(<span class="built_in">int</span>(a[i]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>flag：flag{e165421110ba03099a1c039337}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>逻辑不难，坑太多。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve.level1</title>
      <link href="/2023/04/13/reserve-level1/"/>
      <url>/2023/04/13/reserve-level1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="buuctf-WUSTCTF-level1"><a href="#buuctf-WUSTCTF-level1" class="headerlink" title="buuctf [WUSTCTF]level1"></a>buuctf [WUSTCTF]level1</h1><h3 id="首先查壳，无壳"><a href="#首先查壳，无壳" class="headerlink" title="首先查壳，无壳"></a>首先查壳，无壳</h3><h3 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h3><p><img src="/2023/04/13/reserve-level1/key.png"></p><p>直接找到主函数，这里代码的意思大致就是打开名为flag的文件，读取里面的数据，这里面有19个数据，如果数据编号与1做与运算，如果运算结果不等于0，那么此数据就右移编号位，否则就与编号为相乘，最开始我忘了在外部还有个数据文件，找半天没找到，真是测了，后面关闭后看到了output数据文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">198</span><br><span class="line">232</span><br><span class="line">816</span><br><span class="line">200</span><br><span class="line">1536</span><br><span class="line">300</span><br><span class="line">6144</span><br><span class="line">984</span><br><span class="line">51200</span><br><span class="line">570</span><br><span class="line">92160</span><br><span class="line">1200</span><br><span class="line">565248</span><br><span class="line">756</span><br><span class="line">1474560</span><br><span class="line">800</span><br><span class="line">6291456</span><br><span class="line">1782</span><br><span class="line">65536000</span><br></pre></td></tr></table></figure><p>那么就可以根据加密后的数据逆出加密前的数据，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line">key=[<span class="number">2</span>]<span class="comment">#注意key的第一项是没有参与运算的，所以先随便写一个第一项</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;E:\\attachment\\level1\\output.txt&quot;</span>,<span class="string">&quot;rb+&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> lineword <span class="keyword">in</span> f.readlines():</span><br><span class="line">        key.append(<span class="built_in">int</span>(lineword))</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">if</span> (i&amp;<span class="number">1</span>)!=<span class="number">0</span>:</span><br><span class="line">        key[i]=key[i]&gt;&gt;i</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        key[i]=<span class="built_in">int</span>(key[i]/i)</span><br><span class="line">    flag+=<span class="built_in">chr</span>(key[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>flag：flag{d9-dE6-20c}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>应该是一道非常简单的解密题了吧。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve.crackRTF</title>
      <link href="/2023/04/13/reserve-crackRTF/"/>
      <url>/2023/04/13/reserve-crackRTF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="buuctf-CrackRTF"><a href="#buuctf-CrackRTF" class="headerlink" title="buuctf CrackRTF"></a>buuctf CrackRTF</h1><h3 id="首先查壳，无壳"><a href="#首先查壳，无壳" class="headerlink" title="首先查壳，无壳"></a>首先查壳，无壳</h3><h3 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h3><p>找到main函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main_0</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  DWORD v3; <span class="comment">// eax</span></span><br><span class="line">  DWORD v4; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> Str[<span class="number">260</span>]; <span class="comment">// [esp+4Ch] [ebp-310h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [esp+150h] [ebp-20Ch]</span></span><br><span class="line">  <span class="type">char</span> String1[<span class="number">260</span>]; <span class="comment">// [esp+154h] [ebp-208h] BYREF</span></span><br><span class="line">  <span class="type">char</span> Destination[<span class="number">260</span>]; <span class="comment">// [esp+258h] [ebp-104h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(Destination, <span class="number">0</span>, <span class="built_in">sizeof</span>(Destination));</span><br><span class="line">  <span class="built_in">memset</span>(String1, <span class="number">0</span>, <span class="built_in">sizeof</span>(String1));</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;pls input the first passwd(1): &quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, Destination);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(Destination) != <span class="number">6</span> )<span class="comment">//确定输入字符串的长度应该为6</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Must be 6 characters!\n&quot;</span>);</span><br><span class="line">    <span class="built_in">ExitProcess</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v7 = <span class="built_in">atoi</span>(Destination);<span class="comment">//将输入的字符串转化为整型，说明这段字符串中全是数字</span></span><br><span class="line">  <span class="keyword">if</span> ( v7 &lt; <span class="number">100000</span> )</span><br><span class="line">    <span class="built_in">ExitProcess</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">strcat</span>(Destination, <span class="string">&quot;@DBApp&quot;</span>);<span class="comment">//将字符串@DBApp接在输入的字符串之后</span></span><br><span class="line">  v3 = <span class="built_in">strlen</span>(Destination);</span><br><span class="line">  <span class="built_in">sub_40100A</span>((BYTE *)Destination, v3, String1);<span class="comment">//某种加密函数</span></span><br><span class="line">  <span class="keyword">if</span> ( !_strcmpi(String1, <span class="string">&quot;6E32D0943418C2C33385BC35A1470250DD8923A9&quot;</span>) )<span class="comment">//判断加密后的字符串是否给出的字符串相同</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;continue...\n\n&quot;</span>);<span class="comment">//相同进行的二段密码的输入</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pls input the first passwd(2): &quot;</span>);</span><br><span class="line">    <span class="built_in">memset</span>(Str, <span class="number">0</span>, <span class="built_in">sizeof</span>(Str));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, Str);</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strlen</span>(Str) != <span class="number">6</span> )<span class="comment">//第二段密码的长度也为6</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Must be 6 characters!\n&quot;</span>);</span><br><span class="line">      <span class="built_in">ExitProcess</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">strcat</span>(Str, Destination);<span class="comment">//将第二段密码接在第一段密码前</span></span><br><span class="line">    <span class="built_in">memset</span>(String1, <span class="number">0</span>, <span class="built_in">sizeof</span>(String1));</span><br><span class="line">    v4 = <span class="built_in">strlen</span>(Str);</span><br><span class="line">    <span class="built_in">sub_401019</span>((BYTE *)Str, v4, String1);<span class="comment">//又一种加密</span></span><br><span class="line">    <span class="keyword">if</span> ( !_strcmpi(<span class="string">&quot;27019e688a4e62a649fd99cadaafdb4e&quot;</span>, String1) )<span class="comment">//将得到的字符串与给出字符串作比较</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !(<span class="type">unsigned</span> __int8)<span class="built_in">sub_40100F</span>(Str) )<span class="comment">//第三个加密函数</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error!!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">ExitProcess</span>(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;bye ~~\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进第一个加密函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">sub_401230</span><span class="params">(BYTE *pbData, DWORD dwDataLen, LPSTR lpString1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  DWORD i; <span class="comment">// [esp+4Ch] [ebp-28h]</span></span><br><span class="line">  CHAR String2[<span class="number">4</span>]; <span class="comment">// [esp+50h] [ebp-24h] BYREF</span></span><br><span class="line">  BYTE v6[<span class="number">20</span>]; <span class="comment">// [esp+54h] [ebp-20h] BYREF</span></span><br><span class="line">  DWORD pdwDataLen; <span class="comment">// [esp+68h] [ebp-Ch] BYREF</span></span><br><span class="line">  HCRYPTHASH phHash; <span class="comment">// [esp+6Ch] [ebp-8h] BYREF</span></span><br><span class="line">  HCRYPTPROV phProv; <span class="comment">// [esp+70h] [ebp-4h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">CryptAcquireContextA</span>(&amp;phProv, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1u</span>, <span class="number">0xF0000000</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">CryptCreateHash</span>(phProv, <span class="number">0x8004</span>u, <span class="number">0</span>, <span class="number">0</span>, &amp;phHash) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">CryptHashData</span>(phHash, pbData, dwDataLen, <span class="number">0</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">CryptGetHashParam</span>(phHash, <span class="number">2u</span>, v6, &amp;pdwDataLen, <span class="number">0</span>);</span><br><span class="line">      *lpString1 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; pdwDataLen; ++i )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">wsprintfA</span>(String2, <span class="string">&quot;%02X&quot;</span>, v6[i]);</span><br><span class="line">        <span class="built_in">lstrcatA</span>(lpString1, String2);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">CryptDestroyHash</span>(phHash);</span><br><span class="line">      <span class="built_in">CryptReleaseContext</span>(phProv, <span class="number">0</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">CryptDestroyHash</span>(phHash);</span><br><span class="line">      <span class="built_in">CryptReleaseContext</span>(phProv, <span class="number">0</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">CryptReleaseContext</span>(phProv, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看不懂，根本看不懂，只能去参考一下师傅们的博客了，看了师傅的博客，知道了这是一个哈希加密，而0x8004u是标识符，这个标识符表示sha1加密，这里奉上<a href="https://blog.csdn.net/qq_43786458/article/details/102488408">老师傅wp</a>,而我们知道这是哈希sha1加密后由于第一段密码全是数字，那么我们就可以直接暴力破解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">flag1=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>,<span class="number">1000000</span>):</span><br><span class="line">    y=hashlib.sha1(i.encode(<span class="string">&quot;utf-8&quot;</span>)).hexdigest()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;6e32d0943418c2c33385bc35a1470250dd8923a9&quot;</span>==y:  <span class="comment">#这里一定要把给的字符串里的大写字母换为小写，因为hashsha1加密后返回的摘要字符串是小写的！！！！！</span></span><br><span class="line">        flag1=<span class="built_in">str</span>(i)+<span class="string">&quot;@DBApp&quot;</span></span><br></pre></td></tr></table></figure><p>flag1&#x3D;123321@DBApp</p><p>这样就可以跑出密码的一部分了，再进入第二个加密函数，发现跟第二个加密函数一模一样，但是这一段密码并不是都是数字的，所以不能暴力破解，也就是说下面给的字符串无效了，因为我们不能知道前6位是啥，还有最后一个加密，跟进后：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span> __cdecl <span class="title">sub_4014D0</span><span class="params">(LPCSTR lpString)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  LPCVOID lpBuffer; <span class="comment">// [esp+50h] [ebp-1Ch]</span></span><br><span class="line">  DWORD NumberOfBytesWritten; <span class="comment">// [esp+58h] [ebp-14h] BYREF</span></span><br><span class="line">  DWORD nNumberOfBytesToWrite; <span class="comment">// [esp+5Ch] [ebp-10h]</span></span><br><span class="line">  HGLOBAL hResData; <span class="comment">// [esp+60h] [ebp-Ch]</span></span><br><span class="line">  HRSRC hResInfo; <span class="comment">// [esp+64h] [ebp-8h]</span></span><br><span class="line">  HANDLE hFile; <span class="comment">// [esp+68h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  hFile = <span class="number">0</span>;</span><br><span class="line">  hResData = <span class="number">0</span>;</span><br><span class="line">  nNumberOfBytesToWrite = <span class="number">0</span>;</span><br><span class="line">  NumberOfBytesWritten = <span class="number">0</span>;</span><br><span class="line">  hResInfo = <span class="built_in">FindResourceA</span>(<span class="number">0</span>, (LPCSTR)<span class="number">0x65</span>, <span class="string">&quot;AAA&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !hResInfo )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  nNumberOfBytesToWrite = <span class="built_in">SizeofResource</span>(<span class="number">0</span>, hResInfo);</span><br><span class="line">  hResData = <span class="built_in">LoadResource</span>(<span class="number">0</span>, hResInfo);</span><br><span class="line">  <span class="keyword">if</span> ( !hResData )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  lpBuffer = <span class="built_in">LockResource</span>(hResData);</span><br><span class="line">  <span class="built_in">sub_401005</span>(lpString, (<span class="type">int</span>)lpBuffer, nNumberOfBytesToWrite);</span><br><span class="line">  hFile = <span class="built_in">CreateFileA</span>(<span class="string">&quot;dbapp.rtf&quot;</span>, <span class="number">0x10000000</span>u, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2u</span>, <span class="number">0x80</span>u, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( hFile == (HANDLE)<span class="number">-1</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">WriteFile</span>(hFile, lpBuffer, nNumberOfBytesToWrite, &amp;NumberOfBytesWritten, <span class="number">0</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">CloseHandle</span>(hFile);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一大堆不认识的函数，继续跟着老师傅的wp走，这里是存在一个资源文件的，名叫AAA，这里查看资源文件需要一个叫resource hacker的软件，把文件扔进软件中</p><p><img src="/2023/04/13/reserve-crackRTF/key.png"></p><p>乱码！！依然是乱码。继续看代码，资源文件位数被传入了变量nNumberOfBytesToWrite中，变量lpBuffer指向了资源文件，跟进sub_401005函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> __cdecl <span class="title">sub_401420</span><span class="params">(LPCSTR lpString, <span class="type">int</span> a2, <span class="type">unsigned</span> <span class="type">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+4Ch] [ebp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// [esp+54h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v5 = <span class="built_in">lstrlenA</span>(lpString);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = i;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= a3 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    *(_BYTE *)(i + a2) ^= lpString[i % v5];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于传入的lpString就是密码，而a2是资源文件，也就是资源文件的每个字符都与密码的每一位字符异或运算直到资源文件被全部异或完，运算后得到什么呢，继续往下看</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hFile = <span class="built_in">CreateFileA</span>(<span class="string">&quot;dbapp.rtf&quot;</span>, <span class="number">0x10000000</span>u, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2u</span>, <span class="number">0x80</span>u, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>这里创建了一个rtf文件！！怎么创建的，当然是刚刚异或的结果，也就是说资源文件的每个字符都与密码的每一位字符异或运算直到资源文件被全部异或完得到rtf文件，由于密码只有6位，那么我们只需要拿到rtf前6位标识符即可，而所有的rtf文件的前6位标识符都是{\rtf1，那么资源文件前6位与这6位标识符异或即可得到密码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">val1=[<span class="number">0x05</span>, <span class="number">0x7D</span>, <span class="number">0x41</span>, <span class="number">0x15</span>, <span class="number">0x26</span>, <span class="number">0x01</span> ]</span><br><span class="line">val2=<span class="string">&quot;&#123;\\rtf1&quot;</span><span class="comment">#注意需要\\才能将\表示出来</span></span><br><span class="line">flag2=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(val1)):</span><br><span class="line">    flag2+=<span class="built_in">chr</span>(val1[i]^<span class="built_in">ord</span>(val2[i]))</span><br></pre></td></tr></table></figure><p>得到flag2&#x3D;~!3a@0</p><p>最后运行这个文件，先输入开始的后6位密码，在输入flag2，在程序所在文件夹会生成一个RTF文件，点进RTF文件得到flag：Flag{N0_M0re_Free_Bugs}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>第一次接触到RTF文件操作的题目，感觉做起来非常吃力，需要了解RTF文件的基本结构，以及文件生成的相关函数，虽然最后需要的逻辑不是很难，但对函数的分析非常的困难。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve.login</title>
      <link href="/2023/04/11/reserve-login/"/>
      <url>/2023/04/11/reserve-login/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="buuctf-FlareOn4-login"><a href="#buuctf-FlareOn4-login" class="headerlink" title="buuctf [FlareOn4]login"></a>buuctf [FlareOn4]login</h1><h3 id="打开网页"><a href="#打开网页" class="headerlink" title="打开网页"></a>打开网页</h3><p>F12</p><p><img src="/2023/04/11/reserve-login/key1.png"></p><p>找到藏有flag的语句，这里是一个js逆向的题目，关键函数是replace函数，这里先了解一下<a href="https://www.w3school.com.cn/jsref/jsref_replace.asp">replace函数的用法</a>这里的意思就是如果flag中的字符在字母范围内，前13个字母转化为后13个，后13个字母转化前13个，最后得到加密后字符串，那么我们只需要再将这个步骤做一遍就将字符串变回原样了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">val=<span class="string">&quot;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&quot;</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(val)):</span><br><span class="line">    k=val[i]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;A&#x27;</span>&lt;=k&lt;=<span class="string">&#x27;Z&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;a&#x27;</span>&lt;=k&lt;=<span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;a&#x27;</span>&lt;=k&lt;=<span class="string">&#x27;m&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;A&#x27;</span>&lt;=k&lt;=<span class="string">&#x27;M&#x27;</span>:</span><br><span class="line">            flag+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(val[i])+<span class="number">13</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;M&#x27;</span>&lt;k&lt;=<span class="string">&#x27;Z&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;m&#x27;</span>&lt;k&lt;=<span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">            flag+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(val[i])-<span class="number">13</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag+=val[i]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;flag&#123;&quot;</span>+flag+<span class="string">&quot;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><p>flag:flag{<a href="mailto:&#x43;&#x6c;&#105;&#101;&#x6e;&#x74;&#x53;&#x69;&#x64;&#x65;&#x4c;&#x6f;&#103;&#x69;&#110;&#x73;&#x41;&#x72;&#101;&#x45;&#x61;&#115;&#x79;&#64;&#x66;&#x6c;&#x61;&#114;&#x65;&#45;&#111;&#110;&#46;&#99;&#111;&#109;">&#x43;&#x6c;&#105;&#101;&#x6e;&#x74;&#x53;&#x69;&#x64;&#x65;&#x4c;&#x6f;&#103;&#x69;&#110;&#x73;&#x41;&#x72;&#101;&#x45;&#x61;&#115;&#x79;&#64;&#x66;&#x6c;&#x61;&#114;&#x65;&#45;&#111;&#110;&#46;&#99;&#111;&#109;</a>}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>应该算是一道js逆向的签到题，需要了解js函数的用法。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve.rome</title>
      <link href="/2023/04/11/reserve-rome/"/>
      <url>/2023/04/11/reserve-rome/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="buuctf-ACTF新生赛2020-rome"><a href="#buuctf-ACTF新生赛2020-rome" class="headerlink" title="buuctf [ACTF新生赛2020]rome"></a>buuctf [ACTF新生赛2020]rome</h1><h3 id="首先查壳，无壳"><a href="#首先查壳，无壳" class="headerlink" title="首先查壳，无壳"></a>首先查壳，无壳</h3><h3 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h3><p><img src="/2023/04/11/reserve-rome/key1.png"></p><p>找到有显现关键字符（疑似flag）的函数，这里我们发现v1加密后应该就是flag，第一个循环将v1进行加密，第二个循环将加密后的字符与给定字符比较，相同就显示正确，那么现在就要分析加密函数的逻辑</p><h3 id="加密函数逻辑"><a href="#加密函数逻辑" class="headerlink" title="加密函数逻辑"></a>加密函数逻辑</h3><p>在这里我们可以看到&amp;v12[17]的初始值为0，每循环一次都会加一，那么可以判定&amp;12[17]应该就是下标作用，并且这里v1是限定在字母范围内的，那么就简单了，直接根据代码逆出即可，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">val=<span class="string">&quot;Qsw3sj_lz4_Ujw@l&quot;</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(val[i])&gt;<span class="number">64</span> <span class="keyword">and</span> <span class="built_in">ord</span>(val[i])&lt;=<span class="number">90</span>:</span><br><span class="line">        m=<span class="built_in">ord</span>(val[i])-<span class="number">65</span>+<span class="number">51</span></span><br><span class="line">        <span class="keyword">while</span> m&lt;<span class="number">65</span>:</span><br><span class="line">            m=m+<span class="number">26</span></span><br><span class="line">        flag+=<span class="built_in">chr</span>(m)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">ord</span>(val[i])&gt;<span class="number">96</span> <span class="keyword">and</span> <span class="built_in">ord</span>(val[i])&lt;=<span class="number">122</span>:</span><br><span class="line">        n=<span class="built_in">ord</span>(val[i])-<span class="number">97</span>+<span class="number">79</span></span><br><span class="line">        <span class="keyword">while</span> n&lt;<span class="number">97</span>:</span><br><span class="line">            n=n+<span class="number">26</span></span><br><span class="line">        flag+=<span class="built_in">chr</span>(n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag+=val[i]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>flag：flag{Cae3ar_th4_Gre@t}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这道题主要是考在给定范围内对于模运算的处理。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rsa加密系列</title>
      <link href="/2023/04/09/Rsa%E5%8A%A0%E5%AF%86%E7%B3%BB%E5%88%97/"/>
      <url>/2023/04/09/Rsa%E5%8A%A0%E5%AF%86%E7%B3%BB%E5%88%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="RSA加密系列"><a href="#RSA加密系列" class="headerlink" title="RSA加密系列"></a>RSA加密系列</h1><h2 id="什么是RSA加密"><a href="#什么是RSA加密" class="headerlink" title="什么是RSA加密"></a>什么是RSA加密</h2><p>rsa加密是一种<a href="https://zhuanlan.zhihu.com/p/436455172">非对称加密算法</a>（公钥加密），对于rsa加密主要就是有公钥是私钥两种概念，公钥用于发送方将明文进行加密，私钥是接收方得到密文后用其解密得到明文，加密方式和解密方式不同，导致rsa加密比对称加密更加安全</p><h2 id="普通rsa加密解密公式"><a href="#普通rsa加密解密公式" class="headerlink" title="普通rsa加密解密公式"></a>普通rsa<a href="https://blog.csdn.net/dbs1215/article/details/48953589">加密解密公式</a></h2><h3 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h3><p>补充其中求L的过程，这里的L&#x3D;φ(n)，根据欧拉函数，φ(n)&#x3D;φ(p*q)&#x3D;φ(p)xφ(q)</p><p>我们知道如果a为质数，那么φ(a)&#x3D;a-1，则可以得到φ(n)&#x3D;(p-1)x(q-1)</p><h3 id="欧拉定理和模反元素-逆元"><a href="#欧拉定理和模反元素-逆元" class="headerlink" title="欧拉定理和模反元素(逆元)"></a>欧拉定理和模反元素(逆元)</h3><p>欧拉函数的用处，在于欧拉定理<br>“欧拉定理”指的是:<br>如果两个正整数a和n互质，则n的欧拉函数φ(n)可以让下面的等式成立：<br>a^φ(n)≡1(mod n)<br>也就是说，a的φ(n)次方被n除的余数为1</p><p>模反元素的推导过程如下:<br>根据欧拉定理，有：<br>a^φ(n) &#x3D; a × a^(φ(n)−1)≡1(mod n)</p><p>令b&#x3D;a^(φ(n)−1)，得：</p><p>ab≡1(mod n)<br>b就是a的模反元素(逆元)<br>所以，如果两个正整数a和n互质，那么一定可以找到整数b使得ab-1被n整除，或者说ab被n除的余数是1</p><p>所以求私钥d的公式：d*e≡1 mod [(p-1)(q-1)]</p><p>其中{φ(n) &#x3D; (p-1)(q-1),φ(n) 与e互质，k为正整数<br>可化为：d&#x3D; (k*φ(n)+1)&#x2F;e</p><h4 id="buuctf-rsa"><a href="#buuctf-rsa" class="headerlink" title="buuctf rsa"></a>buuctf rsa</h4><h5 id="打开pub-key"><a href="#打开pub-key" class="headerlink" title="打开pub.key"></a>打开pub.key</h5><p>得到公钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MDwwDQYJKoZIhvcNAQEBBQADKwAwKAIhAMAzLFxkrkcYL2wch21CM2kQVFpY9+7+</span><br><span class="line">/AvKr1rzQczdAgMBAAE=</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure><p>把公钥拿去解析：<a href="http://www.hiencode.com/pub_asys.html">http://www.hiencode.com/pub_asys.html</a></p><p>得到e和n的值，再将n拿去解析：<a href="http://www.factordb.com/">http://www.factordb.com</a></p><p>得到p和q的值，这时就可以通过e，n，p，q拿到对文件内容解密的私钥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">n=<span class="number">86934482296048119190666062003494800588905656017203025617216654058378322103517</span></span><br><span class="line">p=<span class="number">285960468890451637935629440372639283459</span></span><br><span class="line">q=<span class="number">304008741604601924494328155975272418463</span></span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=gmpy2.invert(e,phi)<span class="comment">#invert是一个求逆元的函数</span></span><br><span class="line">key=rsa.PrivateKey(n,e,<span class="built_in">int</span>(d),p,q)<span class="comment">#文件内容不是单纯的数字，私钥就应该是n,e,p,q的组合</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;E:\\rsa\\output\\flag.enc&quot;</span>,<span class="string">&quot;rb+&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f=f.read()</span><br><span class="line">    <span class="built_in">print</span>(rsa.decrypt(f,key))</span><br></pre></td></tr></table></figure><p>得到明文：flag{decrypt_256}</p><h4 id="buuctf-RSA"><a href="#buuctf-RSA" class="headerlink" title="buuctf RSA"></a>buuctf RSA</h4><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在一次RSA密钥对生成中，假设p=473398607161，q=4511491，e=17</span><br><span class="line">求解出d作为flga提交</span><br></pre></td></tr></table></figure><p>直接根据公式求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p=<span class="number">473398607161</span></span><br><span class="line">q=<span class="number">4511491</span></span><br><span class="line">e=<span class="number">17</span></span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure><p>得到flag：flag{125631357777427553}</p><h4 id="buuctf-rsarsa"><a href="#buuctf-rsarsa" class="headerlink" title="buuctf rsarsa"></a>buuctf rsarsa</h4><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Math is cool! Use the RSA algorithm to decode the secret message, c, p, q, and e are parameters for the RSA algorithm.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p =  9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span><br><span class="line">q =  11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span><br><span class="line">e =  65537</span><br><span class="line">c =  83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</span><br><span class="line"></span><br><span class="line">Use RSA to find the secret message</span><br></pre></td></tr></table></figure><p>这里得到密文，通过公式，用c，d，n求出明文即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line">p = <span class="number">9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span></span><br><span class="line">q = <span class="number">11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</span></span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">n=p*q</span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line">flag=<span class="built_in">pow</span>(c,d,n)<span class="comment">#由于这里的密文是数字，可以直接通过公式拿到明文</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>直接得到flag：flag{5577446633554466577768879988}</p><h2 id="更为安全的rsa加密"><a href="#更为安全的rsa加密" class="headerlink" title="更为安全的rsa加密"></a>更为安全的rsa加密</h2><h3 id="dp-dq-p-q-c的加密算法"><a href="#dp-dq-p-q-c的加密算法" class="headerlink" title="dp,dq,p,q,c的加密算法"></a><a href="https://blog.csdn.net/MikeCoke/article/details/105959599">dp,dq,p,q,c的加密算法</a></h3><p>题目一般会将这5个数全部给出,这篇<a href="https://blog.csdn.net/MikeCoke/article/details/105959599">博客</a>很详细</p><p>解密代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">I = gmpy2.invert(q,p)<span class="comment">#相当于是q*I mod p=1求q模p的逆元I</span></span><br><span class="line">mp = <span class="built_in">pow</span>(c,dp,p)</span><br><span class="line">mq = <span class="built_in">pow</span>(c,dq,q)               <span class="comment">#求幂取模运算</span></span><br><span class="line"></span><br><span class="line">m = (((mp-mq)*I)%p)*q+mq       <span class="comment">#求明文公式，这里我惊奇地发现直接用mp或是mq作为flag也是对的！！！那么这种题就简单了，但在直接用的方法失效时，还是应该套用公式</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(m))          <span class="comment">#转为十六进制</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="buuctf-RSA1"><a href="#buuctf-RSA1" class="headerlink" title="buuctf RSA1"></a>buuctf RSA1</h4><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p = 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229 </span><br><span class="line">q = 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469 </span><br><span class="line">dp = 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929 </span><br><span class="line">dq = 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041 </span><br><span class="line">c = 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span><br></pre></td></tr></table></figure><p>题目把所有元素均给出，只需要代入公式即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">p = <span class="number">8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229</span></span><br><span class="line">q = <span class="number">12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469</span></span><br><span class="line">dp = <span class="number">6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929</span></span><br><span class="line">dq = <span class="number">783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041</span></span><br><span class="line">c = <span class="number">24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span></span><br><span class="line"></span><br><span class="line">I=gmpy2.invert(q,p)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mp=<span class="built_in">pow</span>(c,dp,p)</span><br><span class="line">mq=<span class="built_in">pow</span>(c,dq,q)</span><br><span class="line">flag1=mq<span class="comment">#这里是我做的测试，发现最终得到的flag都一样</span></span><br><span class="line">flag2=(mp-mq)*I%p*q+mq</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(flag1)[<span class="number">2</span>:]))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(flag2)[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure><p>flag：flag{W31c0m3_70_Ch1n470wn}</p><h3 id="dp泄漏"><a href="#dp泄漏" class="headerlink" title="dp泄漏"></a>dp泄漏</h3><p>题目给出e，n，dp，C，需要求出明文，思路就是去求d</p><p><img src="/2023/04/09/Rsa%E5%8A%A0%E5%AF%86%E7%B3%BB%E5%88%97/dp.jpg"></p><p><img src="/2023/04/09/Rsa%E5%8A%A0%E5%AF%86%E7%B3%BB%E5%88%97/dp1.jpg"></p><h4 id="buuctf-RSA2"><a href="#buuctf-RSA2" class="headerlink" title="buuctf RSA2"></a>buuctf RSA2</h4><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">e = 65537</span><br><span class="line">n = 248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113</span><br><span class="line">dp = 905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657</span><br><span class="line"></span><br><span class="line">c = 140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751</span><br></pre></td></tr></table></figure><p>直接代入公式写脚本即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113</span></span><br><span class="line">dp = <span class="number">905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,e):</span><br><span class="line">    <span class="keyword">if</span> (e*dp-<span class="number">1</span>)%i==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> n%((e*dp-<span class="number">1</span>)//i+<span class="number">1</span>)==<span class="number">0</span>:</span><br><span class="line">            p=(e*dp-<span class="number">1</span>)//i+<span class="number">1</span></span><br><span class="line">            q=n//p</span><br><span class="line"></span><br><span class="line">d=gmpy2.invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">flag=<span class="built_in">pow</span>(c,d,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(flag)[<span class="number">2</span>:]))<span class="comment">#将得到的明文以16进制文本形式输出</span></span><br></pre></td></tr></table></figure><p>可以直接分解n</p><h3 id="共模攻击"><a href="#共模攻击" class="headerlink" title="共模攻击"></a><a href="https://blog.csdn.net/MikeCoke/article/details/106065200">共模攻击</a></h3><p>直接在数学模型基础上，以公式m&#x3D;(c1^s1+c2^s2) mod n可以解出明文</p><p>共模攻击是在两密文有相同的取模方式的情况下，不用求得d1，d2直接得出明文，由于gcd(e1,e2)&#x3D;1,可以由<a href="https://blog.csdn.net/destiny1507/article/details/81750874">扩展欧几里得算法</a>得到相应的s1和s2，从而得到明文</p><p>解题代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">c1=</span><br><span class="line">c2=</span><br><span class="line">e1=</span><br><span class="line">e2=</span><br><span class="line">n=</span><br><span class="line">s,s1,s2=gmpy2.gcdext(e1,e2)<span class="comment">#python中扩展欧几里得算法会返回三个值，分别是e1与e2的最大公约数s，以及满足e1*s1+e2*s2=s式子的s1和s2</span></span><br><span class="line">flag=(<span class="built_in">pow</span>(c1,s1,n)*<span class="built_in">pow</span>(c2,s2,n))%n</span><br></pre></td></tr></table></figure><h4 id="buuctf-RSA3"><a href="#buuctf-RSA3" class="headerlink" title="buuctf RSA3"></a>buuctf RSA3</h4><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c1=22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361</span><br><span class="line">n=22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801</span><br><span class="line">e1=11187289</span><br><span class="line">c2=18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397</span><br><span class="line">e2=9647291</span><br></pre></td></tr></table></figure><p>题目给出e1，e2，c1，c2，共模n，那么就可以直接进行共模攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">c1=<span class="number">22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361</span></span><br><span class="line">n=<span class="number">22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801</span></span><br><span class="line">e1=<span class="number">11187289</span></span><br><span class="line">c2=<span class="number">18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397</span></span><br><span class="line">e2=<span class="number">9647291</span></span><br><span class="line"></span><br><span class="line">s,s1,s2=gmpy2.gcdext(e1,e2)</span><br><span class="line"></span><br><span class="line">flag=(<span class="built_in">pow</span>(c1,s1,n)*<span class="built_in">pow</span>(c2,s2,n))%n</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(flag)[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure><p>flag{49d91077a1abcb14f1a9d546c80be9ef}</p><p>也可以直接分解n求得，这里不再演示</p><h4 id="轴式rsa"><a href="#轴式rsa" class="headerlink" title="轴式rsa"></a>轴式rsa</h4><p>题目给出n和e以及一些数据，然后自己去找出p和q，再就是将这些数据的明文逐一解出，然后根据题目要求得到相应的形式</p><h4 id="buuctf-RSAROLL"><a href="#buuctf-RSAROLL" class="headerlink" title="buuctf RSAROLL"></a>buuctf RSAROLL</h4><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RSA roll！roll！roll！</span><br><span class="line">Only number and a-z</span><br><span class="line">（don&#x27;t use editor</span><br><span class="line">which MS provide）</span><br><span class="line">提示最终的明文是以数字和字母组成</span><br></pre></td></tr></table></figure><p>数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#123;920139713,19&#125;#给的n和e</span><br><span class="line">以下都是密文</span><br><span class="line">704796792</span><br><span class="line">752211152</span><br><span class="line">274704164</span><br><span class="line">18414022</span><br><span class="line">368270835</span><br><span class="line">483295235</span><br><span class="line">263072905</span><br><span class="line">459788476</span><br><span class="line">483295235</span><br><span class="line">459788476</span><br><span class="line">663551792</span><br><span class="line">475206804</span><br><span class="line">459788476</span><br><span class="line">428313374</span><br><span class="line">475206804</span><br><span class="line">459788476</span><br><span class="line">425392137</span><br><span class="line">704796792</span><br><span class="line">458265677</span><br><span class="line">341524652</span><br><span class="line">483295235</span><br><span class="line">534149509</span><br><span class="line">425392137</span><br><span class="line">428313374</span><br><span class="line">425392137</span><br><span class="line">341524652</span><br><span class="line">458265677</span><br><span class="line">263072905</span><br><span class="line">483295235</span><br><span class="line">828509797</span><br><span class="line">341524652</span><br><span class="line">425392137</span><br><span class="line">475206804</span><br><span class="line">428313374</span><br><span class="line">483295235</span><br><span class="line">475206804</span><br><span class="line">459788476</span><br><span class="line">306220148</span><br></pre></td></tr></table></figure><p>编写脚本解题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n=<span class="number">920139713</span></span><br><span class="line">e=<span class="number">19</span></span><br><span class="line">p=<span class="number">18443</span></span><br><span class="line">q=<span class="number">49891</span></span><br><span class="line">flag=[]</span><br><span class="line">d=gmpy2.invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;E:\\Rsaroll\\RsaRoll\\data.txt&quot;</span>,<span class="string">&quot;rb+&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> linedata <span class="keyword">in</span> f.readlines():</span><br><span class="line">        flag.append(<span class="built_in">pow</span>(<span class="built_in">int</span>(linedata),d,n))<span class="comment">#这里的linedata是字节c串类型的，由于pow函数不支持字节串类型，所以要将linedata转化为int类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i),end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>flag{13212je2ue28fy71w8u87y31r78eu1e2}</p><h3 id="低解密指数攻击"><a href="#低解密指数攻击" class="headerlink" title="低解密指数攻击"></a><a href="https://blog.csdn.net/weixin_44617902/article/details/113131016">低解密指数攻击</a></h3><p>当题目中n，e的位数大于120且题目只给出了e和n，那么就应该想到低解密指数攻击.</p><p>首先会用到攻击代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># numerator(n):分子, denominator(d)：分母</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">t_cf</span>(<span class="params">n, d</span>):  <span class="comment"># 将分数 x/y 转为连分数的形式</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">while</span> d:</span><br><span class="line">        res.append(n // d)</span><br><span class="line">        n, d = d, n % d</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cf</span>(<span class="params">sub_res</span>):  <span class="comment"># 得到渐进分数的分母和分子</span></span><br><span class="line">    n, d = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sub_res[::-<span class="number">1</span>]:  <span class="comment"># 从后面往前循环</span></span><br><span class="line">        d, n = n, i * n + d</span><br><span class="line">    <span class="keyword">return</span> d, n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">list_fraction</span>(<span class="params">x, y</span>):  <span class="comment"># 列出每个渐进分数</span></span><br><span class="line">    res = t_cf(x, y)</span><br><span class="line">    res = <span class="built_in">list</span>(<span class="built_in">map</span>(cf, (res[<span class="number">0</span>:i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(res)))))  <span class="comment"># 将连分数的结果逐一截取以求渐进分数</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_pq</span>(<span class="params">a, b, c</span>):  <span class="comment"># 由p+q和pq的值通过维达定理来求解p和q(解二元一次方程)</span></span><br><span class="line">    par = gmpy2.isqrt(b * b - <span class="number">4</span> * a * c)  <span class="comment"># 由上述可得，开根号一定是整数，因为有解</span></span><br><span class="line">    x1, x2 = (-b + par) // (<span class="number">2</span> * a), (-b - par) // (<span class="number">2</span> * a)</span><br><span class="line">    <span class="keyword">return</span> x1, x2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wienerAttack</span>(<span class="params">e, n</span>):</span><br><span class="line">    <span class="keyword">for</span> (d, k) <span class="keyword">in</span> list_fraction(e, n):  <span class="comment"># 用一个for循环来注意试探e/n的连续函数的渐进分数，直到找到一个满足条件的渐进分数</span></span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span>:  <span class="comment"># 可能会出现连分数的第一个为0的情况，排除</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> (e * d - <span class="number">1</span>) % k != <span class="number">0</span>:  <span class="comment"># ed=1 (mod φ(n)) 因此如果找到了d的话，(ed-1)会整除φ(n),也就是存在k使得(e*d-1)//k=φ(n)</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        phi = (e * d - <span class="number">1</span>) // k  <span class="comment"># 这个结果就是 φ(n)</span></span><br><span class="line"></span><br><span class="line">        px, qy = get_pq(<span class="number">1</span>, n - phi + <span class="number">1</span>, n)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> px * qy == n:</span><br><span class="line">            p, q = <span class="built_in">abs</span>(<span class="built_in">int</span>(px)), <span class="built_in">abs</span>(<span class="built_in">int</span>(qy))  <span class="comment"># 可能会得到两个负数，负负得正未尝不会出现</span></span><br><span class="line">            d = gmpy2.invert(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))  <span class="comment"># 求ed=1 (mod  φ(n))的结果，也就是e关于 φ(n)的乘法逆元d</span></span><br><span class="line">            <span class="keyword">return</span> d</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;求解d失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>然后直接破解</p><h4 id="buuctf-rsa2"><a href="#buuctf-rsa2" class="headerlink" title="buuctf rsa2"></a>buuctf rsa2</h4><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N = 101991809777553253470276751399264740131157682329252673501792154507006158434432009141995367241962525705950046253400188884658262496534706438791515071885860897552736656899566915731297225817250639873643376310103992170646906557242832893914902053581087502512787303322747780420210884852166586717636559058152544979471</span><br><span class="line">e = 46731919563265721307105180410302518676676135509737992912625092976849075262192092549323082367518264378630543338219025744820916471913696072050291990620486581719410354385121760761374229374847695148230596005409978383369740305816082770283909611956355972181848077519920922059268376958811713365106925235218265173085</span><br><span class="line"></span><br><span class="line">flag = &quot;flag&#123;&quot; + hashlib.md5(hex(d)).hexdigest() + &quot;&#125;&quot;</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>需要拿到d</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> WienerAttack</span><br><span class="line"></span><br><span class="line">N = <span class="number">101991809777553253470276751399264740131157682329252673501792154507006158434432009141995367241962525705950046253400188884658262496534706438791515071885860897552736656899566915731297225817250639873643376310103992170646906557242832893914902053581087502512787303322747780420210884852166586717636559058152544979471</span></span><br><span class="line">e = <span class="number">46731919563265721307105180410302518676676135509737992912625092976849075262192092549323082367518264378630543338219025744820916471913696072050291990620486581719410354385121760761374229374847695148230596005409978383369740305816082770283909611956355972181848077519920922059268376958811713365106925235218265173085</span></span><br><span class="line">d=WienerAttack.wienerAttack(e,N)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(d))<span class="comment">#0x13b8f87d588e2aa4a27296cf2898f56ab4c8deb5a1222ec080e23afecaf7f975</span></span><br><span class="line">flag1 = <span class="string">&quot;flag&#123;&quot;</span> + hashlib.md5(<span class="built_in">hex</span>(d).encode(<span class="string">&quot;utf-8&quot;</span>)).hexdigest() + <span class="string">&quot;&#125;&quot;</span><span class="comment">#hashlib中mod5的参数必须是一个bytes类型的数，所以将d用encode转化，这是在python3中，python2中不用转化，并且在python2中将d转化为16进制时会在末尾加上L，python3中不会，所以这里得到的flag1是出题人在python3环境下出题的结果，但这道题是出题人在python2环境下出的题，所以应该手动加上L即：</span></span><br><span class="line">flag2=<span class="string">&quot;flag&#123;&quot;</span> + hashlib.md5(<span class="string">b&#x27;0x13b8f87d588e2aa4a27296cf2898f56ab4c8deb5a1222ec080e23afecaf7f975&#x27;</span>).hexdigest() + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(flag1,flag2)</span><br></pre></td></tr></table></figure><p>python3：flag{8159e6c4abdd3b94ce461ed9a1a24017}</p><p>python2：flag{47bf28da384590448e0b0d23909a25a4}</p><p>buuctf上需要的是python2</p><p>当然这道题用低解密指数攻击显得很麻烦，我们可以直接分解n，拿到p，q求出d</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">N = <span class="number">101991809777553253470276751399264740131157682329252673501792154507006158434432009141995367241962525705950046253400188884658262496534706438791515071885860897552736656899566915731297225817250639873643376310103992170646906557242832893914902053581087502512787303322747780420210884852166586717636559058152544979471</span></span><br><span class="line">e = <span class="number">46731919563265721307105180410302518676676135509737992912625092976849075262192092549323082367518264378630543338219025744820916471913696072050291990620486581719410354385121760761374229374847695148230596005409978383369740305816082770283909611956355972181848077519920922059268376958811713365106925235218265173085</span></span><br><span class="line">p=<span class="number">9046853915223503351787031888977627106934564043204783593118678181991596316582877057556463152579621699010610569526573031954779520781448550677767565207407183</span></span><br><span class="line">q=<span class="number">11273732364123571293429600400343309403733952146912318879993851141423284675797325272321856863528776914709992821287788339848962916204774010644058033316303937</span></span><br><span class="line">d=gmpy2.invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(d))</span><br><span class="line">flag1 = <span class="string">&quot;flag&#123;&quot;</span> + hashlib.md5(<span class="built_in">hex</span>(d).encode()).hexdigest() + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">flag2=<span class="string">&quot;flag&#123;&quot;</span>+hashlib.md5(<span class="string">b&#x27;0x13b8f87d588e2aa4a27296cf2898f56ab4c8deb5a1222ec080e23afecaf7f975L&#x27;</span>).hexdigest()+<span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(flag1,<span class="string">&quot;\n&quot;</span>,flag2)</span><br></pre></td></tr></table></figure><h3 id="低加密指数广播攻击"><a href="#低加密指数广播攻击" class="headerlink" title="低加密指数广播攻击"></a><a href="https://blog.csdn.net/m0_51507437/article/details/122745627">低加密指数广播攻击</a></h3><p>先了解一下<a href="https://www.cnblogs.com/freinds/p/6388992.html">中国剩余定理</a></p><h3 id="n不互素"><a href="#n不互素" class="headerlink" title="n不互素"></a>n不互素</h3><p>特点：</p><p>1.加密指数e非常小</p><p>2.一份明文使用不同的模数n，相同的加密指数e进行多次加密</p><p>可以拿到每一份加密后的密文和对应的模数n、加密指数e<br>解题思路：</p><p>1.由于模数n只能分解为p和q，所以当n很多时，p或q有相同的风险</p><p>因此不同的模数n中可能存在相同的p或者说q</p><p>2.求出不同n之间的最大公约数 gcd()，如果大于1说明这里存在漏洞，可以继续攻击</p><p>所得到的最大公约数就是p或q，然后可得d</p><p>有私钥d就能得到明文</p><h4 id="buuctf-RSA5"><a href="#buuctf-RSA5" class="headerlink" title="buuctf RSA5"></a>buuctf RSA5</h4><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">m = xxxxxxxx</span><br><span class="line">e = 65537</span><br><span class="line">========== n c ==========</span><br><span class="line">n = 20474918894051778533305262345601880928088284471121823754049725354072477155873778848055073843345820697886641086842612486541250183965966001591342031562953561793332341641334302847996108417466360688139866505179689516589305636902137210185624650854906780037204412206309949199080005576922775773722438863762117750429327585792093447423980002401200613302943834212820909269713876683465817369158585822294675056978970612202885426436071950214538262921077409076160417436699836138801162621314845608796870206834704116707763169847387223307828908570944984416973019427529790029089766264949078038669523465243837675263858062854739083634207</span><br><span class="line">c = 974463908243330865728978769213595400782053398596897741316275722596415018912929508637393850919224969271766388710025195039896961956062895570062146947736340342927974992616678893372744261954172873490878805483241196345881721164078651156067119957816422768524442025688079462656755605982104174001635345874022133045402344010045961111720151990412034477755851802769069309069018738541854130183692204758761427121279982002993939745343695671900015296790637464880337375511536424796890996526681200633086841036320395847725935744757993013352804650575068136129295591306569213300156333650910795946800820067494143364885842896291126137320</span><br><span class="line"></span><br><span class="line">n = 20918819960648891349438263046954902210959146407860980742165930253781318759285692492511475263234242002509419079545644051755251311392635763412553499744506421566074721268822337321637265942226790343839856182100575539845358877493718334237585821263388181126545189723429262149630651289446553402190531135520836104217160268349688525168375213462570213612845898989694324269410202496871688649978370284661017399056903931840656757330859626183773396574056413017367606446540199973155630466239453637232936904063706551160650295031273385619470740593510267285957905801566362502262757750629162937373721291789527659531499435235261620309759</span><br><span class="line">c = 15819636201971185538694880505120469332582151856714070824521803121848292387556864177196229718923770810072104155432038682511434979353089791861087415144087855679134383396897817458726543883093567600325204596156649305930352575274039425470836355002691145864435755333821133969266951545158052745938252574301327696822347115053614052423028835532509220641378760800693351542633860702225772638930501021571415907348128269681224178300248272689705308911282208685459668200507057183420662959113956077584781737983254788703048275698921427029884282557468334399677849962342196140864403989162117738206246183665814938783122909930082802031855</span><br><span class="line"></span><br><span class="line">n = 25033254625906757272369609119214202033162128625171246436639570615263949157363273213121556825878737923265290579551873824374870957467163989542063489416636713654642486717219231225074115269684119428086352535471683359486248203644461465935500517901513233739152882943010177276545128308412934555830087776128355125932914846459470221102007666912211992310538890654396487111705385730502843589727289829692152177134753098649781412247065660637826282055169991824099110916576856188876975621376606634258927784025787142263367152947108720757222446686415627479703666031871635656314282727051189190889008763055811680040315277078928068816491</span><br><span class="line">c = 4185308529416874005831230781014092407198451385955677399668501833902623478395669279404883990725184332709152443372583701076198786635291739356770857286702107156730020004358955622511061410661058982622055199736820808203841446796305284394651714430918690389486920560834672316158146453183789412140939029029324756035358081754426645160033262924330248675216108270980157049705488620263485129480952814764002865280019185127662449318324279383277766416258142275143923532168798413011028271543085249029048997452212503111742302302065401051458066585395360468447460658672952851643547193822775218387853623453638025492389122204507555908862</span><br><span class="line"></span><br><span class="line">n = 21206968097314131007183427944486801953583151151443627943113736996776787181111063957960698092696800555044199156765677935373149598221184792286812213294617749834607696302116136745662816658117055427803315230042700695125718401646810484873064775005221089174056824724922160855810527236751389605017579545235876864998419873065217294820244730785120525126565815560229001887622837549118168081685183371092395128598125004730268910276024806808565802081366898904032509920453785997056150497645234925528883879419642189109649009132381586673390027614766605038951015853086721168018787523459264932165046816881682774229243688581614306480751</span><br><span class="line">c = 4521038011044758441891128468467233088493885750850588985708519911154778090597136126150289041893454126674468141393472662337350361712212694867311622970440707727941113263832357173141775855227973742571088974593476302084111770625764222838366277559560887042948859892138551472680654517814916609279748365580610712259856677740518477086531592233107175470068291903607505799432931989663707477017904611426213770238397005743730386080031955694158466558475599751940245039167629126576784024482348452868313417471542956778285567779435940267140679906686531862467627238401003459101637191297209422470388121802536569761414457618258343550613</span><br><span class="line"></span><br><span class="line">n = 22822039733049388110936778173014765663663303811791283234361230649775805923902173438553927805407463106104699773994158375704033093471761387799852168337898526980521753614307899669015931387819927421875316304591521901592823814417756447695701045846773508629371397013053684553042185725059996791532391626429712416994990889693732805181947970071429309599614973772736556299404246424791660679253884940021728846906344198854779191951739719342908761330661910477119933428550774242910420952496929605686154799487839923424336353747442153571678064520763149793294360787821751703543288696726923909670396821551053048035619499706391118145067</span><br><span class="line">c = 15406498580761780108625891878008526815145372096234083936681442225155097299264808624358826686906535594853622687379268969468433072388149786607395396424104318820879443743112358706546753935215756078345959375299650718555759698887852318017597503074317356745122514481807843745626429797861463012940172797612589031686718185390345389295851075279278516147076602270178540690147808314172798987497259330037810328523464851895621851859027823681655934104713689539848047163088666896473665500158179046196538210778897730209572708430067658411755959866033531700460551556380993982706171848970460224304996455600503982223448904878212849412357</span><br><span class="line"></span><br><span class="line">n = 21574139855341432908474064784318462018475296809327285532337706940126942575349507668289214078026102682252713757703081553093108823214063791518482289846780197329821139507974763780260290309600884920811959842925540583967085670848765317877441480914852329276375776405689784571404635852204097622600656222714808541872252335877037561388406257181715278766652824786376262249274960467193961956690974853679795249158751078422296580367506219719738762159965958877806187461070689071290948181949561254144310776943334859775121650186245846031720507944987838489723127897223416802436021278671237227993686791944711422345000479751187704426369</span><br><span class="line">c = 20366856150710305124583065375297661819795242238376485264951185336996083744604593418983336285185491197426018595031444652123288461491879021096028203694136683203441692987069563513026001861435722117985559909692670907347563594578265880806540396777223906955491026286843168637367593400342814725694366078337030937104035993569672959361347287894143027186846856772983058328919716702982222142848848117768499996617588305301483085428547267337070998767412540225911508196842253134355901263861121500650240296746702967594224401650220168780537141654489215019142122284308116284129004257364769474080721001708734051264841350424152506027932</span><br><span class="line"></span><br><span class="line">n = 25360227412666612490102161131174584819240931803196448481224305250583841439581008528535930814167338381983764991296575637231916547647970573758269411168219302370541684789125112505021148506809643081950237623703181025696585998044695691322012183660424636496897073045557400768745943787342548267386564625462143150176113656264450210023925571945961405709276631990731602198104287528528055650050486159837612279600415259486306154947514005408907590083747758953115486124865486720633820559135063440942528031402951958557630833503775112010715604278114325528993771081233535247118481765852273252404963430792898948219539473312462979849137</span><br><span class="line">c = 19892772524651452341027595619482734356243435671592398172680379981502759695784087900669089919987705675899945658648623800090272599154590123082189645021800958076861518397325439521139995652026377132368232502108620033400051346127757698623886142621793423225749240286511666556091787851683978017506983310073524398287279737680091787333547538239920607761080988243639547570818363788673249582783015475682109984715293163137324439862838574460108793714172603672477766831356411304446881998674779501188163600664488032943639694828698984739492200699684462748922883550002652913518229322945040819064133350314536378694523704793396169065179</span><br><span class="line"></span><br><span class="line">n = 22726855244632356029159691753451822163331519237547639938779517751496498713174588935566576167329576494790219360727877166074136496129927296296996970048082870488804456564986667129388136556137013346228118981936899510687589585286517151323048293150257036847475424044378109168179412287889340596394755257704938006162677656581509375471102546261355748251869048003600520034656264521931808651038524134185732929570384705918563982065684145766427962502261522481994191989820110575981906998431553107525542001187655703534683231777988419268338249547641335718393312295800044734534761692799403469497954062897856299031257454735945867491191</span><br><span class="line">c = 6040119795175856407541082360023532204614723858688636724822712717572759793960246341800308149739809871234313049629732934797569781053000686185666374833978403290525072598774001731350244744590772795701065129561898116576499984185920661271123665356132719193665474235596884239108030605882777868856122378222681140570519180321286976947154042272622411303981011302586225630859892731724640574658125478287115198406253847367979883768000812605395482952698689604477719478947595442185921480652637868335673233200662100621025061500895729605305665864693122952557361871523165300206070325660353095592778037767395360329231331322823610060006</span><br><span class="line"></span><br><span class="line">n = 23297333791443053297363000786835336095252290818461950054542658327484507406594632785712767459958917943095522594228205423428207345128899745800927319147257669773812669542782839237744305180098276578841929496345963997512244219376701787616046235397139381894837435562662591060768476997333538748065294033141610502252325292801816812268934171361934399951548627267791401089703937389012586581080223313060159456238857080740699528666411303029934807011214953984169785844714159627792016926490955282697877141614638806397689306795328344778478692084754216753425842557818899467945102646776342655167655384224860504086083147841252232760941</span><br><span class="line">c = 5418120301208378713115889465579964257871814114515046096090960159737859076829258516920361577853903925954198406843757303687557848302302200229295916902430205737843601806700738234756698575708612424928480440868739120075888681672062206529156566421276611107802917418993625029690627196813830326369874249777619239603300605876865967515719079797115910578653562787899019310139945904958024882417833736304894765433489476234575356755275147256577387022873348906900149634940747104513850154118106991137072643308620284663108283052245750945228995387803432128842152251549292698947407663643895853432650029352092018372834457054271102816934</span><br><span class="line"></span><br><span class="line">n = 28873667904715682722987234293493200306976947898711255064125115933666968678742598858722431426218914462903521596341771131695619382266194233561677824357379805303885993804266436810606263022097900266975250431575654686915049693091467864820512767070713267708993899899011156106766178906700336111712803362113039613548672937053397875663144794018087017731949087794894903737682383916173267421403408140967713071026001874733487295007501068871044649170615709891451856792232315526696220161842742664778581287321318748202431466508948902745314372299799561625186955234673012098210919745879882268512656931714326782335211089576897310591491</span><br><span class="line">c = 9919880463786836684987957979091527477471444996392375244075527841865509160181666543016317634963512437510324198702416322841377489417029572388474450075801462996825244657530286107428186354172836716502817609070590929769261932324275353289939302536440310628698349244872064005700644520223727670950787924296004296883032978941200883362653993351638545860207179022472492671256630427228461852668118035317021428675954874947015197745916918197725121122236369382741533983023462255913924692806249387449016629865823316402366017657844166919846683497851842388058283856219900535567427103603869955066193425501385255322097901531402103883869</span><br><span class="line"></span><br><span class="line">n = 22324685947539653722499932469409607533065419157347813961958075689047690465266404384199483683908594787312445528159635527833904475801890381455653807265501217328757871352731293000303438205315816792663917579066674842307743845261771032363928568844669895768092515658328756229245837025261744260614860746997931503548788509983868038349720225305730985576293675269073709022350700836510054067641753713212999954307022524495885583361707378513742162566339010134354907863733205921845038918224463903789841881400814074587261720283879760122070901466517118265422863420376921536734845502100251460872499122236686832189549698020737176683019</span><br><span class="line">c = 1491527050203294989882829248560395184804977277747126143103957219164624187528441047837351263580440686474767380464005540264627910126483129930668344095814547592115061057843470131498075060420395111008619027199037019925701236660166563068245683975787762804359520164701691690916482591026138582705558246869496162759780878437137960823000043988227303003876410503121370163303711603359430764539337597866862508451528158285103251810058741879687875218384160282506172706613359477657215420734816049393339593755489218588796607060261897905233453268671411610631047340459487937479511933450369462213795738933019001471803157607791738538467</span><br><span class="line"></span><br><span class="line">n = 27646746423759020111007828653264027999257847645666129907789026054594393648800236117046769112762641778865620892443423100189619327585811384883515424918752749559627553637785037359639801125213256163008431942593727931931898199727552768626775618479833029101249692573716030706695702510982283555740851047022672485743432464647772882314215176114732257497240284164016914018689044557218920300262234652840632406067273375269301008409860193180822366735877288205783314326102263756503786736122321348320031950012144905869556204017430593656052867939493633163499580242224763404338807022510136217187779084917996171602737036564991036724299</span><br><span class="line">c = 21991524128957260536043771284854920393105808126700128222125856775506885721971193109361315961129190814674647136464887087893990660894961612838205086401018885457667488911898654270235561980111174603323721280911197488286585269356849579263043456316319476495888696219344219866516861187654180509247881251251278919346267129904739277386289240394384575124331135655943513831009934023397457082184699737734388823763306805326430395849935770213817533387235486307008892410920611669932693018165569417445885810825749609388627231235840912644654685819620931663346297596334834498661789016450371769203650109994771872404185770230172934013971</span><br><span class="line"></span><br><span class="line">n = 20545487405816928731738988374475012686827933709789784391855706835136270270933401203019329136937650878386117187776530639342572123237188053978622697282521473917978282830432161153221216194169879669541998840691383025487220850872075436064308499924958517979727954402965612196081404341651517326364041519250125036424822634354268773895465698920883439222996581226358595873993976604699830613932320720554130011671297944433515047180565484495191003887599891289037982010216357831078328159028953222056918189365840711588671093333013117454034313622855082795813122338562446223041211192277089225078324682108033843023903550172891959673551</span><br><span class="line">c = 14227439188191029461250476692790539654619199888487319429114414557975376308688908028140817157205579804059783807641305577385724758530138514972962209062230576107406142402603484375626077345190883094097636019771377866339531511965136650567412363889183159616188449263752475328663245311059988337996047359263288837436305588848044572937759424466586870280512424336807064729894515840552404756879590698797046333336445465120445087587621743906624279621779634772378802959109714400516183718323267273824736540168545946444437586299214110424738159957388350785999348535171553569373088251552712391288365295267665691357719616011613628772175</span><br><span class="line"></span><br><span class="line">n = 27359727711584277234897157724055852794019216845229798938655814269460046384353568138598567755392559653460949444557879120040796798142218939251844762461270251672399546774067275348291003962551964648742053215424620256999345448398805278592777049668281558312871773979931343097806878701114056030041506690476954254006592555275342579529625231194321357904668512121539514880704046969974898412095675082585315458267591016734924646294357666924293908418345508902112711075232047998775303603175363964055048589769318562104883659754974955561725694779754279606726358588862479198815999276839234952142017210593887371950645418417355912567987</span><br><span class="line">c = 3788529784248255027081674540877016372807848222776887920453488878247137930578296797437647922494510483767651150492933356093288965943741570268943861987024276610712717409139946409513963043114463933146088430004237747163422802959250296602570649363016151581364006795894226599584708072582696996740518887606785460775851029814280359385763091078902301957226484620428513604630585131511167015763190591225884202772840456563643159507805711004113901417503751181050823638207803533111429510911616160851391754754434764819568054850823810901159821297849790005646102129354035735350124476838786661542089045509656910348676742844957008857457</span><br><span class="line"></span><br><span class="line">n = 27545937603751737248785220891735796468973329738076209144079921449967292572349424539010502287564030116831261268197384650511043068738911429169730640135947800885987171539267214611907687570587001933829208655100828045651391618089603288456570334500533178695238407684702251252671579371018651675054368606282524673369983034682330578308769886456335818733827237294570476853673552685361689144261552895758266522393004116017849397346259119221063821663280935820440671825601452417487330105280889520007917979115568067161590058277418371493228631232457972494285014767469893647892888681433965857496916110704944758070268626897045014782837</span><br><span class="line">c = 14069112970608895732417039977542732665796601893762401500878786871680645798754783315693511261740059725171342404186571066972546332813667711135661176659424619936101038903439144294886379322591635766682645179888058617577572409307484708171144488708410543462972008179994594087473935638026612679389759756811490524127195628741262871304427908481214992471182859308828778119005750928935764927967212343526503410515793717201360360437981322576798056276657140363332700714732224848346808963992302409037706094588964170239521193589470070839790404597252990818583717869140229811712295005710540476356743378906642267045723633874011649259842</span><br><span class="line"></span><br><span class="line">n = 25746162075697911560263181791216433062574178572424600336856278176112733054431463253903433128232709054141607100891177804285813783247735063753406524678030561284491481221681954564804141454666928657549670266775659862814924386584148785453647316864935942772919140563506305666207816897601862713092809234429096584753263707828899780979223118181009293655563146526792388913462557306433664296966331469906428665127438829399703002867800269947855869262036714256550075520193125987011945192273531732276641728008406855871598678936585324782438668746810516660152018244253008092470066555687277138937298747951929576231036251316270602513451</span><br><span class="line">c = 17344284860275489477491525819922855326792275128719709401292545608122859829827462088390044612234967551682879954301458425842831995513832410355328065562098763660326163262033200347338773439095709944202252494552172589503915965931524326523663289777583152664722241920800537867331030623906674081852296232306336271542832728410803631170229642717524942332390842467035143631504401140727083270732464237443915263865880580308776111219718961746378842924644142127243573824972533819479079381023103585862099063382129757560124074676150622288706094110075567706403442920696472627797607697962873026112240527498308535903232663939028587036724</span><br><span class="line"></span><br><span class="line">n = 23288486934117120315036919418588136227028485494137930196323715336208849327833965693894670567217971727921243839129969128783853015760155446770590696037582684845937132790047363216362087277861336964760890214059732779383020349204803205725870225429985939570141508220041286857810048164696707018663758416807708910671477407366098883430811861933014973409390179948577712579749352299440310543689035651465399867908428885541237776143404376333442949397063249223702355051571790555151203866821867908531733788784978667478707672984539512431549558672467752712004519300318999208102076732501412589104904734983789895358753664077486894529499</span><br><span class="line">c = 10738254418114076548071448844964046468141621740603214384986354189105236977071001429271560636428075970459890958274941762528116445171161040040833357876134689749846940052619392750394683504816081193432350669452446113285638982551762586656329109007214019944975816434827768882704630460001209452239162896576191876324662333153835533956600295255158377025198426950944040643235430211011063586032467724329735785947372051759042138171054165854842472990583800899984893232549092766400510300083585513014171220423103452292891496141806956300396540682381668367564569427813092064053993103537635994311143010708814851867239706492577203899024</span><br><span class="line"></span><br><span class="line">n = 19591441383958529435598729113936346657001352578357909347657257239777540424811749817783061233235817916560689138344041497732749011519736303038986277394036718790971374656832741054547056417771501234494768509780369075443550907847298246275717420562375114406055733620258777905222169702036494045086017381084272496162770259955811174440490126514747876661317750649488774992348005044389081101686016446219264069971370646319546429782904810063020324704138495608761532563310699753322444871060383693044481932265801505819646998535192083036872551683405766123968487907648980900712118052346174533513978009131757167547595857552370586353973</span><br><span class="line">c = 3834917098887202931981968704659119341624432294759361919553937551053499607440333234018189141970246302299385742548278589896033282894981200353270637127213483172182529890495903425649116755901631101665876301799865612717750360089085179142750664603454193642053016384714515855868368723508922271767190285521137785688075622832924829248362774476456232826885801046969384519549385428259591566716890844604696258783639390854153039329480726205147199247183621535172450825979047132495439603840806501254997167051142427157381799890725323765558803808030109468048682252028720241357478614704610089120810367192414352034177484688502364022887</span><br><span class="line"></span><br><span class="line">n = 19254242571588430171308191757871261075358521158624745702744057556054652332495961196795369630484782930292003238730267396462491733557715379956969694238267908985251699834707734400775311452868924330866502429576951934279223234676654749272932769107390976321208605516299532560054081301829440688796904635446986081691156842271268059970762004259219036753174909942343204432795076377432107630203621754552804124408792358220071862369443201584155711893388877350138023238624566616551246804054720492816226651467017802504094070614892556444425915920269485861799532473383304622064493223627552558344088839860178294589481899206318863310603</span><br><span class="line">c = 6790553533991297205804561991225493105312398825187682250780197510784765226429663284220400480563039341938599783346724051076211265663468643826430109013245014035811178295081939958687087477312867720289964506097819762095244479129359998867671811819738196687884696680463458661374310994610760009474264115750204920875527434486437536623589684519411519100170291423367424938566820315486507444202022408003879118465761273916755290898112991525546114191064022991329724370064632569903856189236177894007766690782630247443895358893983735822824243487181851098787271270256780891094405121947631088729917398317652320497765101790132679171889</span><br><span class="line"></span><br><span class="line">n = 26809700251171279102974962949184411136459372267620535198421449833298448092580497485301953796619185339316064387798092220298630428207556482805739803420279056191194360049651767412572609187680508073074653291350998253938793269214230457117194434853888765303403385824786231859450351212449404870776320297419712486574804794325602760347306432927281716160368830187944940128907971027838510079519466846176106565164730963988892400240063089397720414921398936399927948235195085202171264728816184532651138221862240969655185596628285814057082448321749567943946273776184657698104465062749244327092588237927996419620170254423837876806659</span><br><span class="line">c = 386213556608434013769864727123879412041991271528990528548507451210692618986652870424632219424601677524265011043146748309774067894985069288067952546139416819404039688454756044862784630882833496090822568580572859029800646671301748901528132153712913301179254879877441322285914544974519727307311002330350534857867516466612474769753577858660075830592891403551867246057397839688329172530177187042229028685862036140779065771061933528137423019407311473581832405899089709251747002788032002094495379614686544672969073249309703482556386024622814731015767810042969813752548617464974915714425595351940266077021672409858645427346</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n1 = <span class="number">20474918894051778533305262345601880928088284471121823754049725354072477155873778848055073843345820697886641086842612486541250183965966001591342031562953561793332341641334302847996108417466360688139866505179689516589305636902137210185624650854906780037204412206309949199080005576922775773722438863762117750429327585792093447423980002401200613302943834212820909269713876683465817369158585822294675056978970612202885426436071950214538262921077409076160417436699836138801162621314845608796870206834704116707763169847387223307828908570944984416973019427529790029089766264949078038669523465243837675263858062854739083634207</span></span><br><span class="line">c1 = <span class="number">974463908243330865728978769213595400782053398596897741316275722596415018912929508637393850919224969271766388710025195039896961956062895570062146947736340342927974992616678893372744261954172873490878805483241196345881721164078651156067119957816422768524442025688079462656755605982104174001635345874022133045402344010045961111720151990412034477755851802769069309069018738541854130183692204758761427121279982002993939745343695671900015296790637464880337375511536424796890996526681200633086841036320395847725935744757993013352804650575068136129295591306569213300156333650910795946800820067494143364885842896291126137320</span></span><br><span class="line"></span><br><span class="line">n2 = <span class="number">20918819960648891349438263046954902210959146407860980742165930253781318759285692492511475263234242002509419079545644051755251311392635763412553499744506421566074721268822337321637265942226790343839856182100575539845358877493718334237585821263388181126545189723429262149630651289446553402190531135520836104217160268349688525168375213462570213612845898989694324269410202496871688649978370284661017399056903931840656757330859626183773396574056413017367606446540199973155630466239453637232936904063706551160650295031273385619470740593510267285957905801566362502262757750629162937373721291789527659531499435235261620309759</span></span><br><span class="line">c2 = <span class="number">15819636201971185538694880505120469332582151856714070824521803121848292387556864177196229718923770810072104155432038682511434979353089791861087415144087855679134383396897817458726543883093567600325204596156649305930352575274039425470836355002691145864435755333821133969266951545158052745938252574301327696822347115053614052423028835532509220641378760800693351542633860702225772638930501021571415907348128269681224178300248272689705308911282208685459668200507057183420662959113956077584781737983254788703048275698921427029884282557468334399677849962342196140864403989162117738206246183665814938783122909930082802031855</span></span><br><span class="line"></span><br><span class="line">n3 = <span class="number">25033254625906757272369609119214202033162128625171246436639570615263949157363273213121556825878737923265290579551873824374870957467163989542063489416636713654642486717219231225074115269684119428086352535471683359486248203644461465935500517901513233739152882943010177276545128308412934555830087776128355125932914846459470221102007666912211992310538890654396487111705385730502843589727289829692152177134753098649781412247065660637826282055169991824099110916576856188876975621376606634258927784025787142263367152947108720757222446686415627479703666031871635656314282727051189190889008763055811680040315277078928068816491</span></span><br><span class="line">c3 = <span class="number">4185308529416874005831230781014092407198451385955677399668501833902623478395669279404883990725184332709152443372583701076198786635291739356770857286702107156730020004358955622511061410661058982622055199736820808203841446796305284394651714430918690389486920560834672316158146453183789412140939029029324756035358081754426645160033262924330248675216108270980157049705488620263485129480952814764002865280019185127662449318324279383277766416258142275143923532168798413011028271543085249029048997452212503111742302302065401051458066585395360468447460658672952851643547193822775218387853623453638025492389122204507555908862</span></span><br><span class="line"></span><br><span class="line">n4 = <span class="number">21206968097314131007183427944486801953583151151443627943113736996776787181111063957960698092696800555044199156765677935373149598221184792286812213294617749834607696302116136745662816658117055427803315230042700695125718401646810484873064775005221089174056824724922160855810527236751389605017579545235876864998419873065217294820244730785120525126565815560229001887622837549118168081685183371092395128598125004730268910276024806808565802081366898904032509920453785997056150497645234925528883879419642189109649009132381586673390027614766605038951015853086721168018787523459264932165046816881682774229243688581614306480751</span></span><br><span class="line">c4 = <span class="number">4521038011044758441891128468467233088493885750850588985708519911154778090597136126150289041893454126674468141393472662337350361712212694867311622970440707727941113263832357173141775855227973742571088974593476302084111770625764222838366277559560887042948859892138551472680654517814916609279748365580610712259856677740518477086531592233107175470068291903607505799432931989663707477017904611426213770238397005743730386080031955694158466558475599751940245039167629126576784024482348452868313417471542956778285567779435940267140679906686531862467627238401003459101637191297209422470388121802536569761414457618258343550613</span></span><br><span class="line"></span><br><span class="line">n5 = <span class="number">22822039733049388110936778173014765663663303811791283234361230649775805923902173438553927805407463106104699773994158375704033093471761387799852168337898526980521753614307899669015931387819927421875316304591521901592823814417756447695701045846773508629371397013053684553042185725059996791532391626429712416994990889693732805181947970071429309599614973772736556299404246424791660679253884940021728846906344198854779191951739719342908761330661910477119933428550774242910420952496929605686154799487839923424336353747442153571678064520763149793294360787821751703543288696726923909670396821551053048035619499706391118145067</span></span><br><span class="line">c5 = <span class="number">15406498580761780108625891878008526815145372096234083936681442225155097299264808624358826686906535594853622687379268969468433072388149786607395396424104318820879443743112358706546753935215756078345959375299650718555759698887852318017597503074317356745122514481807843745626429797861463012940172797612589031686718185390345389295851075279278516147076602270178540690147808314172798987497259330037810328523464851895621851859027823681655934104713689539848047163088666896473665500158179046196538210778897730209572708430067658411755959866033531700460551556380993982706171848970460224304996455600503982223448904878212849412357</span></span><br><span class="line"></span><br><span class="line">n6 = <span class="number">21574139855341432908474064784318462018475296809327285532337706940126942575349507668289214078026102682252713757703081553093108823214063791518482289846780197329821139507974763780260290309600884920811959842925540583967085670848765317877441480914852329276375776405689784571404635852204097622600656222714808541872252335877037561388406257181715278766652824786376262249274960467193961956690974853679795249158751078422296580367506219719738762159965958877806187461070689071290948181949561254144310776943334859775121650186245846031720507944987838489723127897223416802436021278671237227993686791944711422345000479751187704426369</span></span><br><span class="line">c6 = <span class="number">20366856150710305124583065375297661819795242238376485264951185336996083744604593418983336285185491197426018595031444652123288461491879021096028203694136683203441692987069563513026001861435722117985559909692670907347563594578265880806540396777223906955491026286843168637367593400342814725694366078337030937104035993569672959361347287894143027186846856772983058328919716702982222142848848117768499996617588305301483085428547267337070998767412540225911508196842253134355901263861121500650240296746702967594224401650220168780537141654489215019142122284308116284129004257364769474080721001708734051264841350424152506027932</span></span><br><span class="line"></span><br><span class="line">n7 = <span class="number">25360227412666612490102161131174584819240931803196448481224305250583841439581008528535930814167338381983764991296575637231916547647970573758269411168219302370541684789125112505021148506809643081950237623703181025696585998044695691322012183660424636496897073045557400768745943787342548267386564625462143150176113656264450210023925571945961405709276631990731602198104287528528055650050486159837612279600415259486306154947514005408907590083747758953115486124865486720633820559135063440942528031402951958557630833503775112010715604278114325528993771081233535247118481765852273252404963430792898948219539473312462979849137</span></span><br><span class="line">c7 = <span class="number">19892772524651452341027595619482734356243435671592398172680379981502759695784087900669089919987705675899945658648623800090272599154590123082189645021800958076861518397325439521139995652026377132368232502108620033400051346127757698623886142621793423225749240286511666556091787851683978017506983310073524398287279737680091787333547538239920607761080988243639547570818363788673249582783015475682109984715293163137324439862838574460108793714172603672477766831356411304446881998674779501188163600664488032943639694828698984739492200699684462748922883550002652913518229322945040819064133350314536378694523704793396169065179</span></span><br><span class="line"></span><br><span class="line">n8 = <span class="number">22726855244632356029159691753451822163331519237547639938779517751496498713174588935566576167329576494790219360727877166074136496129927296296996970048082870488804456564986667129388136556137013346228118981936899510687589585286517151323048293150257036847475424044378109168179412287889340596394755257704938006162677656581509375471102546261355748251869048003600520034656264521931808651038524134185732929570384705918563982065684145766427962502261522481994191989820110575981906998431553107525542001187655703534683231777988419268338249547641335718393312295800044734534761692799403469497954062897856299031257454735945867491191</span></span><br><span class="line">c8 = <span class="number">6040119795175856407541082360023532204614723858688636724822712717572759793960246341800308149739809871234313049629732934797569781053000686185666374833978403290525072598774001731350244744590772795701065129561898116576499984185920661271123665356132719193665474235596884239108030605882777868856122378222681140570519180321286976947154042272622411303981011302586225630859892731724640574658125478287115198406253847367979883768000812605395482952698689604477719478947595442185921480652637868335673233200662100621025061500895729605305665864693122952557361871523165300206070325660353095592778037767395360329231331322823610060006</span></span><br><span class="line"></span><br><span class="line">n9 = <span class="number">23297333791443053297363000786835336095252290818461950054542658327484507406594632785712767459958917943095522594228205423428207345128899745800927319147257669773812669542782839237744305180098276578841929496345963997512244219376701787616046235397139381894837435562662591060768476997333538748065294033141610502252325292801816812268934171361934399951548627267791401089703937389012586581080223313060159456238857080740699528666411303029934807011214953984169785844714159627792016926490955282697877141614638806397689306795328344778478692084754216753425842557818899467945102646776342655167655384224860504086083147841252232760941</span></span><br><span class="line">c9 = <span class="number">5418120301208378713115889465579964257871814114515046096090960159737859076829258516920361577853903925954198406843757303687557848302302200229295916902430205737843601806700738234756698575708612424928480440868739120075888681672062206529156566421276611107802917418993625029690627196813830326369874249777619239603300605876865967515719079797115910578653562787899019310139945904958024882417833736304894765433489476234575356755275147256577387022873348906900149634940747104513850154118106991137072643308620284663108283052245750945228995387803432128842152251549292698947407663643895853432650029352092018372834457054271102816934</span></span><br><span class="line"></span><br><span class="line">n10 = <span class="number">28873667904715682722987234293493200306976947898711255064125115933666968678742598858722431426218914462903521596341771131695619382266194233561677824357379805303885993804266436810606263022097900266975250431575654686915049693091467864820512767070713267708993899899011156106766178906700336111712803362113039613548672937053397875663144794018087017731949087794894903737682383916173267421403408140967713071026001874733487295007501068871044649170615709891451856792232315526696220161842742664778581287321318748202431466508948902745314372299799561625186955234673012098210919745879882268512656931714326782335211089576897310591491</span></span><br><span class="line">c10 = <span class="number">9919880463786836684987957979091527477471444996392375244075527841865509160181666543016317634963512437510324198702416322841377489417029572388474450075801462996825244657530286107428186354172836716502817609070590929769261932324275353289939302536440310628698349244872064005700644520223727670950787924296004296883032978941200883362653993351638545860207179022472492671256630427228461852668118035317021428675954874947015197745916918197725121122236369382741533983023462255913924692806249387449016629865823316402366017657844166919846683497851842388058283856219900535567427103603869955066193425501385255322097901531402103883869</span></span><br><span class="line"></span><br><span class="line">n11 = <span class="number">22324685947539653722499932469409607533065419157347813961958075689047690465266404384199483683908594787312445528159635527833904475801890381455653807265501217328757871352731293000303438205315816792663917579066674842307743845261771032363928568844669895768092515658328756229245837025261744260614860746997931503548788509983868038349720225305730985576293675269073709022350700836510054067641753713212999954307022524495885583361707378513742162566339010134354907863733205921845038918224463903789841881400814074587261720283879760122070901466517118265422863420376921536734845502100251460872499122236686832189549698020737176683019</span></span><br><span class="line">c11 = <span class="number">1491527050203294989882829248560395184804977277747126143103957219164624187528441047837351263580440686474767380464005540264627910126483129930668344095814547592115061057843470131498075060420395111008619027199037019925701236660166563068245683975787762804359520164701691690916482591026138582705558246869496162759780878437137960823000043988227303003876410503121370163303711603359430764539337597866862508451528158285103251810058741879687875218384160282506172706613359477657215420734816049393339593755489218588796607060261897905233453268671411610631047340459487937479511933450369462213795738933019001471803157607791738538467</span></span><br><span class="line"></span><br><span class="line">n12 = <span class="number">27646746423759020111007828653264027999257847645666129907789026054594393648800236117046769112762641778865620892443423100189619327585811384883515424918752749559627553637785037359639801125213256163008431942593727931931898199727552768626775618479833029101249692573716030706695702510982283555740851047022672485743432464647772882314215176114732257497240284164016914018689044557218920300262234652840632406067273375269301008409860193180822366735877288205783314326102263756503786736122321348320031950012144905869556204017430593656052867939493633163499580242224763404338807022510136217187779084917996171602737036564991036724299</span></span><br><span class="line">c12 = <span class="number">21991524128957260536043771284854920393105808126700128222125856775506885721971193109361315961129190814674647136464887087893990660894961612838205086401018885457667488911898654270235561980111174603323721280911197488286585269356849579263043456316319476495888696219344219866516861187654180509247881251251278919346267129904739277386289240394384575124331135655943513831009934023397457082184699737734388823763306805326430395849935770213817533387235486307008892410920611669932693018165569417445885810825749609388627231235840912644654685819620931663346297596334834498661789016450371769203650109994771872404185770230172934013971</span></span><br><span class="line"></span><br><span class="line">n13 = <span class="number">20545487405816928731738988374475012686827933709789784391855706835136270270933401203019329136937650878386117187776530639342572123237188053978622697282521473917978282830432161153221216194169879669541998840691383025487220850872075436064308499924958517979727954402965612196081404341651517326364041519250125036424822634354268773895465698920883439222996581226358595873993976604699830613932320720554130011671297944433515047180565484495191003887599891289037982010216357831078328159028953222056918189365840711588671093333013117454034313622855082795813122338562446223041211192277089225078324682108033843023903550172891959673551</span></span><br><span class="line">c13 = <span class="number">14227439188191029461250476692790539654619199888487319429114414557975376308688908028140817157205579804059783807641305577385724758530138514972962209062230576107406142402603484375626077345190883094097636019771377866339531511965136650567412363889183159616188449263752475328663245311059988337996047359263288837436305588848044572937759424466586870280512424336807064729894515840552404756879590698797046333336445465120445087587621743906624279621779634772378802959109714400516183718323267273824736540168545946444437586299214110424738159957388350785999348535171553569373088251552712391288365295267665691357719616011613628772175</span></span><br><span class="line"></span><br><span class="line">n14 = <span class="number">27359727711584277234897157724055852794019216845229798938655814269460046384353568138598567755392559653460949444557879120040796798142218939251844762461270251672399546774067275348291003962551964648742053215424620256999345448398805278592777049668281558312871773979931343097806878701114056030041506690476954254006592555275342579529625231194321357904668512121539514880704046969974898412095675082585315458267591016734924646294357666924293908418345508902112711075232047998775303603175363964055048589769318562104883659754974955561725694779754279606726358588862479198815999276839234952142017210593887371950645418417355912567987</span></span><br><span class="line">c14 = <span class="number">3788529784248255027081674540877016372807848222776887920453488878247137930578296797437647922494510483767651150492933356093288965943741570268943861987024276610712717409139946409513963043114463933146088430004237747163422802959250296602570649363016151581364006795894226599584708072582696996740518887606785460775851029814280359385763091078902301957226484620428513604630585131511167015763190591225884202772840456563643159507805711004113901417503751181050823638207803533111429510911616160851391754754434764819568054850823810901159821297849790005646102129354035735350124476838786661542089045509656910348676742844957008857457</span></span><br><span class="line"></span><br><span class="line">n15 = <span class="number">27545937603751737248785220891735796468973329738076209144079921449967292572349424539010502287564030116831261268197384650511043068738911429169730640135947800885987171539267214611907687570587001933829208655100828045651391618089603288456570334500533178695238407684702251252671579371018651675054368606282524673369983034682330578308769886456335818733827237294570476853673552685361689144261552895758266522393004116017849397346259119221063821663280935820440671825601452417487330105280889520007917979115568067161590058277418371493228631232457972494285014767469893647892888681433965857496916110704944758070268626897045014782837</span></span><br><span class="line">c15 = <span class="number">14069112970608895732417039977542732665796601893762401500878786871680645798754783315693511261740059725171342404186571066972546332813667711135661176659424619936101038903439144294886379322591635766682645179888058617577572409307484708171144488708410543462972008179994594087473935638026612679389759756811490524127195628741262871304427908481214992471182859308828778119005750928935764927967212343526503410515793717201360360437981322576798056276657140363332700714732224848346808963992302409037706094588964170239521193589470070839790404597252990818583717869140229811712295005710540476356743378906642267045723633874011649259842</span></span><br><span class="line"></span><br><span class="line">n16 = <span class="number">25746162075697911560263181791216433062574178572424600336856278176112733054431463253903433128232709054141607100891177804285813783247735063753406524678030561284491481221681954564804141454666928657549670266775659862814924386584148785453647316864935942772919140563506305666207816897601862713092809234429096584753263707828899780979223118181009293655563146526792388913462557306433664296966331469906428665127438829399703002867800269947855869262036714256550075520193125987011945192273531732276641728008406855871598678936585324782438668746810516660152018244253008092470066555687277138937298747951929576231036251316270602513451</span></span><br><span class="line">c16 = <span class="number">17344284860275489477491525819922855326792275128719709401292545608122859829827462088390044612234967551682879954301458425842831995513832410355328065562098763660326163262033200347338773439095709944202252494552172589503915965931524326523663289777583152664722241920800537867331030623906674081852296232306336271542832728410803631170229642717524942332390842467035143631504401140727083270732464237443915263865880580308776111219718961746378842924644142127243573824972533819479079381023103585862099063382129757560124074676150622288706094110075567706403442920696472627797607697962873026112240527498308535903232663939028587036724</span></span><br><span class="line"></span><br><span class="line">n17 = <span class="number">23288486934117120315036919418588136227028485494137930196323715336208849327833965693894670567217971727921243839129969128783853015760155446770590696037582684845937132790047363216362087277861336964760890214059732779383020349204803205725870225429985939570141508220041286857810048164696707018663758416807708910671477407366098883430811861933014973409390179948577712579749352299440310543689035651465399867908428885541237776143404376333442949397063249223702355051571790555151203866821867908531733788784978667478707672984539512431549558672467752712004519300318999208102076732501412589104904734983789895358753664077486894529499</span></span><br><span class="line">c17 = <span class="number">10738254418114076548071448844964046468141621740603214384986354189105236977071001429271560636428075970459890958274941762528116445171161040040833357876134689749846940052619392750394683504816081193432350669452446113285638982551762586656329109007214019944975816434827768882704630460001209452239162896576191876324662333153835533956600295255158377025198426950944040643235430211011063586032467724329735785947372051759042138171054165854842472990583800899984893232549092766400510300083585513014171220423103452292891496141806956300396540682381668367564569427813092064053993103537635994311143010708814851867239706492577203899024</span></span><br><span class="line"></span><br><span class="line">n18 = <span class="number">19591441383958529435598729113936346657001352578357909347657257239777540424811749817783061233235817916560689138344041497732749011519736303038986277394036718790971374656832741054547056417771501234494768509780369075443550907847298246275717420562375114406055733620258777905222169702036494045086017381084272496162770259955811174440490126514747876661317750649488774992348005044389081101686016446219264069971370646319546429782904810063020324704138495608761532563310699753322444871060383693044481932265801505819646998535192083036872551683405766123968487907648980900712118052346174533513978009131757167547595857552370586353973</span></span><br><span class="line">c18 = <span class="number">3834917098887202931981968704659119341624432294759361919553937551053499607440333234018189141970246302299385742548278589896033282894981200353270637127213483172182529890495903425649116755901631101665876301799865612717750360089085179142750664603454193642053016384714515855868368723508922271767190285521137785688075622832924829248362774476456232826885801046969384519549385428259591566716890844604696258783639390854153039329480726205147199247183621535172450825979047132495439603840806501254997167051142427157381799890725323765558803808030109468048682252028720241357478614704610089120810367192414352034177484688502364022887</span></span><br><span class="line"></span><br><span class="line">n19 = <span class="number">19254242571588430171308191757871261075358521158624745702744057556054652332495961196795369630484782930292003238730267396462491733557715379956969694238267908985251699834707734400775311452868924330866502429576951934279223234676654749272932769107390976321208605516299532560054081301829440688796904635446986081691156842271268059970762004259219036753174909942343204432795076377432107630203621754552804124408792358220071862369443201584155711893388877350138023238624566616551246804054720492816226651467017802504094070614892556444425915920269485861799532473383304622064493223627552558344088839860178294589481899206318863310603</span></span><br><span class="line">c19 = <span class="number">6790553533991297205804561991225493105312398825187682250780197510784765226429663284220400480563039341938599783346724051076211265663468643826430109013245014035811178295081939958687087477312867720289964506097819762095244479129359998867671811819738196687884696680463458661374310994610760009474264115750204920875527434486437536623589684519411519100170291423367424938566820315486507444202022408003879118465761273916755290898112991525546114191064022991329724370064632569903856189236177894007766690782630247443895358893983735822824243487181851098787271270256780891094405121947631088729917398317652320497765101790132679171889</span></span><br><span class="line"></span><br><span class="line">n20 = <span class="number">26809700251171279102974962949184411136459372267620535198421449833298448092580497485301953796619185339316064387798092220298630428207556482805739803420279056191194360049651767412572609187680508073074653291350998253938793269214230457117194434853888765303403385824786231859450351212449404870776320297419712486574804794325602760347306432927281716160368830187944940128907971027838510079519466846176106565164730963988892400240063089397720414921398936399927948235195085202171264728816184532651138221862240969655185596628285814057082448321749567943946273776184657698104465062749244327092588237927996419620170254423837876806659</span></span><br><span class="line">c20 = <span class="number">386213556608434013769864727123879412041991271528990528548507451210692618986652870424632219424601677524265011043146748309774067894985069288067952546139416819404039688454756044862784630882833496090822568580572859029800646671301748901528132153712913301179254879877441322285914544974519727307311002330350534857867516466612474769753577858660075830592891403551867246057397839688329172530177187042229028685862036140779065771061933528137423019407311473581832405899089709251747002788032002094495379614686544672969073249309703482556386024622814731015767810042969813752548617464974915714425595351940266077021672409858645427346</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">21</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="number">21</span>):</span><br><span class="line">        ni = <span class="built_in">eval</span>(<span class="string">&quot;n&quot;</span> + <span class="built_in">str</span>(i))</span><br><span class="line">        nj = <span class="built_in">eval</span>(<span class="string">&quot;n&quot;</span> + <span class="built_in">str</span>(j))</span><br><span class="line">        p = gcd(ni, nj)</span><br><span class="line">        <span class="keyword">if</span> p &gt; <span class="number">1</span>:</span><br><span class="line">            c = <span class="built_in">eval</span>(<span class="string">&quot;c&quot;</span> + <span class="built_in">str</span>(i))</span><br><span class="line">            q = ni // p</span><br><span class="line">            d = invert(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">            flag = long_to_bytes(<span class="built_in">pow</span>(c, d, ni))</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>flag{abdcbe5fd94e23b3de429223ab9c2fdf}</p><h3 id="爆破e"><a href="#爆破e" class="headerlink" title="爆破e"></a>爆破e</h3><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rsa</span>(<span class="params">n1, c1, n2, c2, n3, c3</span>):</span><br><span class="line">    M1 = n2 * n3</span><br><span class="line">    M2 = n1 * n3</span><br><span class="line">    M3 = n1 * n2</span><br><span class="line">    m_e = (c1 * M1 * invert(M1, n1) + c2 * M2 * invert(M2, n2) + c3 * M3 * invert(M3, n3)) % (n1 * n2 * n3)</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">        m = iroot(m_e, e)</span><br><span class="line">        <span class="keyword">if</span> m[<span class="number">1</span>]:</span><br><span class="line">            <span class="built_in">print</span>(long_to_bytes(m[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure><h4 id="buuctf-RSA4"><a href="#buuctf-RSA4" class="headerlink" title="buuctf RSA4"></a>buuctf RSA4</h4><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">N = 331310324212000030020214312244232222400142410423413104441140203003243002104333214202031202212403400220031202142322434104143104244241214204444443323000244130122022422310201104411044030113302323014101331214303223312402430402404413033243132101010422240133122211400434023222214231402403403200012221023341333340042343122302113410210110221233241303024431330001303404020104442443120130000334110042432010203401440404010003442001223042211442001413004 </span><br><span class="line">c = 310020004234033304244200421414413320341301002123030311202340222410301423440312412440240244110200112141140201224032402232131204213012303204422003300004011434102141321223311243242010014140422411342304322201241112402132203101131221223004022003120002110230023341143201404311340311134230140231412201333333142402423134333211302102413111111424430032440123340034044314223400401224111323000242234420441240411021023100222003123214343030122032301042243</span><br><span class="line"></span><br><span class="line">N = 302240000040421410144422133334143140011011044322223144412002220243001141141114123223331331304421113021231204322233120121444434210041232214144413244434424302311222143224402302432102242132244032010020113224011121043232143221203424243134044314022212024343100042342002432331144300214212414033414120004344211330224020301223033334324244031204240122301242232011303211220044222411134403012132420311110302442344021122101224411230002203344140143044114 </span><br><span class="line">c = 112200203404013430330214124004404423210041321043000303233141423344144222343401042200334033203124030011440014210112103234440312134032123400444344144233020130110134042102220302002413321102022414130443041144240310121020100310104334204234412411424420321211112232031121330310333414423433343322024400121200333330432223421433344122023012440013041401423202210124024431040013414313121123433424113113414422043330422002314144111134142044333404112240344</span><br><span class="line"></span><br><span class="line">N = 332200324410041111434222123043121331442103233332422341041340412034230003314420311333101344231212130200312041044324431141033004333110021013020140020011222012300020041342040004002220210223122111314112124333211132230332124022423141214031303144444134403024420111423244424030030003340213032121303213343020401304243330001314023030121034113334404440421242240113103203013341231330004332040302440011324004130324034323430143102401440130242321424020323 </span><br><span class="line">c = 10013444120141130322433204124002242224332334011124210012440241402342100410331131441303242011002101323040403311120421304422222200324402244243322422444414043342130111111330022213203030324422101133032212042042243101434342203204121042113212104212423330331134311311114143200011240002111312122234340003403312040401043021433112031334324322123304112340014030132021432101130211241134422413442312013042141212003102211300321404043012124332013240431242</span><br></pre></td></tr></table></figure><p>有相同的加密指数e，这里由中国剩余定理可以知道e&#x3D;3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rsa</span>(<span class="params">n1, c1, n2, c2, n3, c3</span>):</span><br><span class="line">    M1 = n2 * n3</span><br><span class="line">    M2 = n1 * n3</span><br><span class="line">    M3 = n1 * n2</span><br><span class="line">    m_e = (c1 * M1 * invert(M1, n1) + c2 * M2 * invert(M2, n2) + c3 * M3 * invert(M3, n3)) % (n1 * n2 * n3)</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">        m = iroot(m_e, e)</span><br><span class="line">        <span class="keyword">if</span> m[<span class="number">1</span>]:</span><br><span class="line">            <span class="built_in">print</span>(long_to_bytes(m[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n1 = <span class="number">331310324212000030020214312244232222400142410423413104441140203003243002104333214202031202212403400220031202142322434104143104244241214204444443323000244130122022422310201104411044030113302323014101331214303223312402430402404413033243132101010422240133122211400434023222214231402403403200012221023341333340042343122302113410210110221233241303024431330001303404020104442443120130000334110042432010203401440404010003442001223042211442001413004</span></span><br><span class="line">c1 = <span class="number">310020004234033304244200421414413320341301002123030311202340222410301423440312412440240244110200112141140201224032402232131204213012303204422003300004011434102141321223311243242010014140422411342304322201241112402132203101131221223004022003120002110230023341143201404311340311134230140231412201333333142402423134333211302102413111111424430032440123340034044314223400401224111323000242234420441240411021023100222003123214343030122032301042243</span></span><br><span class="line"></span><br><span class="line">n2 = <span class="number">302240000040421410144422133334143140011011044322223144412002220243001141141114123223331331304421113021231204322233120121444434210041232214144413244434424302311222143224402302432102242132244032010020113224011121043232143221203424243134044314022212024343100042342002432331144300214212414033414120004344211330224020301223033334324244031204240122301242232011303211220044222411134403012132420311110302442344021122101224411230002203344140143044114</span></span><br><span class="line">c2 = <span class="number">112200203404013430330214124004404423210041321043000303233141423344144222343401042200334033203124030011440014210112103234440312134032123400444344144233020130110134042102220302002413321102022414130443041144240310121020100310104334204234412411424420321211112232031121330310333414423433343322024400121200333330432223421433344122023012440013041401423202210124024431040013414313121123433424113113414422043330422002314144111134142044333404112240344</span></span><br><span class="line"></span><br><span class="line">n3 = <span class="number">332200324410041111434222123043121331442103233332422341041340412034230003314420311333101344231212130200312041044324431141033004333110021013020140020011222012300020041342040004002220210223122111314112124333211132230332124022423141214031303144444134403024420111423244424030030003340213032121303213343020401304243330001314023030121034113334404440421242240113103203013341231330004332040302440011324004130324034323430143102401440130242321424020323</span></span><br><span class="line">c3 = <span class="number">10013444120141130322433204124002242224332334011124210012440241402342100410331131441303242011002101323040403311120421304422222200324402244243322422444414043342130111111330022213203030324422101133032212042042243101434342203204121042113212104212423330331134311311114143200011240002111312122234340003403312040401043021433112031334324322123304112340014030132021432101130211241134422413442312013042141212003102211300321404043012124332013240431242</span></span><br><span class="line"></span><br><span class="line">n1 = <span class="built_in">int</span>(<span class="built_in">str</span>(n1), <span class="number">5</span>)</span><br><span class="line">c1 = <span class="built_in">int</span>(<span class="built_in">str</span>(c1), <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">n2 = <span class="built_in">int</span>(<span class="built_in">str</span>(n2), <span class="number">5</span>)</span><br><span class="line">c2 = <span class="built_in">int</span>(<span class="built_in">str</span>(c2), <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">n3 = <span class="built_in">int</span>(<span class="built_in">str</span>(n3), <span class="number">5</span>)</span><br><span class="line">c3 = <span class="built_in">int</span>(<span class="built_in">str</span>(c3), <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">rsa(n1, c1, n2, c2, n3, c3)</span><br></pre></td></tr></table></figure><p>flag: noxCTF{D4mn_y0u_h4s74d_wh47_4_b100dy_b4s74rd!}</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve.pyre</title>
      <link href="/2023/04/06/reserve-pyre/"/>
      <url>/2023/04/06/reserve-pyre/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="buuctf-pyre"><a href="#buuctf-pyre" class="headerlink" title="buuctf pyre"></a>buuctf pyre</h1><h3 id="先反编译"><a href="#先反编译" class="headerlink" title="先反编译"></a>先反编译</h3><p>我先在网站上反编译，反编译出来是这样的</p><p><img src="/2023/04/06/reserve-pyre/key1.png"></p><p>发现写脚本时直接提示是三个字符无法进行亦或操作，看了其他人的wp，发现根本不是这一串字符，网站上的反编译有错，那么可以直接在本地编译，用uncompyle6直接反编译，用法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uncompyle6 xxx.pyc &gt; xxx.py</span><br></pre></td></tr></table></figure><p>得到正确的反编译代码</p><p><img src="/2023/04/06/reserve-pyre/key2.png"></p><p>这里code的所有元素中最后两位是没有进行亦或操作的，前面的元素都是与后面的相邻元素进行亦或操作，那要怎么逆呢？先看个例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">code=[A,B,C,D,E,F]</span><br><span class="line">#进行操作</span><br><span class="line">code=[A^B,B^C,C^D,D^E,E,F]</span><br><span class="line">#要想重新逆回来，只能从D^E开始，依次与下一位做亦或运算</span><br><span class="line">code=[A^B^B,B^C^C,C^D^D,D^E^E,E,F]</span><br></pre></td></tr></table></figure><p>亦或解决后再看前面的取余运算，取余运算中有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(a+b)%c=a%c+b%c</span><br><span class="line">如果d=(a+b)%c</span><br><span class="line">那么b=(d-a)%c</span><br></pre></td></tr></table></figure><p>这样我们就可以直接得到脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">code = [<span class="string">&#x27;\x1f&#x27;</span>, <span class="string">&#x27;\x12&#x27;</span>, <span class="string">&#x27;\x1d&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;\x01&#x27;</span>, <span class="string">&#x27;\x06&#x27;</span>, <span class="string">&#x27;\x14&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;,&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;\x1b&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;\x01&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;\x13&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(code)-<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">    code[i]=<span class="built_in">chr</span>(<span class="built_in">ord</span>(code[i])^<span class="built_in">ord</span>(code[i+<span class="number">1</span>]))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(code)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>((<span class="built_in">ord</span>(code[i])-i)%<span class="number">128</span>),end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>最后得到flag：GWHT{Just_Re_1s_Ha66y!}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这道题中我对于异或运算和取余运算收获很大：</p><p>亦或运算不在赘诉，取余运算中，补充乘法情况：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果a*b%c=d</span></span><br><span class="line"><span class="comment">#那么在已知a为整数的情况下，要求出a，可以直接判断d/b是否为整数，如果不为整数，进行d+c，直到为整数为止，那么这个整数就是a</span></span><br><span class="line"><span class="keyword">while</span> d%b!=<span class="number">0</span>:</span><br><span class="line">    d+=c</span><br><span class="line">a=d/b</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve.简单注册器</title>
      <link href="/2023/04/06/reserve-%E7%AE%80%E5%8D%95%E6%B3%A8%E5%86%8C%E5%99%A8/"/>
      <url>/2023/04/06/reserve-%E7%AE%80%E5%8D%95%E6%B3%A8%E5%86%8C%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="buuctf-简单注册器"><a href="#buuctf-简单注册器" class="headerlink" title="buuctf 简单注册器"></a>buuctf 简单注册器</h1><h3 id="apk文件，直接扔进jadx-gui"><a href="#apk文件，直接扔进jadx-gui" class="headerlink" title="apk文件，直接扔进jadx-gui"></a>apk文件，直接扔进jadx-gui</h3><p><img src="/2023/04/06/reserve-%E7%AE%80%E5%8D%95%E6%B3%A8%E5%86%8C%E5%99%A8/key1.png"></p><p>打开main函数，直接就找到了有关flag的运算，跟着逻辑步骤直接写出脚本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> x[<span class="number">40</span>]=<span class="string">&quot;dd2940c04462b4dd7c450528835cca15&quot;</span>;</span><br><span class="line">    x[<span class="number">2</span>] = (<span class="type">char</span>) ((x[<span class="number">2</span>] + x[<span class="number">3</span>]) - <span class="number">50</span>);</span><br><span class="line">    x[<span class="number">4</span>] = (<span class="type">char</span>) ((x[<span class="number">2</span>] + x[<span class="number">5</span>]) - <span class="number">48</span>);</span><br><span class="line">    x[<span class="number">30</span>] = (<span class="type">char</span>) ((x[<span class="number">31</span>] + x[<span class="number">9</span>]) - <span class="number">48</span>);</span><br><span class="line">    x[<span class="number">14</span>] = (<span class="type">char</span>) ((x[<span class="number">27</span>] + x[<span class="number">28</span>]) - <span class="number">97</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;<span class="comment">//倒序</span></span><br><span class="line">        <span class="type">char</span> a = x[<span class="number">31</span> - i];</span><br><span class="line">        x[<span class="number">31</span> - i] = x[i];</span><br><span class="line">        x[i] = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,x);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后得到flag：flag{59acc538825054c7de4b26440c0999dd}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>简单的安卓逆向题目，注意运算就行。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve.刮开有奖</title>
      <link href="/2023/04/05/reserve-%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/"/>
      <url>/2023/04/05/reserve-%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="buuctf-刮开有奖"><a href="#buuctf-刮开有奖" class="headerlink" title="buuctf 刮开有奖"></a>buuctf 刮开有奖</h1><h3 id="首先查壳，发现无壳"><a href="#首先查壳，发现无壳" class="headerlink" title="首先查壳，发现无壳"></a>首先查壳，发现无壳</h3><h3 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h3><p><img src="/2023/04/05/reserve-%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/key1.png"></p><p>首先看到的是v7，v7长度为8，但这里有10个字符，那说明v7是进行了某种运算，但是10个字符中就前两个有v7的标识，那后面的字符和v7有什么关系呢，想不通，看了大佬的wp，大佬说这里实际上就是相当于一个v7的数组，后面的v8到v16都是依次加上了四个字节得到的，v7[0]相当于就是索引头，点进sub_4010F0函数，这里函数的运算可以直接用伪代码写出来，但是注意，由于源代码中传入的v7是int类型的，而写的伪代码传入的v7是char类型的，所以应该把源代码中的result乘以4和i乘以4分别改为result和i,伪代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sub_4010F0</span><span class="params">(<span class="type">char</span> *a1, <span class="type">int</span> a2, <span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// edx</span></span><br><span class="line"></span><br><span class="line">  result = a3;</span><br><span class="line">  <span class="keyword">for</span> ( i = a2; i &lt;= a3; a2 = i )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = i;</span><br><span class="line">    v6 = a1[i];</span><br><span class="line">    <span class="keyword">if</span> ( a2 &lt; result &amp;&amp; i &lt; result )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v6 &gt; a1[result])</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          ++i;</span><br><span class="line">          a1[v5]= a1[result];</span><br><span class="line">          <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">while</span> (a1[i]&lt;= v6 )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> ( ++i &gt;= result )</span><br><span class="line">              <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          v5 = i;</span><br><span class="line">          a1[result] = a1[i];</span><br><span class="line">        &#125;</span><br><span class="line">        --result;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( i &lt; result );</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_13:</span><br><span class="line">    a1[result] = v6;</span><br><span class="line">    sub_4010F0(a1, a2, i - <span class="number">1</span>);</span><br><span class="line">    result = a3;</span><br><span class="line">    ++i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a[]=<span class="string">&quot;ZJSECaNH3ng&quot;</span>;</span><br><span class="line">    sub_4010F0(a,<span class="number">0</span>,<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到加密后字符串：3CEHJNSZagn</p><p>接下来，根据提示，需要将string的576位和324位分别放进sub_401000中进行加密</p><p><img src="/2023/04/05/reserve-%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/key2.png"></p><p>发现这个函数里既进行了位运算又进行了与运算，所以推测这是一个base64加密，毕竟base64加密很常用</p><p>分别将ak1w和V1Ax进行base64加密，得到jMP和WP1，现在只需要确定前两位就行了，通过if语句得知，前两位就是加密函数得到字符进行运算，直接写出脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">val1=<span class="string">&quot;WP1&quot;</span></span><br><span class="line">val2=<span class="string">&quot;jMp&quot;</span></span><br><span class="line">v7=<span class="string">&quot;3CEHJNSZagn&quot;</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line">flag=<span class="built_in">chr</span>(<span class="built_in">ord</span>(v7[<span class="number">0</span>])+<span class="number">34</span>)+v7[<span class="number">4</span>]+val1+val2</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>最后得到flag：flag{UJWP1jMp}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>两个加密函数分别对不同部位加密，要注意传入的参数类型。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve.JustRE</title>
      <link href="/2023/04/04/reserve-JustRE/"/>
      <url>/2023/04/04/reserve-JustRE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="buuctf-BJDCTF2022-JustRE"><a href="#buuctf-BJDCTF2022-JustRE" class="headerlink" title="buuctf [BJDCTF2022]JustRE"></a>buuctf [BJDCTF2022]JustRE</h1><h3 id="首先查壳，无壳"><a href="#首先查壳，无壳" class="headerlink" title="首先查壳，无壳"></a>首先查壳，无壳</h3><h3 id="方法1：扔进ida"><a href="#方法1：扔进ida" class="headerlink" title="方法1：扔进ida"></a>方法1：扔进ida</h3><p><img src="/2023/04/04/reserve-JustRE/key4.png"></p><p>找到有flag的函数后直接给了flag</p><h3 id="方法2：OD动态调试"><a href="#方法2：OD动态调试" class="headerlink" title="方法2：OD动态调试"></a>方法2：OD动态调试</h3><p><img src="/2023/04/04/reserve-JustRE/key1.png"></p><p>找到有flag关键字符的代码，代码意思就是在地址0x40137A处得到点击次数，在地址0x401385处回显提示点击次数，在地址0x401398处会将次数与0x4E1F相比较，如果相等，则进入函数输出flag，所以只需要在地址0x40137A处将次数修改即可，但要注意，在0x401390处次数会加一，所以我们修改的次数应该是0x4E1F-1，即：0x4E1E</p><p><img src="/2023/04/04/reserve-JustRE/key2.png"></p><p>最后运行程序得到flag</p><p><img src="/2023/04/04/reserve-JustRE/key3.png"></p><p>但在buuctf上的flag为：flag{1999902069a45792d233ac}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>按键次数爆破类题型，找到关键的寄存器eax的值，修改正确即可。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve.lunck_guy</title>
      <link href="/2023/04/03/reserve-lunck-guy/"/>
      <url>/2023/04/03/reserve-lunck-guy/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="buuctf-GXYCTF2019-luck-guy"><a href="#buuctf-GXYCTF2019-luck-guy" class="headerlink" title="buuctf [GXYCTF2019]luck_guy"></a>buuctf [GXYCTF2019]luck_guy</h1><h3 id="首先查壳，无壳"><a href="#首先查壳，无壳" class="headerlink" title="首先查壳，无壳"></a>首先查壳，无壳</h3><h3 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h3><p><img src="/2023/04/03/reserve-lunck-guy/key1.png"></p><p>这里发现s就是flag，flag是由f1和f2两部分组成，点进f1，得到“GXY{do_not_”，在情况4中发现关键字符，但是这是小端储存，所以是相反的，情况4和5实际上是相关的，情况4提供的字符拿到情况5中做运算，最后得到的字符才是目标字符，那么直接写出脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">key=[<span class="number">0x69</span>,<span class="number">0x63</span>,<span class="number">0x75</span>,<span class="number">0x67</span>,<span class="number">0x60</span>,<span class="number">0x6F</span>,<span class="number">0x66</span>,<span class="number">0x7F</span>]</span><br><span class="line"></span><br><span class="line">flag=<span class="string">&quot;GXY&#123;do_not_&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">1</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(key[i]-<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(key[i]-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>得到flag：GXY{do_not_hate_me}</p><p>但是在buuctf中flag为flag{do_not_hate_me}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>依然是考小端储存的题目，记得考虑运算逻辑。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve.SimpleRev</title>
      <link href="/2023/04/01/reserve-SimpleRev/"/>
      <url>/2023/04/01/reserve-SimpleRev/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="buuctf-SimpleRev"><a href="#buuctf-SimpleRev" class="headerlink" title="buuctf SimpleRev"></a>buuctf SimpleRev</h1><h3 id="首先查壳，无壳"><a href="#首先查壳，无壳" class="headerlink" title="首先查壳，无壳"></a>首先查壳，无壳</h3><h3 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h3><p><img src="/2023/04/01/reserve-SimpleRev/key1.png"></p><p>发现v1就是flag，但要在key与text两个字符串作用下得到，两个字符串都是由两部分组成，这里需要注意，第一部分是直接在内存中查看的所以就是原字符串，第二部分直接写在代码中，由于在32位机器中是小端储存，所以储存的第二部分字符串应是颠倒的，即：key:ADSFKNDCLS   text:killshadow</p><p><img src="/2023/04/01/reserve-SimpleRev/key2.png"></p><p>接下来就是在所以字母中寻找满足运算的字母，那么就可以直接暴力破解，找出每第一个满足的字母</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">key=<span class="string">&quot;ADSFKNDCLS&quot;</span></span><br><span class="line">str2=<span class="string">&quot;killshadow&quot;</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line">val=<span class="string">&quot;&quot;</span></span><br><span class="line">v3=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)): <span class="comment">#将key转化为小写</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(key[v3 % <span class="built_in">len</span>(key)]) &gt; <span class="number">64</span> <span class="keyword">and</span> <span class="built_in">ord</span>(key[v3 % <span class="built_in">len</span>(key)]) &lt;= <span class="number">90</span>:</span><br><span class="line">        val+= <span class="built_in">chr</span>(<span class="built_in">ord</span>(key[v3 % <span class="built_in">len</span>(key)]) + <span class="number">32</span>)</span><br><span class="line">        v3=v3+<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(val)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(str2)):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65</span>,<span class="number">123</span>): <span class="comment">#暴力破解，找到每次第一个满足flag的字符，从A找到z</span></span><br><span class="line">        <span class="keyword">if</span> str2[j]==<span class="built_in">chr</span>((i-<span class="number">39</span>-<span class="built_in">ord</span>(val[j])+<span class="number">97</span>)%<span class="number">26</span>+<span class="number">97</span>):</span><br><span class="line">            flag+=<span class="built_in">chr</span>(i)</span><br><span class="line">            <span class="keyword">break</span> <span class="comment">#找到一个就开始新循环</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;flag&#123;&quot;</span>+flag+<span class="string">&quot;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><p>得到flag：flag{KLDQCUDFZO}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>注意32位机器的小端储存，其实际储存是颠倒的。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve.不一样的flag</title>
      <link href="/2023/04/01/reserve-%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84flag/"/>
      <url>/2023/04/01/reserve-%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84flag/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="buuctf-不一样的flag"><a href="#buuctf-不一样的flag" class="headerlink" title="buuctf 不一样的flag"></a>buuctf 不一样的flag</h1><h3 id="首先查壳，无壳"><a href="#首先查壳，无壳" class="headerlink" title="首先查壳，无壳"></a>首先查壳，无壳</h3><h3 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h3><p><img src="/2023/04/01/reserve-%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84flag/%E5%8F%AF%E4%BB%A5.png"></p><p>打开主函数一看，发现这是一道非常常规的迷宫题，那么就只需要走出迷宫即可，开始的字符串就是迷宫，*是迷宫起点，#是迷宫终点</p><p><img src="/2023/04/01/reserve-%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84flag/flag.png"></p><p>最后得到flag：flag{222441144222}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>典型迷宫题，跟着提示步骤前进即可。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve.reserve3</title>
      <link href="/2023/03/31/reserve-reserve3/"/>
      <url>/2023/03/31/reserve-reserve3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="buuctf-reserve3"><a href="#buuctf-reserve3" class="headerlink" title="buuctf reserve3"></a>buuctf reserve3</h1><h3 id="首先查壳，无壳"><a href="#首先查壳，无壳" class="headerlink" title="首先查壳，无壳"></a>首先查壳，无壳</h3><h3 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h3><p><img src="/2023/03/31/reserve-reserve3/key1.png"></p><p>这里可以通过提示的Str2把Destination逆出来</p><p><img src="/2023/03/31/reserve-reserve3/key2.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">val=[<span class="number">0x65</span>, <span class="number">0x33</span>, <span class="number">0x6E</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x49</span>, <span class="number">0x48</span>, <span class="number">0x39</span>, <span class="number">0x62</span>, <span class="number">0x5F</span>,</span><br><span class="line">  <span class="number">0x43</span>, <span class="number">0x40</span>, <span class="number">0x6E</span>, <span class="number">0x40</span>, <span class="number">0x64</span>, <span class="number">0x48</span>]</span><br><span class="line"></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(val)):</span><br><span class="line">    val[i]-=i</span><br><span class="line">    flag+=<span class="built_in">chr</span>(val[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>最后得到e2lfbDB2ZV95b3V9，但这并不是flag，因为前面还有一个加密函数，我也没弄懂这是什么加密，在大牛博客下知道了这是base64加密，那么我们就只需要把字符通过base64解密即可，得到flag：flag{i_l0ve_you}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>对于这些加密方式代码还是不熟悉，在不知道加密方式时，可以带入常用的几种加密中。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve.xor</title>
      <link href="/2023/03/31/reserve-xor/"/>
      <url>/2023/03/31/reserve-xor/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="buuctf-xor"><a href="#buuctf-xor" class="headerlink" title="buuctf xor"></a>buuctf xor</h1><h3 id="首先查壳，无壳"><a href="#首先查壳，无壳" class="headerlink" title="首先查壳，无壳"></a>首先查壳，无壳</h3><h3 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h3><p><img src="/2023/03/31/reserve-xor/QQ%E6%88%AA%E5%9B%BE20230331221744.png"></p><p>发现只需要将提示字符串每个字符与上一个字符做亦或运算即可逆出flag</p><p>跟进global得到提示字符串</p><p><img src="/2023/03/31/reserve-xor/key2.png"></p><p>逆出脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">val=[<span class="number">0x66</span>, <span class="number">0x0A</span>, <span class="number">0x6B</span>, <span class="number">0x0C</span>, <span class="number">0x77</span>, <span class="number">0x26</span>, <span class="number">0x4F</span>, <span class="number">0x2E</span>, <span class="number">0x40</span>, <span class="number">0x11</span>,</span><br><span class="line">  <span class="number">0x78</span>, <span class="number">0x0D</span>, <span class="number">0x5A</span>, <span class="number">0x3B</span>, <span class="number">0x55</span>, <span class="number">0x11</span>, <span class="number">0x70</span>, <span class="number">0x19</span>, <span class="number">0x46</span>, <span class="number">0x1F</span>,</span><br><span class="line">  <span class="number">0x76</span>, <span class="number">0x22</span>, <span class="number">0x4D</span>, <span class="number">0x23</span>, <span class="number">0x44</span>, <span class="number">0x0E</span>, <span class="number">0x67</span>, <span class="number">0x06</span>, <span class="number">0x68</span>, <span class="number">0x0F</span>,</span><br><span class="line">  <span class="number">0x47</span>, <span class="number">0x32</span>, <span class="number">0x4F</span>]</span><br><span class="line"></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(val)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>(val[i]^val[i-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(val[<span class="number">0</span>])+flag)</span><br></pre></td></tr></table></figure><p>最后flag：flag{QianQiuWanDai_YiTongJiangHu}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>简单的亦或操作。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>顺序淘汰问题</title>
      <link href="/2023/03/30/%E9%A1%BA%E5%BA%8F%E6%B7%98%E6%B1%B0%E9%97%AE%E9%A2%98/"/>
      <url>/2023/03/30/%E9%A1%BA%E5%BA%8F%E6%B7%98%E6%B1%B0%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="顺序淘汰问题"><a href="#顺序淘汰问题" class="headerlink" title="顺序淘汰问题"></a>顺序淘汰问题</h1><p>问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">13个人围成一圈，从第1个人开始顺序报号1、2、3，凡报到3的人退出圈子。找出最后留在圈子里的人原来的序号。要求用结构体编程实现。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">***输出提示：&quot;\n出圈成员及顺序：&quot;</span><br><span class="line">***输出格式：&quot;%3d&quot;</span><br><span class="line">***输出提示：&quot;\n最后的成员是：&quot;</span><br><span class="line">***输出格式：&quot;%3d&quot;</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">    </span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Node *head,*p,*q;<span class="comment">//设置指针，用来索引链表</span></span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    head=<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    head-&gt;num=<span class="number">1</span>;</span><br><span class="line">    p=head;</span><br><span class="line">    <span class="comment">//初始化链表</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=<span class="number">13</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        q=<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        p-&gt;next=q;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        p-&gt;num=i;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;next=head;<span class="comment">//将链表连成环</span></span><br><span class="line">    p=head;<span class="comment">//将索引指针指向链表头</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n出圈成员及顺序：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">12</span>;i++)<span class="comment">//进行12次循环，淘汰12名选手</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;<span class="number">3</span>;j++)<span class="comment">//从第一个开始，连续跳两次相当于就数到了三</span></span><br><span class="line">        &#123;</span><br><span class="line">            q=p;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,p-&gt;num);</span><br><span class="line">        q-&gt;next=p-&gt;next;<span class="comment">//将报三的数前后连接，使链表跳过三</span></span><br><span class="line">        <span class="built_in">free</span>(p);<span class="comment">//将数到三的成员free掉</span></span><br><span class="line">        p=q-&gt;next;<span class="comment">//重新指向下一位</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n最后的成员是：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,p-&gt;num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>链表的基本运用。</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言实例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve.新年快乐</title>
      <link href="/2023/03/30/reserve-%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/"/>
      <url>/2023/03/30/reserve-%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="buuctf-新年快乐"><a href="#buuctf-新年快乐" class="headerlink" title="buuctf 新年快乐"></a>buuctf 新年快乐</h1><h3 id="首先查壳"><a href="#首先查壳" class="headerlink" title="首先查壳"></a>首先查壳</h3><p><img src="/2023/03/30/reserve-%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/key2.png"></p><p>发现有UPX壳</p><p>直接扔进虚拟机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upx -d 文件名</span><br></pre></td></tr></table></figure><p>将文件的壳脱去，直接扔回主机</p><h3 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h3><p><img src="/2023/03/30/reserve-%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/key1.png"></p><p>直接就看到了flag：flag{HappyNewYear!}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>直接脱壳找flag，签到题。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve.reserve2</title>
      <link href="/2023/03/30/reserve-reserve2/"/>
      <url>/2023/03/30/reserve-reserve2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="buuctf-reserve2"><a href="#buuctf-reserve2" class="headerlink" title="buuctf reserve2"></a>buuctf reserve2</h1><h3 id="首先查壳，无壳"><a href="#首先查壳，无壳" class="headerlink" title="首先查壳，无壳"></a>首先查壳，无壳</h3><h3 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h3><p><img src="/2023/03/30/reserve-reserve2/key2.png"></p><p>这里发现flag直接跟进，但要小心当flag字符为’i’或’r’时，应该换为’1’</p><p><img src="/2023/03/30/reserve-reserve2/key1.png"></p><p>拿到flag数据直接将其用字符形式逆出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">val=[<span class="number">0x7B</span>, <span class="number">0x68</span>, <span class="number">0x61</span>, <span class="number">0x63</span>, <span class="number">0x6B</span>, <span class="number">0x69</span>, <span class="number">0x6E</span>, <span class="number">0x67</span>, <span class="number">0x5F</span>, <span class="number">0x66</span>,</span><br><span class="line">  <span class="number">0x6F</span>, <span class="number">0x72</span>, <span class="number">0x5F</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, <span class="number">0x6E</span>, <span class="number">0x7D</span>]</span><br><span class="line"></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(val)):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">chr</span>(val[i])==<span class="string">&#x27;i&#x27;</span> <span class="keyword">or</span> <span class="built_in">chr</span>(val[i])==<span class="string">&#x27;r&#x27;</span>:</span><br><span class="line">        flag+=<span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(val[i])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;flag&quot;</span>+flag)</span><br></pre></td></tr></table></figure><p>最后得到flag：flag{hack1ng_fo1_fun}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>直接得到flag，没有技巧，签到题。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之EASYHOOK</title>
      <link href="/2023/03/27/reserve%E4%B9%8BEASYHOOK/"/>
      <url>/2023/03/27/reserve%E4%B9%8BEASYHOOK/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="攻防世界-EASYHOOK"><a href="#攻防世界-EASYHOOK" class="headerlink" title="攻防世界 EASYHOOK"></a>攻防世界 EASYHOOK</h1><h3 id="首先查壳发现无壳"><a href="#首先查壳发现无壳" class="headerlink" title="首先查壳发现无壳"></a>首先查壳发现无壳</h3><h3 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h3><p><img src="/2023/03/27/reserve%E4%B9%8BEASYHOOK/key1.png"></p><p>没找到真正的加密函数，只是看到了一堆系统函数，最后在sub_401000发现了真正的加密函数</p><p><img src="/2023/03/27/reserve%E4%B9%8BEASYHOOK/key2.png"></p><p>将字符串提取后进行上面操作的逆向操作，最后得到的a1就是flag，编写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">val=[<span class="number">0x61</span>, <span class="number">0x6A</span>, <span class="number">0x79</span>, <span class="number">0x67</span>, <span class="number">0x6B</span>, <span class="number">0x46</span>, <span class="number">0x6D</span>, <span class="number">0x2E</span>, <span class="number">0x7F</span>, <span class="number">0x5F</span>,</span><br><span class="line">  <span class="number">0x7E</span>, <span class="number">0x2D</span>, <span class="number">0x53</span>, <span class="number">0x56</span>, <span class="number">0x7B</span>, <span class="number">0x38</span>, <span class="number">0x6D</span>, <span class="number">0x4C</span>, <span class="number">0x6E</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">val[<span class="number">18</span>]=val[<span class="number">18</span>]^<span class="number">0x13</span></span><br><span class="line">flag=<span class="built_in">list</span>(<span class="string">&quot;-------------------&quot;</span>)<span class="comment">#因为后面需要直接对第19号元素赋值，所有这里可以假定一个初值</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">  v3=val[i]^i</span><br><span class="line">  <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">1</span>:</span><br><span class="line">    flag[i]=<span class="built_in">chr</span>(v3+i)<span class="comment">#不能用val[i]来代替flag[i]，如果代替后，在运算的同时val的值在改变，而val是参与基本运算的，替代后得不到最后的flag</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    flag[i+<span class="number">2</span>]=<span class="built_in">chr</span>(v3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">19</span>):</span><br><span class="line">  <span class="built_in">print</span>(flag[i],end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>最后发现逆出来的flag：-lag{Ho0k_w1th_Fun} 这里的flag并不是对的，我们发现一号元素并没有运算，但我们通过固定格式可以得到</p><p>flag{Ho0k_w1th_Fun} </p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>对于hook题型，一般需要正确找到加密函数，找到后一般逻辑很简单，难点在于找到函数。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之reserveMe-120</title>
      <link href="/2023/03/27/reserve%E4%B9%8BreserveMe-120/"/>
      <url>/2023/03/27/reserve%E4%B9%8BreserveMe-120/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="攻防世界-reserveMe-120"><a href="#攻防世界-reserveMe-120" class="headerlink" title="攻防世界 reserveMe-120"></a>攻防世界 reserveMe-120</h1><h3 id="首先查壳发现无壳"><a href="#首先查壳发现无壳" class="headerlink" title="首先查壳发现无壳"></a>首先查壳发现无壳</h3><h3 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h3><p><img src="/2023/03/27/reserve%E4%B9%8BreserveMe-120/key1.png"></p><p>分析代码，发现v11应该就是flag的字符串但是后面操作都没出现v11，那么问题应该出现在sub_401000中</p><p><img src="/2023/03/27/reserve%E4%B9%8BreserveMe-120/key2.png"></p><p>这里根本就看不懂了，应该是某种加密，看来大佬的博客，大佬说这是base64解密，那么应该就是把v11进行base64解密后赋值给v12</p><p>那么就可以将v12原始值逆出来了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">val=<span class="string">&quot;you_know_how_to_remove_junk_code&quot;</span></span><br><span class="line"></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(val)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(val[i])^<span class="number">0x25</span>)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(<span class="built_in">bytes</span>(flag,encoding=<span class="string">&#x27;utf-8&#x27;</span>)))</span><br></pre></td></tr></table></figure><p>这里需要注意的是base64不能直接识别字符串，要先把字符串转换为byte类型再进行加密</p><p>bytes()函数用法：<a href="http://c.biancheng.net/view/2175.html">http://c.biancheng.net/view/2175.html</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>对于这些加密函数非常不熟，还是得先对密码学有一定基础。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之debug</title>
      <link href="/2023/03/26/reserve%E4%B9%8Bdebug/"/>
      <url>/2023/03/26/reserve%E4%B9%8Bdebug/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="攻防世界-debug"><a href="#攻防世界-debug" class="headerlink" title="攻防世界 debug"></a>攻防世界 debug</h1><h3 id="首先查壳"><a href="#首先查壳" class="headerlink" title="首先查壳"></a>首先查壳</h3><p><img src="/2023/03/26/reserve%E4%B9%8Bdebug/pack.png"></p><p>发现无壳，并且是.NET文件，此时ida就失效了</p><h3 id="用dbSpy打开"><a href="#用dbSpy打开" class="headerlink" title="用dbSpy打开"></a>用dbSpy打开</h3><p>点击启动并将断点设置在入口点，发现了“u got it”的字样，那么就在这里的条件语句处设置断点，进行动态调试</p><p><img src="/2023/03/26/reserve%E4%B9%8Bdebug/flag.png"></p><p>随便输入一个值直接得到flag，flag{967DDDFBCD32C1F53527C221D9E40A0B}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>又是一种新工具的使用。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用梯形法求函数积分</title>
      <link href="/2023/03/26/%E7%94%A8%E6%A2%AF%E5%BD%A2%E6%B3%95%E6%B1%82%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86/"/>
      <url>/2023/03/26/%E7%94%A8%E6%A2%AF%E5%BD%A2%E6%B3%95%E6%B1%82%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="梯形法求函数积分"><a href="#梯形法求函数积分" class="headerlink" title="梯形法求函数积分"></a>梯形法求函数积分</h1><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">按如下函数原型，采用梯形法编程实现(分成100个小梯形,再求这100个梯形面积的和)，在积分区间[a,b]内计算函数y1=∫(1+x*x)dx (从0积到1）和y2=∫x/(1+x*x)dx (从0积到3）的定积分。其中，指向函数的指针变量f用于接收被积函数的入口地址。</span><br><span class="line"></span><br><span class="line">Integral(float (*f)(float), float a, float b);</span><br><span class="line"></span><br><span class="line">**输出格式要求：&quot;y1=%f\ny2=%f\n&quot;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//将两个积分函数运算写出</span></span><br><span class="line"><span class="type">float</span> <span class="title function_">func1</span><span class="params">(<span class="type">float</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>+x*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">float</span> <span class="title function_">func2</span><span class="params">(<span class="type">float</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x/(<span class="number">1</span>+x*x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运用梯形法求积分</span></span><br><span class="line"><span class="type">float</span> <span class="title function_">Integral</span><span class="params">(<span class="type">float</span> (*f)(<span class="type">float</span>), <span class="type">float</span> a, <span class="type">float</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> sum=<span class="number">0</span>,h;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    h=(a+b)/<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum+=(f(a+i*h)+f(a+(i+<span class="number">1</span>)*h))*h/<span class="number">2</span>;<span class="comment">//上底加下底乘以高除以2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> y1,y2;</span><br><span class="line">    y1=Integral(func1,<span class="number">0.0</span>,<span class="number">1.0</span>);</span><br><span class="line">    y2=Integral(func2,<span class="number">0.0</span>,<span class="number">3.0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;y1=%f\ny2=%f\n&quot;</span>,y1,y2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之crackme</title>
      <link href="/2023/03/24/reserve%E4%B9%8Bcrackme/"/>
      <url>/2023/03/24/reserve%E4%B9%8Bcrackme/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="攻防世界-crackme"><a href="#攻防世界-crackme" class="headerlink" title="攻防世界 crackme"></a>攻防世界 crackme</h1><h3 id="首先查壳"><a href="#首先查壳" class="headerlink" title="首先查壳"></a>首先查壳</h3><p><img src="/2023/03/24/reserve%E4%B9%8Bcrackme/key1.png"></p><p>发现是北斗壳</p><h3 id="扔进万能脱壳工具进行脱壳"><a href="#扔进万能脱壳工具进行脱壳" class="headerlink" title="扔进万能脱壳工具进行脱壳"></a>扔进万能脱壳工具进行脱壳</h3><p>脱壳完毕后文件打不开了，把没脱壳的文件扔进imporREC，先后点击自动搜索，获取输入表，然后修复转入文件，选择脱壳后的文件，这样就会生成一个脱壳后完好的文件</p><h3 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h3><p><img src="/2023/03/24/reserve%E4%B9%8Bcrackme/%E5%8F%AF%E4%BB%A5.png"></p><p>发现flag就是Buffer，跟着下面操作写脚本即可，但要注意的是</p><p><img src="/2023/03/24/reserve%E4%B9%8Bcrackme/key3.png"></p><p>byte_402130的值除了’his_is_no_flag’还有一个0x74在前面</p><h3 id="写出脚本"><a href="#写出脚本" class="headerlink" title="写出脚本"></a>写出脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">val3=[]</span><br><span class="line"></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(val1),<span class="number">4</span>):</span><br><span class="line">    val3.append(val1[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(val3)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>(val3[i]^<span class="built_in">ord</span>(val2[i%<span class="number">16</span>]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="built_in">print</span>(val3)</span><br></pre></td></tr></table></figure><p>得到flag：flag{59b8ed8f-af22-11e7-bb4a-3cf862d1ee75}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>适当运用脱壳工具，注意字符串完整性。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tomorrow</title>
      <link href="/2023/03/22/tomorrow/"/>
      <url>/2023/03/22/tomorrow/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="输出明天的时间"><a href="#输出明天的时间" class="headerlink" title="输出明天的时间"></a>输出明天的时间</h1><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">给定如下定义：</span><br><span class="line">struct date_rec</span><br><span class="line">  &#123;</span><br><span class="line">    int day ;</span><br><span class="line">    int month ;</span><br><span class="line">    int year ;</span><br><span class="line">  &#125; ;</span><br><span class="line">  struct date_rec current_date ;</span><br><span class="line">写一个程序包含如下的函数，完成：</span><br><span class="line">(a) 输入current_date的值：</span><br><span class="line">void input_date(struct date_rec *current_date)</span><br><span class="line">(b) 将current_date增加1天：</span><br><span class="line">void increment_date(struct date_rec *current_date)</span><br><span class="line">(c) 显示current_date的值：</span><br><span class="line">void output_date(struct date_rec *current_date)</span><br><span class="line">考虑每个月的实际天数，同时也考虑闰年的情况。</span><br><span class="line"></span><br><span class="line">**输入格式要求：&quot;%d%d%d&quot; 提示信息：&quot;请输入当前日期（年 月 日）：&quot;</span><br><span class="line">**输出格式要求：&quot;当前日期：%d年%d月%d日！&quot; （加1天后的新日期）</span><br><span class="line"></span><br><span class="line">程序运行示例：</span><br><span class="line">请输入当前日期（年 月 日）：2020 5 20</span><br><span class="line">当前日期：2020年5月21日！</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">date_rec</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="type">int</span> day ;</span><br><span class="line">    <span class="type">int</span> month ;</span><br><span class="line">    <span class="type">int</span> year ;</span><br><span class="line">  &#125; ;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">input_date</span><span class="params">(<span class="keyword">struct</span> date_rec *current_date)</span>;<span class="comment">//今天的时间</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">increment_date</span><span class="params">(<span class="keyword">struct</span> date_rec *current_date)</span>;<span class="comment">//计算明天的时间</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">output_date</span><span class="params">(<span class="keyword">struct</span> date_rec *current_date)</span>;<span class="comment">//输出明天的时间</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">date_rec</span> *<span class="title">today</span>=</span><span class="built_in">malloc</span>(<span class="number">50</span>*<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    input_date(today);</span><br><span class="line">    increment_date(today);</span><br><span class="line">    output_date(today);</span><br><span class="line">    <span class="built_in">free</span>(today);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">input_date</span><span class="params">(<span class="keyword">struct</span> date_rec *current_date)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入当前日期（年 月 日）：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;current_date-&gt;year,&amp;current_date-&gt;month,&amp;current_date-&gt;day);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">increment_date</span><span class="params">(<span class="keyword">struct</span> date_rec *current_date)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(current_date-&gt;month==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(current_date-&gt;year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;current_date-&gt;year%<span class="number">100</span>!=<span class="number">0</span>||current_date-&gt;year%<span class="number">400</span>==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(current_date-&gt;day==<span class="number">29</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                current_date-&gt;day=<span class="number">1</span>;</span><br><span class="line">                current_date-&gt;month+=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            current_date-&gt;day+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(current_date-&gt;day==<span class="number">28</span>)</span><br><span class="line">            &#123;</span><br><span class="line">            current_date-&gt;day=<span class="number">1</span>;</span><br><span class="line">            current_date-&gt;month+=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            current_date-&gt;day+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(current_date-&gt;month==<span class="number">1</span>||current_date-&gt;month==<span class="number">3</span>||current_date-&gt;month==<span class="number">5</span>||current_date-&gt;month==<span class="number">7</span>||current_date-&gt;month==<span class="number">8</span>||current_date-&gt;month==<span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(current_date-&gt;day==<span class="number">31</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            current_date-&gt;day=<span class="number">1</span>;</span><br><span class="line">            current_date-&gt;month+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        current_date-&gt;day+=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(current_date-&gt;month==<span class="number">12</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(current_date-&gt;day==<span class="number">31</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            current_date-&gt;day=<span class="number">1</span>;</span><br><span class="line">            current_date-&gt;month=<span class="number">1</span>;</span><br><span class="line">            current_date-&gt;year+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        current_date-&gt;day+=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(current_date-&gt;day==<span class="number">30</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            current_date-&gt;day=<span class="number">1</span>;</span><br><span class="line">            current_date-&gt;month+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        current_date-&gt;day+=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">output_date</span><span class="params">(<span class="keyword">struct</span> date_rec *current_date)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;当前日期：%d年%d月%d日!&quot;</span>,current_date-&gt;year,current_date-&gt;month,current_date-&gt;day);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构体的基本运用。</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言实例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>卡布列克运算</title>
      <link href="/2023/03/22/%E5%8D%A1%E5%B8%83%E5%88%97%E5%85%8B%E8%BF%90%E7%AE%97/"/>
      <url>/2023/03/22/%E5%8D%A1%E5%B8%83%E5%88%97%E5%85%8B%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="验证卡布列克运算"><a href="#验证卡布列克运算" class="headerlink" title="验证卡布列克运算"></a>验证卡布列克运算</h1><p>验证卡布列克运算。即：任意一个四位数，只要它们各个位上的数字是不全相同的，就有这样的规律：</p><p>（1）将组成该四位数的四个数字由大到小排列，形成由这四个数字构成的最大的四位数；</p><p>（2）将组成该四位数的四个数字由小到大排列，形成由这四个数字构成的最小的四位数（如果四个数字中含有0，则得到的数不足四位）；</p><p>（3）求两个数的差，得到一个新的四位数（高位零保留）。</p><p>重复以上过程，最后得到的结果总是6174。这个数被称为卡布列克常数。请编写一个递归函数，完成以上的卡布列克运算。</p><p>输入格式要求：”%d” 提示信息：”Enter number:”</p><p>输出格式要求：” [%d]:%d-%d&#x3D;%d\n”</p><p>程序运行示例如下：</p><p>Enter number: 1234</p><p>【1】：4321-1234&#x3D;3087</p><p>【2】：8730-378&#x3D;8352</p><p>【3】：8532-2358&#x3D;6174</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">kabrack</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> cnt)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">4</span>],min,max,temp;</span><br><span class="line">    <span class="comment">//将各位数存进数组</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=n%<span class="number">10</span>;</span><br><span class="line">        n=n/<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将数组中数字从大到小排列</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&lt;a[j])</span><br><span class="line">            &#123;</span><br><span class="line">                temp=a[i];</span><br><span class="line">                a[i]=a[j];</span><br><span class="line">                a[j]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算排列四位数的最大之和最小值</span></span><br><span class="line">    max=<span class="number">1000</span>*a[<span class="number">0</span>]+<span class="number">100</span>*a[<span class="number">1</span>]+<span class="number">10</span>*a[<span class="number">2</span>]+a[<span class="number">3</span>];</span><br><span class="line">    min=<span class="number">1000</span>*a[<span class="number">3</span>]+<span class="number">100</span>*a[<span class="number">2</span>]+<span class="number">10</span>*a[<span class="number">1</span>]+a[<span class="number">0</span>];</span><br><span class="line">    n=max-min;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; [%d]:%d-%d=%d\n&quot;</span>,cnt,max,min,n);</span><br><span class="line">    <span class="comment">//当结果为0时直接退出</span></span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; [%d]:%d-%d=%04d\n&quot;</span>,cnt,max,min,n);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//得到结果退出</span></span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">6174</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//没得到继续递归</span></span><br><span class="line">    kabrack(n,cnt+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">1</span>,n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter number:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    kabrack(n,cnt);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基础的数组运用。</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之BABYRE</title>
      <link href="/2023/03/21/reserve%E4%B9%8BBABYRE/"/>
      <url>/2023/03/21/reserve%E4%B9%8BBABYRE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="攻防世界-BABYRE"><a href="#攻防世界-BABYRE" class="headerlink" title="攻防世界 BABYRE"></a>攻防世界 BABYRE</h1><h3 id="首先查壳发现无壳"><a href="#首先查壳发现无壳" class="headerlink" title="首先查壳发现无壳"></a>首先查壳发现无壳</h3><h3 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h3><p><img src="/2023/03/21/reserve%E4%B9%8BBABYRE/key1.png"></p><p>发现关键在于这个判断的函数，但是这个函数被异或加密了，点不进去，那么将这个函数重新亦或回来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> idc_bc695 <span class="keyword">import</span>*</span><br><span class="line">add=<span class="number">0x600B00</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">182</span>):</span><br><span class="line">    PatchByte(add+i,Byte(add+i)^<span class="number">0xC</span>)</span><br></pre></td></tr></table></figure><p>发现judge函数值变化了，按C再按P，最后得到了这个函数</p><p><img src="/2023/03/21/reserve%E4%B9%8BBABYRE/key2.png"></p><p>通过这个函数我们可以知道flag应该就是三段字符对自己的数位置进行亦或，那么可以编写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">val=<span class="string">&quot;fmcd\x7Fk7d;V`;np&quot;</span></span><br><span class="line"></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(val)):</span><br><span class="line">  flag+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(val[i])^i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#PatchByte(重定地址，对应重定结果）</span></span><br></pre></td></tr></table></figure><p>最后得到flag：flag{n1c3_j0b}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这种对函数进行操作隐藏的题还是第一次见到，主要就是将函数进行复原。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之re4-unvm-me</title>
      <link href="/2023/03/21/reserve%E4%B9%8Bre4-unvm-me/"/>
      <url>/2023/03/21/reserve%E4%B9%8Bre4-unvm-me/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="攻防世界-re4-unvm-me"><a href="#攻防世界-re4-unvm-me" class="headerlink" title="攻防世界 re4-unvm-me"></a>攻防世界 re4-unvm-me</h1><h3 id="首先查壳发现无壳"><a href="#首先查壳发现无壳" class="headerlink" title="首先查壳发现无壳"></a>首先查壳发现无壳</h3><h3 id="发现这是python反编文件"><a href="#发现这是python反编文件" class="headerlink" title="发现这是python反编文件"></a>发现这是python反编文件</h3><p>将其进行反编，得到代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> md5</span><br><span class="line">md5s = [</span><br><span class="line">    <span class="number">0x831DAA3C843BA8B087C895F0ED305CE7L</span>,</span><br><span class="line">    <span class="number">0x6722F7A07246C6AF20662B855846C2C8L</span>,</span><br><span class="line">    <span class="number">0x5F04850FEC81A27AB5FC98BEFA4EB40CL</span>,</span><br><span class="line">    <span class="number">0xECF8DCAC7503E63A6A3667C5FB94F610L</span>,</span><br><span class="line">    <span class="number">0xC0FD15AE2C3931BC1E140523AE934722L</span>,</span><br><span class="line">    <span class="number">0x569F606FD6DA5D612F10CFB95C0BDE6DL</span>,</span><br><span class="line">    <span class="number">0x68CB5A1CF54C078BF0E7E89584C1A4EL</span>,</span><br><span class="line">    <span class="number">0xC11E2CD82D1F9FBD7E4D6EE9581FF3BDL</span>,</span><br><span class="line">    <span class="number">0x1DF4C637D625313720F45706A48FF20FL</span>,</span><br><span class="line">    <span class="number">0x3122EF3A001AAECDB8DD9D843C029E06L</span>,</span><br><span class="line">    <span class="number">0xADB778A0F729293E7E0B19B96A4C5A61L</span>,</span><br><span class="line">    <span class="number">0x938C747C6A051B3E163EB802A325148EL</span>,</span><br><span class="line">    <span class="number">0x38543C5E820DD9403B57BEFF6020596DL</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Can you turn me back to python ? ...&#x27;</span></span><br><span class="line">flag = raw_input(<span class="string">&#x27;well as you wish.. what is the flag: &#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(flag) &gt; <span class="number">69</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;nice try&#x27;</span></span><br><span class="line">    exit()</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(flag) % <span class="number">5</span> != <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;nice try&#x27;</span></span><br><span class="line">    exit()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(flag), <span class="number">5</span>):</span><br><span class="line">    s = flag[i:i + <span class="number">5</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(<span class="string">&#x27;0x&#x27;</span> + md5.new(s).hexdigest(), <span class="number">16</span>) != md5s[i / <span class="number">5</span>]:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;nice try&#x27;</span></span><br><span class="line">        exit()</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Congratz now you have the flag&#x27;</span></span><br></pre></td></tr></table></figure><p>通过分析代码发现实际上就是md5s中的密文进行md5解密，但有一行少一位，在那一行前面补0即可，最后解密后得到</p><p>flag：:ALEXCTF{dv5d4s2vj8nk43s8d8l6m1n5l67ds9v41n52nv37j481h3d28n4b6v3k}</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之tt3441810</title>
      <link href="/2023/03/21/reserve%E4%B9%8Btt3441810/"/>
      <url>/2023/03/21/reserve%E4%B9%8Btt3441810/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="攻防世界-tt3441810"><a href="#攻防世界-tt3441810" class="headerlink" title="攻防世界 tt3441810"></a>攻防世界 tt3441810</h1><h3 id="首先查壳发现无壳"><a href="#首先查壳发现无壳" class="headerlink" title="首先查壳发现无壳"></a>首先查壳发现无壳</h3><h3 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h3><p>啥也没有</p><h3 id="放进虚拟机"><a href="#放进虚拟机" class="headerlink" title="放进虚拟机"></a>放进虚拟机</h3><p>发现这是一个个ASCII的txt文件，查看文件</p><p><img src="/2023/03/21/reserve%E4%B9%8Btt3441810/key1.png"></p><p>发现都是16进制数，将其通过ASCII码字母的方式进行字母转换</p><p>写出脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">val=<span class="string">&quot;&quot;&quot;  68 66 6C 00 00 48 BF 01  00 00 00 00 00 00 00 48</span></span><br><span class="line"><span class="string">  8D 34 24 48 BA 02 00 00  00 00 00 00 00 48 B8 01</span></span><br><span class="line"><span class="string">  00 00 00 00 00 00 00 0F  05 68 61 67 00 00 48 BF</span></span><br><span class="line"><span class="string">  01 00 00 00 00 00 00 00  48 8D 34 24 48 BA 02 00</span></span><br><span class="line"><span class="string">  00 00 00 00 00 00 48 B8  01 00 00 00 00 00 00 00</span></span><br><span class="line"><span class="string">  0F 05 68 7B 70 00 00 48  BF 01 00 00 00 00 00 00</span></span><br><span class="line"><span class="string">  00 48 8D 34 24 48 BA 02  00 00 00 00 00 00 00 48</span></span><br><span class="line"><span class="string">  B8 01 00 00 00 00 00 00  00 0F 05 68 6F 70 00 00</span></span><br><span class="line"><span class="string">  48 BF 01 00 00 00 00 00  00 00 48 8D 34 24 48 BA</span></span><br><span class="line"><span class="string">  02 00 00 00 00 00 00 00  48 B8 01 00 00 00 00 00</span></span><br><span class="line"><span class="string">  00 00 0F 05 68 70 6F 00  00 48 BF 01 00 00 00 00</span></span><br><span class="line"><span class="string">  00 00 00 48 8D 34 24 48  BA 02 00 00 00 00 00 00</span></span><br><span class="line"><span class="string">  00 48 B8 01 00 00 00 00  00 00 00 0F 05 68 70 72</span></span><br><span class="line"><span class="string">  00 00 48 BF 01 00 00 00  00 00 00 00 48 8D 34 24</span></span><br><span class="line"><span class="string">  48 BA 02 00 00 00 00 00  00 00 48 B8 01 00 00 00</span></span><br><span class="line"><span class="string">  00 00 00 00 0F 05 68 65  74 00 00 48 BF 01 00 00</span></span><br><span class="line"><span class="string">  00 00 00 00 00 48 8D 34  24 48 BA 02 00 00 00 00</span></span><br><span class="line"><span class="string">  00 00 00 48 B8 01 00 00  00 00 00 00 00 0F 05 68</span></span><br><span class="line"><span class="string">  7D 0A 00 00 48 BF 01 00  00 00 00 00 00 00 48 8D</span></span><br><span class="line"><span class="string">  34 24 48 BA 02 00 00 00  00 00 00 00 48 B8 01 00</span></span><br><span class="line"><span class="string">  00 00 00 00 00 00 0F 05  48 31 FF 48 B8 3C 00 00</span></span><br><span class="line"><span class="string">  00 00 00 00 00 0F 05  &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line">flag1=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> val.replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>).split(<span class="string">&quot; &quot;</span>):</span><br><span class="line">    key=key.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> key:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">97</span>&lt;=<span class="built_in">int</span>(key,<span class="number">16</span>)&lt;=<span class="number">127</span> <span class="keyword">or</span> <span class="number">65</span>&lt;=<span class="built_in">int</span>(key,<span class="number">16</span>)&lt;=<span class="number">90</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(<span class="built_in">int</span>(key,<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="keyword">if</span> i!=<span class="string">&#x27;H&#x27;</span> <span class="keyword">and</span> i!=<span class="string">&#x27;h&#x27;</span>:</span><br><span class="line">        flag1+=i;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="built_in">print</span>(flag1)</span><br></pre></td></tr></table></figure><p>最后得到flag：flag{poppopret}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在编码时注意这是16进制数，注意字母取值范围。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之流浪者</title>
      <link href="/2023/03/16/reserve%E4%B9%8B%E6%B5%81%E6%B5%AA%E8%80%85/"/>
      <url>/2023/03/16/reserve%E4%B9%8B%E6%B5%81%E6%B5%AA%E8%80%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="攻防世界-流浪者"><a href="#攻防世界-流浪者" class="headerlink" title="攻防世界 流浪者"></a>攻防世界 流浪者</h1><h3 id="首先查壳发现无壳"><a href="#首先查壳发现无壳" class="headerlink" title="首先查壳发现无壳"></a>首先查壳发现无壳</h3><h3 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h3><p><img src="/2023/03/16/reserve%E4%B9%8B%E6%B5%81%E6%B5%AA%E8%80%85/key1.png"></p><p><img src="/2023/03/16/reserve%E4%B9%8B%E6%B5%81%E6%B5%AA%E8%80%85/key2.png"></p><p>跟进sub_401770函数可以发现pass，那么可以确定flag一定藏在这串字符中</p><p>分析发现v4是关键点，从第一串字符中找到第二串字符对应的下标就是v4，找到v4后发现v4并不是flag，继续找函数</p><p><img src="/2023/03/16/reserve%E4%B9%8B%E6%B5%81%E6%B5%AA%E8%80%85/key3.png"></p><p>刚刚找到的v4就是此时的v5，那么可以知道str就是要求的flag</p><h3 id="逆向写出脚本"><a href="#逆向写出脚本" class="headerlink" title="逆向写出脚本"></a>逆向写出脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">val1 = <span class="string">&quot;abcdefghiABCDEFGHIJKLMNjklmn0123456789opqrstuvwxyzOPQRSTUVWXYZ&quot;</span></span><br><span class="line"></span><br><span class="line">val2= <span class="string">&quot;KanXueCTF2019JustForhappy&quot;</span></span><br><span class="line"></span><br><span class="line">val3 = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">key = []</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(val2)):</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(val1)):</span><br><span class="line">        <span class="keyword">if</span> val2[i]==val1[n]:</span><br><span class="line">            key.append(n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> key:</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span>&lt;=i&lt;=<span class="number">9</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(i+<span class="number">48</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="number">9</span>&lt;i&lt;=<span class="number">35</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(i+<span class="number">87</span>)</span><br><span class="line">    <span class="keyword">if</span> i&gt;<span class="number">35</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(i+<span class="number">29</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>flag：j0rXI4bTeustBiIGHeCF70DDM</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>此次题目在提取出key后又进行了加密，需要对加密函数有较深理解。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之hackme</title>
      <link href="/2023/03/14/reserve%E4%B9%8Bhackme/"/>
      <url>/2023/03/14/reserve%E4%B9%8Bhackme/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="攻防世界-hackme"><a href="#攻防世界-hackme" class="headerlink" title="攻防世界 hackme"></a>攻防世界 hackme</h1><h3 id="查壳发现无壳"><a href="#查壳发现无壳" class="headerlink" title="查壳发现无壳"></a>查壳发现无壳</h3><h3 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h3><p>追踪并找到sub_400F8E函数</p><p><img src="/2023/03/14/reserve%E4%B9%8Bhackme/key1.png"></p><h3 id="脚本编写"><a href="#脚本编写" class="headerlink" title="脚本编写"></a>脚本编写</h3><p>python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">val=[<span class="number">0x5F</span>, <span class="number">0xF2</span>, <span class="number">0x5E</span>, <span class="number">0x8B</span>, <span class="number">0x4E</span>, <span class="number">0x0E</span>, <span class="number">0xA3</span>, <span class="number">0xAA</span>, <span class="number">0xC7</span>, <span class="number">0x93</span>,</span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x3D</span>, <span class="number">0x5F</span>, <span class="number">0x74</span>, <span class="number">0xA3</span>, <span class="number">0x09</span>, <span class="number">0x91</span>, <span class="number">0x2B</span>, <span class="number">0x49</span>, <span class="number">0x28</span>,</span><br><span class="line">  <span class="number">0x93</span>, <span class="number">0x67</span>]</span><br><span class="line"></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">22</span>):</span><br><span class="line">    v19=<span class="number">0</span></span><br><span class="line">    v16=val[i]</span><br><span class="line">    v18=<span class="number">0</span></span><br><span class="line">    v14=i+<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> v18&lt;v14:</span><br><span class="line">        v18+=<span class="number">1</span></span><br><span class="line">        v19= <span class="number">1828812941</span> * v19 + <span class="number">12345</span></span><br><span class="line">    flag+=<span class="built_in">chr</span>((v19^val[i])&amp;<span class="number">0xff</span>) <span class="comment">#将结果与0xff进行与运算可以取到前八位</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>c语言</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> val[] = &#123; <span class="number">0x5F</span>, <span class="number">0xF2</span>, <span class="number">0x5E</span>, <span class="number">0x8B</span>, <span class="number">0x4E</span>, <span class="number">0x0E</span>, <span class="number">0xA3</span>, <span class="number">0xAA</span>, <span class="number">0xC7</span>, <span class="number">0x93</span>,</span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x3D</span>, <span class="number">0x5F</span>, <span class="number">0x74</span>, <span class="number">0xA3</span>, <span class="number">0x09</span>, <span class="number">0x91</span>, <span class="number">0x2B</span>, <span class="number">0x49</span>, <span class="number">0x28</span>,</span><br><span class="line">  <span class="number">0x93</span>, <span class="number">0x67</span> &#125;;</span><br><span class="line">    <span class="type">char</span> flag[<span class="number">23</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> v19,v18,v14;</span><br><span class="line">    <span class="type">char</span> v16;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">22</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v19 = <span class="number">0</span>;</span><br><span class="line">        v16 = val[i];</span><br><span class="line">        v18 = <span class="number">0</span>;</span><br><span class="line">        v14 = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (v18 &lt; v14)</span><br><span class="line">        &#123;</span><br><span class="line">            ++v18;</span><br><span class="line">            v19 = <span class="number">1828812941</span> * v19 + <span class="number">12345</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        flag[i] = v19 ^ v16; <span class="comment">//c语言在数值溢出后不会报错，他会直接取到前八位</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, flag);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flag：flag{d826e6926098ef46}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这道提解题关键在于do-while循环，循环次数i比较难以理解，注意python中取到前八位应该&amp;0xff。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之elround32</title>
      <link href="/2023/03/14/reserve%E4%B9%8Belround32/"/>
      <url>/2023/03/14/reserve%E4%B9%8Belround32/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="攻防世界-elround"><a href="#攻防世界-elround" class="headerlink" title="攻防世界 elround"></a>攻防世界 elround</h1><h3 id="首先查壳发现无壳"><a href="#首先查壳发现无壳" class="headerlink" title="首先查壳发现无壳"></a>首先查壳发现无壳</h3><h3 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h3><p><img src="/2023/03/14/reserve%E4%B9%8Belround32/key1.png"></p><p>根据提示跟进sub_8048538</p><p><img src="/2023/03/14/reserve%E4%B9%8Belround32/key2.png"></p><p>发现flag就是v2[i]^a[i%8]的所有值，而通过qmemcpy可以提取到v2的数据，但是a1是多少呢跟进sub_8048414函数</p><p><img src="/2023/03/14/reserve%E4%B9%8Belround32/key3.png"></p><p>发现a2取到0,1,3,4,5,6,7,9时可以得到一个a1的字符，初始a2&#x3D;0；后面每一次循环都有a2&#x3D;7*(a2+1)%11,a1&#x3D;a1+1，但是在这几种情况外的情况出现时会直接跳出循环。</p><h3 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">val=[<span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x1F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x1C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x12</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x42</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x44</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x2D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x37</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x59</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x1E</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x59</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x1C</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x36</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x55</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x41</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x14</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line"></span><br><span class="line">val2=[]</span><br><span class="line"></span><br><span class="line">val3=<span class="string">&quot;&quot;</span></span><br><span class="line">a2=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> a2==<span class="number">0</span>:</span><br><span class="line">        val3+=<span class="string">&#x27;i&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> a2==<span class="number">1</span>:</span><br><span class="line">        val3+=<span class="string">&#x27;e&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> a2==<span class="number">3</span>:</span><br><span class="line">        val3+=<span class="string">&#x27;n&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> a2==<span class="number">4</span>:</span><br><span class="line">        val3+=<span class="string">&#x27;d&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> a2==<span class="number">5</span>:</span><br><span class="line">        val3+=<span class="string">&#x27;a&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> a2==<span class="number">6</span>:</span><br><span class="line">        val3+=<span class="string">&#x27;g&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> a2==<span class="number">7</span>:</span><br><span class="line">        val3+=<span class="string">&#x27;s&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> a2==<span class="number">9</span>:</span><br><span class="line">        val3+=<span class="string">&#x27;r&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    a2=<span class="number">7</span>*(a2+<span class="number">1</span>)%<span class="number">11</span></span><br><span class="line"></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(val),<span class="number">4</span>):</span><br><span class="line">    val2.append(val[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(val2)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>(val2[i]^<span class="built_in">ord</span>(val3[i%<span class="number">8</span>]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(val3)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>flag：flag{s0me7hing_S0me7hinG_t0lki3n}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>对于这道题，应关注每次循环程序运行到的地方，答案的抽取一定是在提示的字符中。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之secret-galaxy-300</title>
      <link href="/2023/03/11/reserve%E4%B9%8Bsecret-galaxy-300/"/>
      <url>/2023/03/11/reserve%E4%B9%8Bsecret-galaxy-300/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="攻防世界-secret-galaxy-300"><a href="#攻防世界-secret-galaxy-300" class="headerlink" title="攻防世界 secret-galaxy-300"></a>攻防世界 secret-galaxy-300</h1><h3 id="查壳发现无壳"><a href="#查壳发现无壳" class="headerlink" title="查壳发现无壳"></a>查壳发现无壳</h3><h3 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h3><p><img src="/2023/03/11/reserve%E4%B9%8Bsecret-galaxy-300/key1.png"></p><p>并没有看到可以输出flag的函数，继续跟踪，发现了一个可以输出字符串的函数，推测这就是flag函数</p><p><img src="/2023/03/11/reserve%E4%B9%8Bsecret-galaxy-300/key2.png"></p><p>这里可以进行脚本编写得到flag，也可以在od中直接动态调试</p><p><img src="/2023/03/11/reserve%E4%B9%8Bsecret-galaxy-300/flag.png"></p><p>把断点设在这个字符串函数的入口，即004013E0，然后防止程序直接退出，再在return处设个断点，即00401519处，直接运行，回找运行过程，发现flag</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这道题感觉挺难得，需要找到flag对应的函数。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之re2-cpp-is-awesome</title>
      <link href="/2023/03/11/reserve%E4%B9%8Bre2-cpp-is-awesome/"/>
      <url>/2023/03/11/reserve%E4%B9%8Bre2-cpp-is-awesome/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="攻防世界-re2-cpp-is-awesome"><a href="#攻防世界-re2-cpp-is-awesome" class="headerlink" title="攻防世界 re2-cpp-is-awesome"></a>攻防世界 re2-cpp-is-awesome</h1><h3 id="查壳发现无壳"><a href="#查壳发现无壳" class="headerlink" title="查壳发现无壳"></a>查壳发现无壳</h3><h3 id="分析代码"><a href="#分析代码" class="headerlink" title="分析代码"></a>分析代码</h3><p><img src="/2023/03/11/reserve%E4%B9%8Bre2-cpp-is-awesome/key1.png"></p><p>这里发现只要v8与后面那个函数值相等就能获得提示成功，那么推断v8就是flag</p><p>追踪可得到数组下标的值</p><p><img src="/2023/03/11/reserve%E4%B9%8Bre2-cpp-is-awesome/key2.png"></p><p>shift+e把数据提取出来</p><p>跟踪off_6020A0可以得到一串字符串</p><p>L3t_ME_T3ll_Y0u_S0m3th1ng_1mp0rtant_A_{FL4G}_W0nt_b3_3X4ctly_th4t_345y_t0_c4ptur3_H0wev3r_1T_w1ll_b3_C00l_1F_Y0u_g0t_1t</p><p>可以知道flag应该就是在这串字符串里提取的，那么就开始写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">val1=<span class="string">&quot;L3t_ME_T3ll_Y0u_S0m3th1ng_1mp0rtant_A_&#123;FL4G&#125;_W0nt_b3_3X4ctly_th4t_345y_t0_c4ptur3_H0wev3r_1T_w1ll_b3_C00l_1F_Y0u_g0t_1t&quot;</span></span><br><span class="line"></span><br><span class="line">val2=[<span class="number">0x24</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x36</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x65</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x27</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x26</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x2D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x56</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x65</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x2D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x16</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x15</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x65</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x29</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x44</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x44</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x44</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x2B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line"><span class="comment">#注意四个数字为一组，24h和align 8 有提示</span></span><br><span class="line"></span><br><span class="line">val3=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(val2),<span class="number">4</span>):</span><br><span class="line">    val3.append(val2[i])</span><br><span class="line"></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(val3)):</span><br><span class="line">    flag+=val1[val3[i]]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>最终得到flag : ALEXCTF{W3_L0v3_C_W1th_CL45535}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>提取数字时一定要注意单个字符提示。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之simple-check-100</title>
      <link href="/2023/03/10/reserve%E4%B9%8Bsimple-check-100/"/>
      <url>/2023/03/10/reserve%E4%B9%8Bsimple-check-100/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="攻防世界-simple-check-100"><a href="#攻防世界-simple-check-100" class="headerlink" title="攻防世界 simple-check-100"></a>攻防世界 simple-check-100</h1><h3 id="查壳发现无壳"><a href="#查壳发现无壳" class="headerlink" title="查壳发现无壳"></a>查壳发现无壳</h3><p><img src="/2023/03/10/reserve%E4%B9%8Bsimple-check-100/pack.png"></p><h3 id="分析代码"><a href="#分析代码" class="headerlink" title="分析代码"></a>分析代码</h3><p><img src="/2023/03/10/reserve%E4%B9%8Bsimple-check-100/key1.png"></p><p>这里发现只要check为真就可以得到flag，在gdb中调试</p><p>在check函数前设一个断点，单步执行进入check函数，将eax值改为1，即可得到flag</p><p><img src="/2023/03/10/reserve%E4%B9%8Bsimple-check-100/flag.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>理解函数作用，会用gdb调试。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之guess-the-number</title>
      <link href="/2023/03/09/reserve%E4%B9%8Bguess-the-number/"/>
      <url>/2023/03/09/reserve%E4%B9%8Bguess-the-number/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="攻防世界-guess-the-number"><a href="#攻防世界-guess-the-number" class="headerlink" title="攻防世界 guess-the-number"></a>攻防世界 guess-the-number</h1><h3 id="这是一个压缩文件，首先解压"><a href="#这是一个压缩文件，首先解压" class="headerlink" title="这是一个压缩文件，首先解压"></a>这是一个压缩文件，首先解压</h3><p>解压后发现这是一个java的文件，那么通过jd-gui-1.6.6.jar打开并反汇编它</p><p><img src="/2023/03/09/reserve%E4%B9%8Bguess-the-number/open.png"></p><h3 id="分析代码"><a href="#分析代码" class="headerlink" title="分析代码"></a>分析代码</h3><p><img src="/2023/03/09/reserve%E4%B9%8Bguess-the-number/key1.png"></p><p>这里发现只要my_num&#x2F;5&#x3D;guess_number就能得到flag那么就传入参数309137378</p><p><img src="/2023/03/09/reserve%E4%B9%8Bguess-the-number/flag.png"></p><p>得到flag</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>java文件的处理还是非常生疏的。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之answer_to_everything</title>
      <link href="/2023/03/09/reserve%E4%B9%8Banswer-to-everything/"/>
      <url>/2023/03/09/reserve%E4%B9%8Banswer-to-everything/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="攻防世界-answer-to-everything"><a href="#攻防世界-answer-to-everything" class="headerlink" title="攻防世界 answer-to-everything"></a>攻防世界 answer-to-everything</h1><h3 id="首先查壳"><a href="#首先查壳" class="headerlink" title="首先查壳"></a>首先查壳</h3><p><img src="/2023/03/09/reserve%E4%B9%8Banswer-to-everything/pack.png"></p><p>发现无壳</p><h3 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h3><p><img src="/2023/03/09/reserve%E4%B9%8Banswer-to-everything/key1.png"></p><p>只发现一个有用的信息，kdudpeh,在这里不知道怎么办了，发现题目本来就有提示sha1，那么这就是需要sha1加密的</p><p><img src="/2023/03/09/reserve%E4%B9%8Banswer-to-everything/flag.png"></p><p>最终得到flag{80ee2a3fe31da904c596d993f7f1de4827c1450a}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>不要忽略了题目的提示。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之EasyRe</title>
      <link href="/2023/03/09/reserve%E4%B9%8BEasyRe/"/>
      <url>/2023/03/09/reserve%E4%B9%8BEasyRe/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="攻防世界-EasyRe"><a href="#攻防世界-EasyRe" class="headerlink" title="攻防世界 EasyRe"></a>攻防世界 EasyRe</h1><h3 id="首先查壳"><a href="#首先查壳" class="headerlink" title="首先查壳"></a>首先查壳</h3><p><img src="/2023/03/09/reserve%E4%B9%8BEasyRe/easyrepack.png"></p><p>发现无壳</p><h3 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h3><p><img src="/2023/03/09/reserve%E4%B9%8BEasyRe/key1.png"></p><p>发现一个flag，输入发现不对，认真分析代码，发现下面一个字符串才是有用信息</p><p><img src="/2023/03/09/reserve%E4%B9%8BEasyRe/key2.png"></p><p>需要v7为0才能成功，也就是byte_40336C就和刚刚那个字符串相同，提取字符串得到xIrCj~&lt;r|2tWsv3PtI\x7Fzndka，但此时的字符串并不是初始输入的flag，那么根据代码写出脚本将其还原</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">val=<span class="string">&quot;xIrCj~&lt;r|2tWsv3PtI\x7Fzndka&quot;</span></span><br><span class="line"></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(val)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>((<span class="built_in">ord</span>(val[i])^<span class="number">6</span>)-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>但最终并不是flag，而是其颠倒的值，加串代码将其还原</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(flag[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>得到flag : flag{xNqU4otPq3ys9wkDsN}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>注意提取字符串时一定不要漏了字符。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之re1-100</title>
      <link href="/2023/03/09/reserve%E4%B9%8Bre1-100/"/>
      <url>/2023/03/09/reserve%E4%B9%8Bre1-100/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="攻防世界-re1-100"><a href="#攻防世界-re1-100" class="headerlink" title="攻防世界 re1-100"></a>攻防世界 re1-100</h1><h3 id="首先查壳"><a href="#首先查壳" class="headerlink" title="首先查壳"></a>首先查壳</h3><p><img src="/2023/03/09/reserve%E4%B9%8Bre1-100/re1-100pack.png"></p><p>发现无壳</p><h3 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h3><p><img src="/2023/03/09/reserve%E4%B9%8Bre1-100/key1.png"></p><p>发现{daf29f59034938ae4efd53fc275d81053ed5be8c}有点像flag，输入后发现并不是</p><p><img src="/2023/03/09/reserve%E4%B9%8Bre1-100/key2.png"></p><p>分析代码，发现flag的值应该是分成四段后被打乱了顺序，末态的值是初态经过3412排序得到的，那么重新排回来得到{53fc275d81053ed5be8cdaf29f59034938ae4efd}，输入后还是错的，纠结半天最后把两个大括号去了才对了</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>排序类问题，主要分析函数作用以及提示。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之parallel-comparator-200</title>
      <link href="/2023/03/09/reserve%E4%B9%8Bparallel-comparator-200/"/>
      <url>/2023/03/09/reserve%E4%B9%8Bparallel-comparator-200/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="攻防世界-parallel-comparator-200"><a href="#攻防世界-parallel-comparator-200" class="headerlink" title="攻防世界 parallel-comparator-200"></a>攻防世界 parallel-comparator-200</h1><h3 id="打开-c文件"><a href="#打开-c文件" class="headerlink" title="打开 c文件"></a>打开 c文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FLAG_LEN 20</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> * <span class="title function_">checking</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *result = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="type">char</span> *argument = (<span class="type">char</span> *)arg;</span><br><span class="line">    *result = (argument[<span class="number">0</span>]+argument[<span class="number">1</span>]) ^ argument[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">highly_optimized_parallel_comparsion</span><span class="params">(<span class="type">char</span> *user_string)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> initialization_number;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">char</span> generated_string[FLAG_LEN + <span class="number">1</span>];</span><br><span class="line">    generated_string[FLAG_LEN] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((initialization_number = random()) &gt;= <span class="number">64</span>);<span class="comment">//37</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> first_letter;</span><br><span class="line">    first_letter = (initialization_number % <span class="number">26</span>) + <span class="number">97</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;the first_letter is %d&quot;</span>,first_letter);</span><br><span class="line"></span><br><span class="line">    <span class="type">pthread_t</span> thread[FLAG_LEN];</span><br><span class="line">    <span class="type">char</span> differences[FLAG_LEN] = &#123;<span class="number">0</span>, <span class="number">9</span>, <span class="number">-9</span>, <span class="number">-1</span>, <span class="number">13</span>, <span class="number">-13</span>, <span class="number">-4</span>, <span class="number">-11</span>, <span class="number">-9</span>, <span class="number">-1</span>, <span class="number">-7</span>, <span class="number">6</span>, <span class="number">-13</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">-13</span>, <span class="number">-11</span>, <span class="number">6</span>, <span class="number">-7</span>&#125;;</span><br><span class="line">    <span class="type">char</span> *arguments[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; FLAG_LEN; i++) &#123;</span><br><span class="line">        arguments[i] = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">3</span>*<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">        arguments[i][<span class="number">0</span>] = first_letter;<span class="comment">//108</span></span><br><span class="line">        arguments[i][<span class="number">1</span>] = differences[i];</span><br><span class="line">        arguments[i][<span class="number">2</span>] = user_string[i];<span class="comment">//flag既是user_string,根据checking函数可得到user_string[i]=0^(first_letter+differences[i])</span></span><br><span class="line"></span><br><span class="line">        pthread_create((<span class="type">pthread_t</span>*)(thread+i), <span class="literal">NULL</span>, checking, arguments[i]);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="type">void</span> *result;</span><br><span class="line">    <span class="type">int</span> just_a_string[FLAG_LEN] = &#123;<span class="number">115</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">101</span>, <span class="number">95</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">95</span>, <span class="number">105</span>, <span class="number">116</span>, <span class="number">95</span>, <span class="number">105</span>, <span class="number">115</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; FLAG_LEN; i++) &#123;</span><br><span class="line">        pthread_join(*(thread+i), &amp;result);</span><br><span class="line">        generated_string[i] = *(<span class="type">char</span> *)result + just_a_string[i];</span><br><span class="line">        <span class="built_in">free</span>(result);</span><br><span class="line">        <span class="built_in">free</span>(arguments[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> is_ok = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; FLAG_LEN; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (generated_string[i] != just_a_string[i])<span class="comment">//如果相等就能返回1，那么result必须等于0</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *user_string = (<span class="type">char</span> *)<span class="built_in">calloc</span>(FLAG_LEN+<span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    fgets(user_string, FLAG_LEN+<span class="number">1</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="type">int</span> is_ok = highly_optimized_parallel_comparsion(user_string);<span class="comment">//需要is_ok不为0</span></span><br><span class="line">    <span class="keyword">if</span> (is_ok)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;You win!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Wrong!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过分析代码，可以猜测最终的flag就应该是user_string，根据checking函数可得到user_string[i]&#x3D;0^(first_letter+differences[i])，那么随机数first_letter怎么知道呢，既然这是一个c文件那么就可以运行</p><p><img src="/2023/03/09/reserve%E4%B9%8Bparallel-comparator-200/key1.png"></p><p>运行之后发现这个随机值竟然是确定的，108，并且通过提示发现just_a_string对flag的形成没有关系，但是保险起见还是把这个字符串输出一下，那么就可以直接写脚本了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">val1=[<span class="number">0</span>, <span class="number">9</span>, -<span class="number">9</span>, -<span class="number">1</span>, <span class="number">13</span>, -<span class="number">13</span>, -<span class="number">4</span>, -<span class="number">11</span>, -<span class="number">9</span>, -<span class="number">1</span>, -<span class="number">7</span>, <span class="number">6</span>, -<span class="number">13</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">9</span>, -<span class="number">13</span>, -<span class="number">11</span>, <span class="number">6</span>, -<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">val2=[<span class="number">115</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">101</span>, <span class="number">95</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">95</span>, <span class="number">105</span>, <span class="number">116</span>, <span class="number">95</span>, <span class="number">105</span>, <span class="number">115</span>]</span><br><span class="line"></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line">kk=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(val2)):</span><br><span class="line">    g=<span class="number">0</span>^(<span class="number">108</span>+val1[i])</span><br><span class="line">    flag+=<span class="built_in">chr</span>(g)</span><br><span class="line">    kk+=<span class="built_in">chr</span>(val2[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="built_in">print</span>(kk)</span><br></pre></td></tr></table></figure><p><img src="/2023/03/09/reserve%E4%B9%8Bparallel-comparator-200/flag.png"></p><p>得到flag : lucky_hacker_you_are</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我在这里找了很久的first_letter都没有找到，通过大佬的提示发现运行的随机数是个定值，最后完成题解。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之Myterious</title>
      <link href="/2023/03/09/reserve%E4%B9%8BMyterious/"/>
      <url>/2023/03/09/reserve%E4%B9%8BMyterious/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="攻防世界-Myterious"><a href="#攻防世界-Myterious" class="headerlink" title="攻防世界 Myterious"></a>攻防世界 Myterious</h1><h3 id="首先查壳"><a href="#首先查壳" class="headerlink" title="首先查壳"></a>首先查壳</h3><p><img src="/2023/03/09/reserve%E4%B9%8BMyterious/myteriouspack.png"></p><p>发现无壳</p><h3 id="扔进ida32"><a href="#扔进ida32" class="headerlink" title="扔进ida32"></a>扔进ida32</h3><p><img src="/2023/03/09/reserve%E4%B9%8BMyterious/key1.png"></p><p>分析代码，发现最后返回的是Code，那么就跟进WinMain，最后看到</p><p><img src="/2023/03/09/reserve%E4%B9%8BMyterious/key2.png"></p><p>这里可以分析出flag由6部分组成，唯一要找到的就是Sourse的值，通过跟进_itoa代码发现就是把Value的值字符串化赋给Sourse，由上面的代码得到Value&#x3D;v4+1，而v4&#x3D;122，那么Value&#x3D;123，最终得到flag{123_Buff3r_0v3rf|0w}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这道题的关键在于找到Sourse的值，需要对函数有准确的分析与猜测。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之srm-50</title>
      <link href="/2023/03/09/reserve%E4%B9%8Bsrm-50/"/>
      <url>/2023/03/09/reserve%E4%B9%8Bsrm-50/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="攻防世界-srm-50"><a href="#攻防世界-srm-50" class="headerlink" title="攻防世界 srm-50"></a>攻防世界 srm-50</h1><h3 id="首先查壳"><a href="#首先查壳" class="headerlink" title="首先查壳"></a>首先查壳</h3><p><img src="/2023/03/09/reserve%E4%B9%8Bsrm-50/srm50pack.png"></p><p>发现无壳</p><h3 id="扔进ida32中"><a href="#扔进ida32中" class="headerlink" title="扔进ida32中"></a>扔进ida32中</h3><p><img src="/2023/03/09/reserve%E4%B9%8Bsrm-50/key1.png"></p><p>分析代码发现最终返回的是v7，那么推断flag藏在v7中，跟进WinMain函数，接着跟进DalogFunc</p><p><img src="/2023/03/09/reserve%E4%B9%8Bsrm-50/key2.png"></p><p>发现只要if语句中的条件成立，那么就会提示成功，推断if语句中的值就是flag，仔细观察发现v11的值是乱序的，所以需要重新排序，最终得到flag  :   CZ9dmq4c8g9G7bAX</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>注意关键词提示，以及序列化问题。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之maze</title>
      <link href="/2023/03/08/reserve%E4%B9%8Bmaze/"/>
      <url>/2023/03/08/reserve%E4%B9%8Bmaze/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="攻防世界-maze-迷宫题"><a href="#攻防世界-maze-迷宫题" class="headerlink" title="攻防世界 maze 迷宫题"></a>攻防世界 maze 迷宫题</h1><h3 id="首先查壳"><a href="#首先查壳" class="headerlink" title="首先查壳"></a>首先查壳</h3><p><img src="/2023/03/08/reserve%E4%B9%8Bmaze/mazepack.png"></p><p>发现无壳，且为gcc编译的文件</p><h3 id="直接扔进ida"><a href="#直接扔进ida" class="headerlink" title="直接扔进ida"></a>直接扔进ida</h3><p><img src="/2023/03/08/reserve%E4%B9%8Bmaze/key1.png"></p><p><img src="/2023/03/08/reserve%E4%B9%8Bmaze/key2.png"></p><p>分析代码发现这是一道非常典型的迷宫题，那么迷宫的按钮是什么捏，跟进四个sub函数，可以基本确定‘O’与‘o’一定为一组确定一条轴，‘.’与’0’为另一组，那么怎么确定哪个是x轴哪个是y轴捏，根本没有关系，我们直接试。令‘O’与‘o’确定x轴，可以得到‘O’：左，‘o’：右，‘.’：上，‘0’：下</p><p>得到迷宫：</p><p><img src="/2023/03/08/reserve%E4%B9%8Bmaze/flagtt.png"></p><p>输入nctf{o0oo00O000oooo..OO}发现对了，那么另一种情况就不需要试了</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>迷宫题找到数字所对应的按钮即可。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reverse之re-for-50-plz-50</title>
      <link href="/2023/03/08/reverse%E4%B9%8Bre-for-50-plz-50/"/>
      <url>/2023/03/08/reverse%E4%B9%8Bre-for-50-plz-50/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="攻防世界-re-for-50-plz-50"><a href="#攻防世界-re-for-50-plz-50" class="headerlink" title="攻防世界 re-for-50-plz-50"></a>攻防世界 re-for-50-plz-50</h1><h3 id="首先查壳"><a href="#首先查壳" class="headerlink" title="首先查壳"></a>首先查壳</h3><p><img src="/2023/03/08/reverse%E4%B9%8Bre-for-50-plz-50/refor50pack.png"></p><p>发现是个ELF文件，并且无壳</p><h3 id="直接扔ida32位中"><a href="#直接扔ida32位中" class="headerlink" title="直接扔ida32位中"></a>直接扔ida32位中</h3><p><img src="/2023/03/08/reverse%E4%B9%8Bre-for-50-plz-50/refor50.png"></p><p>这里分析代码发现当meow等于后面那个字符串时，可以得到flag，定位meow，我发现了需要用来进行亦或操作的钥匙</p><p><img src="/2023/03/08/reverse%E4%B9%8Bre-for-50-plz-50/key.png"></p><h3 id="最后根据代码写出脚本得到flag"><a href="#最后根据代码写出脚本得到flag" class="headerlink" title="最后根据代码写出脚本得到flag"></a>最后根据代码写出脚本得到flag</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">val=<span class="string">&#x27;cbtcqLUBChERV[[Nh@_X^D]X_YPV[CJ&#x27;</span></span><br><span class="line"></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(val)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(val[i])^<span class="number">0x37</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p><img src="/2023/03/08/reverse%E4%B9%8Bre-for-50-plz-50/refor50flag.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这道题目是基础的亦或操作题目。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单项链表基本操作</title>
      <link href="/2023/02/01/%E5%8D%95%E9%A1%B9%E9%93%BE%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/02/01/%E5%8D%95%E9%A1%B9%E9%93%BE%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="头文件-LinkList-h"><a href="#头文件-LinkList-h" class="headerlink" title="头文件 LinkList.h"></a>头文件 LinkList.h</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// __cplusplus</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义节点数据类型</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化链表</span></span><br><span class="line"><span class="keyword">struct</span> LinkNode* <span class="title function_">Init_LinkList</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在值oldval处插入一个新数据newval，oldval往后移</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InsertByValue_LinkList</span><span class="params">(<span class="keyword">struct</span> LinkNode* header,<span class="type">int</span> oldval,<span class="type">int</span> newval)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除值为val的结点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">RemoveByValue_LinkList</span><span class="params">(<span class="keyword">struct</span> LinkNode* header, <span class="type">int</span> delValue)</span>;</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Foreach_LinkList</span><span class="params">(<span class="keyword">struct</span> LinkNode* header)</span>;</span><br><span class="line"><span class="comment">//销毁链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Destroy_LinkList</span><span class="params">(<span class="keyword">struct</span> LinkNode* header)</span>;</span><br><span class="line"><span class="comment">//清空链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Clear_LinkList</span><span class="params">(<span class="keyword">struct</span> LinkNode* header)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cpluspus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// </span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="函数文件LinkList-c"><a href="#函数文件LinkList-c" class="headerlink" title="函数文件LinkList.c"></a>函数文件LinkList.c</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;LinkList.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化链表</span></span><br><span class="line"><span class="keyword">struct</span> LinkNode* <span class="title function_">Init_LinkList</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//创建头结点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">header</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> LinkNode));</span><br><span class="line">header-&gt;val = - <span class="number">1</span>;<span class="comment">//默认数据不影响</span></span><br><span class="line">header-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尾部指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">pRear</span> =</span> header;</span><br><span class="line"><span class="type">int</span> data = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入构成的数据：\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data);</span><br><span class="line"><span class="comment">//输入-1结束输入</span></span><br><span class="line"><span class="keyword">if</span> (data == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建新节点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">newnode</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> LinkNode));</span><br><span class="line">newnode-&gt;val = data;</span><br><span class="line">newnode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//新结点插入到链表中</span></span><br><span class="line">pRear-&gt;next = newnode;</span><br><span class="line"><span class="comment">//更新尾部指针</span></span><br><span class="line">pRear = newnode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将链表返回</span></span><br><span class="line"><span class="keyword">return</span> header;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在值oldval处插入一个新数据newval，oldval向后移</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InsertByValue_LinkList</span><span class="params">(<span class="keyword">struct</span> LinkNode* header, <span class="type">int</span> oldval, <span class="type">int</span> newval)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (header == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建两个辅助指针变量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">pPrev</span>=</span>header-&gt;next;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">pCurrent</span> =</span> pPrev-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (pCurrent-&gt;val != oldval)</span><br><span class="line">&#123;</span><br><span class="line">pPrev = pCurrent;</span><br><span class="line">pCurrent = pCurrent-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (pCurrent == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果pCurrent为空，则没有链表中没有符合插入的位置，直接插入到最后</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pCurrent == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">newnode</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> LinkNode));</span><br><span class="line">newnode-&gt;val = newval;</span><br><span class="line">newnode-&gt;next = pCurrent;</span><br><span class="line">pPrev-&gt;next = newnode;</span><br><span class="line"><span class="keyword">return</span> header;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除值为val的结点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">RemoveByValue_LinkList</span><span class="params">(<span class="keyword">struct</span> LinkNode* header, <span class="type">int</span> delValue)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (header == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">pPrev</span> =</span> header;</span><br><span class="line"><span class="comment">//创建用于查找要删除数据的指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">Find</span> =</span> pPrev-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (Find-&gt;val != delValue)</span><br><span class="line">&#123;</span><br><span class="line">pPrev = pPrev-&gt;next;</span><br><span class="line">Find = Find-&gt;next;</span><br><span class="line"><span class="comment">//未找到直接返回</span></span><br><span class="line"><span class="keyword">if</span> (Find == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//跳过要删除项，将要删除项前后连接</span></span><br><span class="line">pPrev-&gt;next = Find-&gt;next;</span><br><span class="line"><span class="comment">//找到将此块(要删除项)内存域释放</span></span><br><span class="line"><span class="built_in">free</span>(Find);</span><br><span class="line">Find = <span class="literal">NULL</span>;<span class="comment">//防止Find成为野指针</span></span><br><span class="line"><span class="keyword">return</span> header;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Foreach_LinkList</span><span class="params">(<span class="keyword">struct</span> LinkNode* header)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (header == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//辅助指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">pCurrent</span> =</span> header-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(pCurrent)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pCurrent-&gt;val);</span><br><span class="line">pCurrent = pCurrent-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Destroy_LinkList</span><span class="params">(<span class="keyword">struct</span> LinkNode* header)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (header == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//辅助指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">pCurrent</span> =</span> header;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">pNext</span> =</span> pCurrent;</span><br><span class="line"><span class="keyword">while</span> (pCurrent!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">pNext = pCurrent-&gt;next;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d结点被销毁\n&quot;</span>,pCurrent-&gt;val);</span><br><span class="line"><span class="built_in">free</span>(pCurrent);</span><br><span class="line">pCurrent = pNext;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清空链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Clear_LinkList</span><span class="params">(<span class="keyword">struct</span> LinkNode* header)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (header == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//辅助指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">pCurrent</span> =</span> header-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (pCurrent != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//先将pCrrent下一块域保存以便可以访问</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">pNext</span> =</span> pCurrent-&gt;next;</span><br><span class="line"><span class="comment">//释放当前节点内存</span></span><br><span class="line"><span class="built_in">free</span>(pCurrent);</span><br><span class="line"><span class="comment">//更新结点</span></span><br><span class="line">pCurrent = pNext;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">header-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> header;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="主函数用于测试TestLinkList-c"><a href="#主函数用于测试TestLinkList-c" class="headerlink" title="主函数用于测试TestLinkList.c"></a>主函数用于测试TestLinkList.c</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;LinkList.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//初始化链表,100,200,300,400,500   插入666，删除666</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">header</span> =</span> Init_LinkList();</span><br><span class="line"><span class="comment">//打印链表</span></span><br><span class="line">Foreach_LinkList(header);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line"><span class="comment">//插入数据</span></span><br><span class="line">InsertByValue_LinkList(header, <span class="number">500</span>, <span class="number">111</span>);</span><br><span class="line">Foreach_LinkList(header);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line"><span class="comment">//删除数据</span></span><br><span class="line">RemoveByValue_LinkList(header,<span class="number">111</span>);</span><br><span class="line">Foreach_LinkList(header);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line"><span class="comment">//清空链表</span></span><br><span class="line">Clear_LinkList(header);</span><br><span class="line">Foreach_LinkList(header);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line"><span class="comment">//销毁链表</span></span><br><span class="line">Destroy_LinkList(header);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;插入111，再删除111，清空链表并销毁\n&quot;</span>);</span><br><span class="line">test();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输出结果展示"><a href="#输出结果展示" class="headerlink" title="输出结果展示"></a>输出结果展示</h2><p><img src="/2023/02/01/%E5%8D%95%E9%A1%B9%E9%93%BE%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/LinkNode.png"></p><h1 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h1><p>通过快慢指针可以快速确定链表的中间位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> LinkNode* <span class="title function_">middleSpot</span><span class="params">(<span class="keyword">struct</span> LinkNode*head)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span> *<span class="title">Prev</span>=</span>head;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span> *<span class="title">Slow</span>=</span>head;</span><br><span class="line">    <span class="keyword">while</span>(Prev!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Prev=</span><br><span class="line">        <span class="keyword">if</span>(Prev!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Prev=Prev-&gt;next;</span><br><span class="line">            Slow=Slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/2023/02/01/%E5%8D%95%E9%A1%B9%E9%93%BE%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88.png"></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="/2023/01/14/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2023/01/14/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Effervescence_sort</span><span class="params">(<span class="type">int</span> len,<span class="type">int</span> a[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">9</span>;j&gt;i;j--)<span class="comment">//找到较小数并依次向上冒泡</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;a[j<span class="number">-1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                temp=a[j];</span><br><span class="line">                a[j]=a[j<span class="number">-1</span>];</span><br><span class="line">                a[j<span class="number">-1</span>]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Before sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    Effervescence_sort(<span class="number">10</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;After sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图像演示：</p><p><img src="/2023/01/14/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/effervescence_sort.gif"></p><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Chose_sort</span><span class="params">(<span class="type">int</span> len,<span class="type">int</span> a[])</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> min,i,j;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;len<span class="number">-1</span>;j++)<span class="comment">//找到最小数，将最小数按次序依次排列</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=j;i&lt;len;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            min=a[j];</span><br><span class="line">            <span class="keyword">if</span>(min&gt;a[i])</span><br><span class="line">            &#123;</span><br><span class="line">                min=a[i];</span><br><span class="line">                a[i]=a[j];</span><br><span class="line">                a[j]=min;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>],i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Before sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    Chose_sort(<span class="number">10</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;After sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图像演示：</p><p><img src="/2023/01/14/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/chose_sort.gif"></p><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Insertion_sort</span><span class="params">(<span class="type">int</span> len,<span class="type">int</span> a[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j,temp;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp=a[i];</span><br><span class="line">        <span class="keyword">for</span>(j=i;j&gt;<span class="number">0</span>;j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j<span class="number">-1</span>]&gt;temp)</span><br><span class="line">            a[j]=a[j<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        a[j]=temp;</span><br><span class="line">    &#125;<span class="comment">//若指定项的数值小于前面项，则循环项等于前一项，直到遇到循环项前一项小于指定项的数值，则循环项等于指定项数值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>],i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Before sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    Insertion_sort(<span class="number">10</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;After sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图像演示：</p><p><img src="/2023/01/14/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/Insertion_sort.gif"></p><h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">shell_sort</span><span class="params">(<span class="type">int</span> len,<span class="type">int</span> arr[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> gap, i, j;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (gap = len &gt;&gt; <span class="number">1</span>; gap &gt; <span class="number">0</span>; gap = gap &gt;&gt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> (i = gap; i &lt; len; i++) &#123;</span><br><span class="line">            temp = arr[i];</span><br><span class="line">            <span class="keyword">for</span> (j = i - gap; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp; j -= gap)</span><br><span class="line">                arr[j + gap] = arr[j];</span><br><span class="line">            arr[j + gap] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;<span class="comment">//插入排序升级版，在插入排序前先分组排序，再进行插入排序，但不稳定</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">int</span> argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>],i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Before sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    shell_sort(a,<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;After sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图像演示：</p><p><img src="/2023/01/14/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/shellsort.gif"></p><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">min</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x &lt; y ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">merge_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> *a = arr;</span><br><span class="line">    <span class="type">int</span> *b = (<span class="type">int</span> *)<span class="built_in">malloc</span>(len * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="type">int</span> seg, start;</span><br><span class="line">    <span class="keyword">for</span> (seg = <span class="number">1</span>; seg &lt; len; seg += seg)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (start = <span class="number">0</span>; start &lt; len; start += seg + seg)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> low = start, mid = min(start + seg, len), high = min(start + seg + seg, len);</span><br><span class="line">            <span class="type">int</span> k = low;</span><br><span class="line">            <span class="type">int</span> start1 = low, end1 = mid;</span><br><span class="line">            <span class="type">int</span> start2 = mid, end2 = high;</span><br><span class="line">            <span class="keyword">while</span> (start1 &lt; end1 &amp;&amp; start2 &lt; end2)</span><br><span class="line">                b[k++] = a[start1] &lt; a[start2] ? a[start1++] : a[start2++];</span><br><span class="line">            <span class="keyword">while</span> (start1 &lt; end1)</span><br><span class="line">                b[k++] = a[start1++];</span><br><span class="line">            <span class="keyword">while</span> (start2 &lt; end2)</span><br><span class="line">                b[k++] = a[start2++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> *temp = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a != arr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            b[i] = a[i];</span><br><span class="line">        b = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">int</span> argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>], i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Before sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    merge_sort(a, <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;After sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图像演示：</p><p><img src="/2023/01/14/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/merge_sort.gif"></p><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Range</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> start, end;</span><br><span class="line">&#125; Range;</span><br><span class="line">Range <span class="title function_">new_Range</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> e)</span></span><br><span class="line">&#123;</span><br><span class="line">    Range r;</span><br><span class="line">    r.start = s;</span><br><span class="line">    r.end = e;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *x, <span class="type">int</span> *y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> t = *x;</span><br><span class="line">    *x = *y;</span><br><span class="line">    *y = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">quick_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">const</span> <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (len &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// 避免len等于负值時引发段错误（Segment Fault）</span></span><br><span class="line">    <span class="comment">// r[]模拟列表,p为数量,r[p++]为push,r[--p]为pop且取得元素</span></span><br><span class="line">    Range r[len];</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    r[p++] = new_Range(<span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (p)</span><br><span class="line">    &#123;</span><br><span class="line">        Range range = r[--p];</span><br><span class="line">        <span class="keyword">if</span> (range.start &gt;= range.end)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> mid = arr[(range.start + range.end) / <span class="number">2</span>]; <span class="comment">// 选取中间4点为基准点</span></span><br><span class="line">        <span class="type">int</span> left = range.start, right = range.end;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (arr[left] &lt; mid)</span><br><span class="line">                ++left; <span class="comment">// 检测基准点左侧是否符合要求</span></span><br><span class="line">            <span class="keyword">while</span> (arr[right] &gt; mid)</span><br><span class="line">                --right; <span class="comment">// 检测基准点右侧是否符合要求</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (left &lt;= right)</span><br><span class="line">            &#123;</span><br><span class="line">                swap(&amp;arr[left], &amp;arr[right]);</span><br><span class="line">                left++;</span><br><span class="line">                right--; <span class="comment">// 移动指针以继续</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (left &lt;= right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (range.start &lt; right)</span><br><span class="line">            r[p++] = new_Range(range.start, right);</span><br><span class="line">        <span class="keyword">if</span> (range.end &gt; left)</span><br><span class="line">            r[p++] = new_Range(left, range.end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">int</span> argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>], i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Before sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    quick_sort(a, <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;After sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图像演示：</p><p><img src="/2023/01/14/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/quick_sort.gif"></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言基础之文件读写操作</title>
      <link href="/2023/01/11/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/01/11/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h1><p>使用fopen函数即可打开文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FILE *<span class="title function_">fopen</span><span class="params">( <span class="type">const</span> <span class="type">char</span> *filename, <span class="type">const</span> <span class="type">char</span> *mode )</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>r</td><td>打开一个已有的文本文件，允许读取文件。</td></tr><tr><td>w</td><td>打开一个文本文件，允许写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会从文件的开头写入内容。如果文件存在，则该会被截断为零长度，重新写入。</td></tr><tr><td>a</td><td>打开一个文本文件，以追加模式写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会在已有的文件内容中追加内容。</td></tr><tr><td>r+</td><td>打开一个文本文件，允许读写文件。</td></tr><tr><td>w+</td><td>打开一个文本文件，允许读写文件。如果文件已存在，则文件会被截断为零长度，如果文件不存在，则会创建一个新文件。</td></tr><tr><td>a+</td><td>打开一个文本文件，允许读写文件。如果文件不存在，则会创建一个新文件。读取会从文件的开头开始，写入则只能是追加模式。</td></tr></tbody></table><p>如果是二进制文件，则需要以下访问模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;rb&quot;, &quot;wb&quot;, &quot;ab&quot;, &quot;rb+&quot;, &quot;r+b&quot;, &quot;wb+&quot;, &quot;w+b&quot;, &quot;ab+&quot;, &quot;a+b&quot;</span><br></pre></td></tr></table></figure><h1 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h1><p>通过函数fclose可关闭文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fclose</span><span class="params">( FILE *fp )</span>;</span><br></pre></td></tr></table></figure><p>如果成功关闭文件，<strong>fclose( )</strong> 函数返回零，如果关闭文件时发生错误，函数返回 <strong>EOF</strong>。这个函数实际上，会清空缓冲区中的数据，关闭文件，并释放用于该文件的所有内存。EOF 是一个定义在头文件 <strong>stdio.h</strong> 中的常量</p><h1 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h1><p>我们有许多文件写入的函数，其中fputc和fputs最常见，其中fputc是写入单个字符，fputs是写入字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">( <span class="type">int</span> c, FILE *fp )</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fputs</span><span class="params">( <span class="type">const</span> <span class="type">char</span> *s, FILE *fp )</span>;</span><br></pre></td></tr></table></figure><p>举个栗子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line">   fp = fopen(<span class="string">&quot;E:/test/1.txt&quot;</span>, <span class="string">&quot;w+&quot;</span>);</span><br><span class="line">   <span class="built_in">fprintf</span>(fp, <span class="string">&quot;I love you...\n&quot;</span>);</span><br><span class="line">   <span class="built_in">fputs</span>(<span class="string">&quot;You are beautiful...\n&quot;</span>, fp);</span><br><span class="line">   fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h1><p>读取文件有三种常用函数：fgetc，fgets，fscanf</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fgetc</span><span class="params">( FILE * fp )</span>;</span><br><span class="line"><span class="type">char</span> *<span class="title function_">fgets</span><span class="params">( <span class="type">char</span> *buf, <span class="type">int</span> n, FILE *fp )</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fscanf</span><span class="params">(FILE *fp, <span class="type">const</span> <span class="type">char</span> *format, ...)</span> </span><br></pre></td></tr></table></figure><p>函数**fgetc()**只读取一个字符</p><p>函数 <strong>fgets()</strong> 从 fp 所指向的输入流中读取 n - 1 个字符。它会把读取的字符串复制到缓冲区 <strong>buf</strong>，并在最后追加一个 <strong>null</strong> 字符来终止字符串。</p><p>如果这个函数在读取最后一个字符之前就遇到一个换行符 ‘\n’ 或文件的末尾 EOF，则只会返回读取到的字符，包括换行符。也可以使用 <strong>int fscanf(FILE *fp, const char *format, …)</strong> 函数来从文件中读取字符串，但是在遇到第一个空格和换行符时，它会停止读取。</p><p>举个栗子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">   <span class="type">char</span> buff[<span class="number">255</span>];</span><br><span class="line"> </span><br><span class="line">   fp = fopen(<span class="string">&quot;E:/test/1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">   <span class="built_in">fscanf</span>(fp, <span class="string">&quot;%s&quot;</span>, buff);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;1: %s\n&quot;</span>, buff );</span><br><span class="line"> </span><br><span class="line">   fgets(buff, <span class="number">255</span>, (FILE*)fp);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;2: %s\n&quot;</span>, buff );</span><br><span class="line">   </span><br><span class="line">   fgets(buff, <span class="number">255</span>, (FILE*)fp);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;3: %s\n&quot;</span>, buff );</span><br><span class="line">   fclose(fp);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会读取上一部分创建的文件，产生下列结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1: I</span><br><span class="line">2:  love you...</span><br><span class="line">3:You are beautiful...</span><br></pre></td></tr></table></figure><p>首先，<strong>fscanf()</strong> 方法只读取了 <strong>I</strong>，因为它在后边遇到了一个空格。其次，调用 <strong>fgets()</strong> 读取剩余的部分，直到行尾。最后，调用 <strong>fgets()</strong> 完整地读取第二行。</p><h1 id="二进制I-x2F-O函数"><a href="#二进制I-x2F-O函数" class="headerlink" title="二进制I&#x2F;O函数"></a>二进制I&#x2F;O函数</h1><p>下面两个函数用于二进制输入和输出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> <span class="title function_">fread</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">size_t</span> size_of_elements, </span></span><br><span class="line"><span class="params">             <span class="type">size_t</span> number_of_elements, FILE *a_file)</span>;</span><br><span class="line">              </span><br><span class="line"><span class="type">size_t</span> <span class="title function_">fwrite</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *ptr, <span class="type">size_t</span> size_of_elements, </span></span><br><span class="line"><span class="params">             <span class="type">size_t</span> number_of_elements, FILE *a_file)</span>;</span><br></pre></td></tr></table></figure><p>这两个函数都是用于存储块的读写 - 通常是数组或结构体。</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言基础之结构体</title>
      <link href="/2023/01/09/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%BB%93%E6%9E%84%E4%BD%93/"/>
      <url>/2023/01/09/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%BB%93%E6%9E%84%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h1><p>有三种定义方法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">int</span> high;</span><br><span class="line">&#125;stu;<span class="comment">//其中stu为结构体变量，Student为结构体名字，这个结构体名字可以省略，于是就有第二种定义法</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">int</span> high;</span><br><span class="line">&#125;stu;</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以不省去结构体名称，在接下来的步骤中去定义变量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">int</span> high;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stu</span>;</span></span><br></pre></td></tr></table></figure><h1 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h1><p>typedef可以重新定义结构体类型，简化定义变量时的步骤</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">int</span> high;</span><br><span class="line">&#125;Student;<span class="comment">//将struct Student类重新命名为Student</span></span><br><span class="line">Student stu;<span class="comment">//通过Student直接定义新的结构体变量</span></span><br></pre></td></tr></table></figure><h1 id="结构体嵌套"><a href="#结构体嵌套" class="headerlink" title="结构体嵌套"></a>结构体嵌套</h1><p>结构体是一种支持多层嵌套的类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Birthday</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> year;</span><br><span class="line">    <span class="type">int</span> month;</span><br><span class="line">    <span class="type">int</span> day;</span><br><span class="line">&#125;Birthday;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">int</span> high;</span><br><span class="line">    Birthday birthday;<span class="comment">//将结构体Birthday嵌套进Student中</span></span><br><span class="line">&#125;Student;</span><br><span class="line">Student stu;</span><br><span class="line"><span class="comment">//访问</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;student name:%s student birthday:%d-%d-%d&quot;</span>,stu.name,stu.birthday.year,stu.birthday.month,stu.birthday.day);</span><br></pre></td></tr></table></figure><h1 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h1><p>结构体也是一种类型，所以可以使用数组来储存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">int</span> high;</span><br><span class="line">&#125;Student;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printStudentinfo</span><span class="params">(Student *stu,<span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;name:%s\tid:%d\thigh:%d\n&quot;</span>,(stu+i)-&gt;name,(stu+i)-&gt;id,(stu+i)-&gt;high);<span class="comment">//若用指针访问元素则用-&gt;,若用数组访问可以用stu[i].name</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Student stus[]=&#123;</span><br><span class="line">        &#123;<span class="string">&quot;zhangsan&quot;</span>,<span class="number">01</span>,<span class="number">190</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;lisi&quot;</span>,<span class="number">02</span>,<span class="number">192</span>&#125;</span><br><span class="line">    &#125;;<span class="comment">//定义结构体数组</span></span><br><span class="line">    printStudentinfo(stus,<span class="number">2</span>);<span class="comment">//利用函数打印结构体数组</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/01/09/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%BB%93%E6%9E%84%E4%BD%93/%E7%BB%93%E6%9E%84%E4%BD%93%E6%95%B0%E7%BB%84.png"></p><h1 id="位域"><a href="#位域" class="headerlink" title="位域"></a>位域</h1><p>通过位域可以指定使用空间储存的位数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> a:<span class="number">4</span>;<span class="comment">//规定a不能超过4位</span></span><br><span class="line">    unsighed b:<span class="number">1</span>;<span class="comment">//规定b不能超过1位</span></span><br><span class="line">&#125;bit,*pbit;</span><br><span class="line"></span><br><span class="line">bit.a=<span class="number">8</span>;<span class="comment">//若bit.a大于8，则只会留下位域内的值，其余值将丢弃</span></span><br><span class="line">bit.b=<span class="number">1</span>;</span><br><span class="line">pbit=&amp;bit;</span><br><span class="line">pbit-&gt;a=<span class="number">9</span>;<span class="comment">//此步超过了位域，则pbit-&gt;a变为0，因为9用二进制表示为10000</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结构体题型后续更新……</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无谓的焦躁</title>
      <link href="/2023/01/08/%E6%97%A0%E8%B0%93%E7%9A%84%E7%84%A6%E8%BA%81/"/>
      <url>/2023/01/08/%E6%97%A0%E8%B0%93%E7%9A%84%E7%84%A6%E8%BA%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="焦躁起源"><a href="#焦躁起源" class="headerlink" title="焦躁起源"></a>焦躁起源</h1><p>  不知怎么的，最近莫名的焦躁在心里循环往复，像水蛭一点一点地正吸食着我的鲜血，我无法排解。人们总是把不好的情感归于他人，我当然也不例外。我习惯性的将这种情感归咎于我的家人，因为我不知道到底该归咎于谁。我开始绝食，就连自己都不知道绝食的原因是什么。我无法承认这都是自己的过错，原因竟是我很焦躁。我把这种焦躁称为无谓的焦躁，慢慢地，我看清了这种焦躁，这是自己奢望预期却难以达到目标的一种挫败感，我们享受每一次成就，享受别人的夸赞，但挫败感会将所有人拉向深渊，难以挣脱。于是焦躁应运而生，无法消去。</p><p><img src="/2023/01/08/%E6%97%A0%E8%B0%93%E7%9A%84%E7%84%A6%E8%BA%81/flower.WEBP"></p><h1 id="焦躁埋藏"><a href="#焦躁埋藏" class="headerlink" title="焦躁埋藏"></a>焦躁埋藏</h1><p>  无法释怀的焦躁感往往将人拖垮，我们能做的只有将焦躁埋藏。面对这个世界，我从未感受到真实，有的只是虚无缥缈的破败感。所谓的人情世故，所谓的社交关系，也就是假笑应付了事。我常常在思考一个问题，如果一块表走得不准，那它每一秒都是错的，如果这表停了，那它起码每天有两次是对的。我的意思是，生活中或许我应该放弃一些事情，才能将焦躁埋藏。</p><p><img src="/2023/01/08/%E6%97%A0%E8%B0%93%E7%9A%84%E7%84%A6%E8%BA%81/umbrella.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 博主情感录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 情感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Happy new year</title>
      <link href="/2023/01/01/Happy-new-year/"/>
      <url>/2023/01/01/Happy-new-year/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="新年快乐！！！"><a href="#新年快乐！！！" class="headerlink" title="新年快乐！！！"></a>新年快乐！！！</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>The story of you and sun</title>
      <link href="/2022/12/31/The-story-of-you-and-sun/"/>
      <url>/2022/12/31/The-story-of-you-and-sun/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="http://www.hshdweb.cn/?p=32">你与阳光的故事</a><br>  每个人都有年少，每个人都会在年少中徘徊，想要一直抓住青春的尾巴，但青春是抓不住的，到头来也能是回忆青春残存的美好，在脑海深处去拽出那唯一一点舍不得丢掉的东西。<br>  每个男孩的青春里都曾住过一个足以用一生去释怀的女孩。你与这个女孩的开始可能是一次偶遇，可能是一次交流，可能是一起成为同桌互相学习，可能是久识情感的升温。这个女孩扰乱了你原本风平浪静的心，在心里荡漾起来春心。你会无时无刻不在想念她，无时无刻不在关心她。但你总是藏在角落，你害怕在阳光下暴露自己，你害怕阳光不愿意接受你，你更害怕失去阳光，所以你只能在角落偷偷看着阳光，因为只有这样你才能在某个瞬间得到一点阳光的温暖。你会记下每一次阳光来临时的感受，夸赞她对你来说是多么重要，以及她对你施舍的那一点温暖是多么珍贵，你总是这样麻痹自己。但好像阳光照耀的总是世界，你又有几分实力与世界去抢夺阳光。<br>  直到有一天，你发现自己的青春好像要结束了，在角落的你那仅存的一点阳光似乎将要离去，你不甘心，所以你开始觉悟，你要将阳光留在这里。你筹划好一切，在阳光下暴露了自己，但好像阳光对你却心生胆怯，用几朵你知道是炊烟所化的浮云打发了你。从此，你好像看不到阳光了，但你从来不会忘记阳光那微不足道的温暖。你妄想那几朵浮云终会散开，你终会与阳光我再见，但你错了，阳光不会撕开浮云，因为那本来就是为躲避你所准备的。<br>  是啊，你悲伤，你心痛，你想向阳光乞求同情。你保持与阳光交流，保持向阳光诉说，阳光没对你有任何答复。你安慰自己阳光是很忙的，等空下来一定会答复你，可在阳光眼里，你比乌云更另她烦躁，她从来不想给你任何答复，哪怕她正无聊得发呆。童话中的美好故事，都往往只是为了满足人们对美好的向往所编撰，现实中的阳光，不会因你而停留，她只会为夏至停留，并且也只是停留一小会儿罢了。<br>  你回到了你自己的角落，只能眼睁睁地看着阳光离开，大道理你都懂，但你无法控制你自己，你躲在角落，哭泣，悔恨。你痛恨自己的无能，痛恨自己的懦弱，18 岁的你迷茫又浮躁，想要车，想要房子，爱情，想要享受生活想去旅行，你那么浮躁，却想看透人生，这便注定了阳光的离去。<br>  三年过去了，来到了大学，看到了很多形形色色的人，但好像对她你还是情有独钟，你坐在桌子前，看着无意间看到了杨绛先生写下的一段话 ：无论什么关系，当情分被消耗殆尽，缘分便走到了终点，把错归咎于自己，并且礼貌的退场，把自己还给自己，把别人还给别人，让花成花，让树成树，从此山水一程，再不相逢，愿来生不见，不欠，不念。此时的你不知道自己到底释没释怀，你只知道这句话真的很让人心痛。</p>]]></content>
      
      
      <categories>
          
          <category> 博主情感录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 情感 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
