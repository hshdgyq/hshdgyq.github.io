<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>tomorrow</title>
      <link href="/2023/03/22/tomorrow/"/>
      <url>/2023/03/22/tomorrow/</url>
      
        <content type="html"><![CDATA[<h1 id="输出明天的时间"><a href="#输出明天的时间" class="headerlink" title="输出明天的时间"></a>输出明天的时间</h1><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">给定如下定义：</span><br><span class="line">struct date_rec</span><br><span class="line">  &#123;</span><br><span class="line">    int day ;</span><br><span class="line">    int month ;</span><br><span class="line">    int year ;</span><br><span class="line">  &#125; ;</span><br><span class="line">  struct date_rec current_date ;</span><br><span class="line">写一个程序包含如下的函数，完成：</span><br><span class="line">(a) 输入current_date的值：</span><br><span class="line">void input_date(struct date_rec *current_date)</span><br><span class="line">(b) 将current_date增加1天：</span><br><span class="line">void increment_date(struct date_rec *current_date)</span><br><span class="line">(c) 显示current_date的值：</span><br><span class="line">void output_date(struct date_rec *current_date)</span><br><span class="line">考虑每个月的实际天数，同时也考虑闰年的情况。</span><br><span class="line"></span><br><span class="line">**输入格式要求：&quot;%d%d%d&quot; 提示信息：&quot;请输入当前日期（年 月 日）：&quot;</span><br><span class="line">**输出格式要求：&quot;当前日期：%d年%d月%d日！&quot; （加1天后的新日期）</span><br><span class="line"></span><br><span class="line">程序运行示例：</span><br><span class="line">请输入当前日期（年 月 日）：2020 5 20</span><br><span class="line">当前日期：2020年5月21日！</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">date_rec</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="type">int</span> day ;</span><br><span class="line">    <span class="type">int</span> month ;</span><br><span class="line">    <span class="type">int</span> year ;</span><br><span class="line">  &#125; ;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">input_date</span><span class="params">(<span class="keyword">struct</span> date_rec *current_date)</span>;<span class="comment">//今天的时间</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">increment_date</span><span class="params">(<span class="keyword">struct</span> date_rec *current_date)</span>;<span class="comment">//计算明天的时间</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">output_date</span><span class="params">(<span class="keyword">struct</span> date_rec *current_date)</span>;<span class="comment">//输出明天的时间</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">date_rec</span> *<span class="title">today</span>=</span><span class="built_in">malloc</span>(<span class="number">50</span>*<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    input_date(today);</span><br><span class="line">    increment_date(today);</span><br><span class="line">    output_date(today);</span><br><span class="line">    <span class="built_in">free</span>(today);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">input_date</span><span class="params">(<span class="keyword">struct</span> date_rec *current_date)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入当前日期（年 月 日）：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;current_date-&gt;year,&amp;current_date-&gt;month,&amp;current_date-&gt;day);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">increment_date</span><span class="params">(<span class="keyword">struct</span> date_rec *current_date)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(current_date-&gt;month==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(current_date-&gt;year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;current_date-&gt;year%<span class="number">100</span>!=<span class="number">0</span>||current_date-&gt;year%<span class="number">400</span>==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(current_date-&gt;day==<span class="number">29</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                current_date-&gt;day=<span class="number">1</span>;</span><br><span class="line">                current_date-&gt;month+=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            current_date-&gt;day+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(current_date-&gt;day==<span class="number">28</span>)</span><br><span class="line">            &#123;</span><br><span class="line">            current_date-&gt;day=<span class="number">1</span>;</span><br><span class="line">            current_date-&gt;month+=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            current_date-&gt;day+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(current_date-&gt;month==<span class="number">1</span>||current_date-&gt;month==<span class="number">3</span>||current_date-&gt;month==<span class="number">5</span>||current_date-&gt;month==<span class="number">7</span>||current_date-&gt;month==<span class="number">8</span>||current_date-&gt;month==<span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(current_date-&gt;day==<span class="number">31</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            current_date-&gt;day=<span class="number">1</span>;</span><br><span class="line">            current_date-&gt;month+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        current_date-&gt;day+=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(current_date-&gt;month==<span class="number">12</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(current_date-&gt;day==<span class="number">31</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            current_date-&gt;day=<span class="number">1</span>;</span><br><span class="line">            current_date-&gt;month=<span class="number">1</span>;</span><br><span class="line">            current_date-&gt;year+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        current_date-&gt;day+=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(current_date-&gt;day==<span class="number">30</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            current_date-&gt;day=<span class="number">1</span>;</span><br><span class="line">            current_date-&gt;month+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        current_date-&gt;day+=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">output_date</span><span class="params">(<span class="keyword">struct</span> date_rec *current_date)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;当前日期：%d年%d月%d日!&quot;</span>,current_date-&gt;year,current_date-&gt;month,current_date-&gt;day);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构体的基本运用。</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言实例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>卡布列克运算</title>
      <link href="/2023/03/22/%E5%8D%A1%E5%B8%83%E5%88%97%E5%85%8B%E8%BF%90%E7%AE%97/"/>
      <url>/2023/03/22/%E5%8D%A1%E5%B8%83%E5%88%97%E5%85%8B%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="验证卡布列克运算"><a href="#验证卡布列克运算" class="headerlink" title="验证卡布列克运算"></a>验证卡布列克运算</h1><p>验证卡布列克运算。即：任意一个四位数，只要它们各个位上的数字是不全相同的，就有这样的规律：</p><p>（1）将组成该四位数的四个数字由大到小排列，形成由这四个数字构成的最大的四位数；</p><p>（2）将组成该四位数的四个数字由小到大排列，形成由这四个数字构成的最小的四位数（如果四个数字中含有0，则得到的数不足四位）；</p><p>（3）求两个数的差，得到一个新的四位数（高位零保留）。</p><p>重复以上过程，最后得到的结果总是6174。这个数被称为卡布列克常数。请编写一个递归函数，完成以上的卡布列克运算。</p><p>输入格式要求：”%d” 提示信息：”Enter number:”</p><p>输出格式要求：” [%d]:%d-%d&#x3D;%d\n”</p><p>程序运行示例如下：</p><p>Enter number: 1234</p><p>【1】：4321-1234&#x3D;3087</p><p>【2】：8730-378&#x3D;8352</p><p>【3】：8532-2358&#x3D;6174</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">kabrack</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> cnt)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">4</span>],min,max,temp;</span><br><span class="line">    <span class="comment">//将各位数存进数组</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=n%<span class="number">10</span>;</span><br><span class="line">        n=n/<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将数组中数字从大到小排列</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&lt;a[j])</span><br><span class="line">            &#123;</span><br><span class="line">                temp=a[i];</span><br><span class="line">                a[i]=a[j];</span><br><span class="line">                a[j]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算排列四位数的最大之和最小值</span></span><br><span class="line">    max=<span class="number">1000</span>*a[<span class="number">0</span>]+<span class="number">100</span>*a[<span class="number">1</span>]+<span class="number">10</span>*a[<span class="number">2</span>]+a[<span class="number">3</span>];</span><br><span class="line">    min=<span class="number">1000</span>*a[<span class="number">3</span>]+<span class="number">100</span>*a[<span class="number">2</span>]+<span class="number">10</span>*a[<span class="number">1</span>]+a[<span class="number">0</span>];</span><br><span class="line">    n=max-min;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; [%d]:%d-%d=%d\n&quot;</span>,cnt,max,min,n);</span><br><span class="line">    <span class="comment">//当结果为0时直接退出</span></span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; [%d]:%d-%d=%04d\n&quot;</span>,cnt,max,min,n);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//得到结果退出</span></span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">6174</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//没得到继续递归</span></span><br><span class="line">    kabrack(n,cnt+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">1</span>,n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter number:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    kabrack(n,cnt);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基础的数组运用。</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之BABYRE</title>
      <link href="/2023/03/21/reserve%E4%B9%8BBABYRE/"/>
      <url>/2023/03/21/reserve%E4%B9%8BBABYRE/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界-BABYRE"><a href="#攻防世界-BABYRE" class="headerlink" title="攻防世界 BABYRE"></a>攻防世界 BABYRE</h1><h3 id="首先查壳发现无壳"><a href="#首先查壳发现无壳" class="headerlink" title="首先查壳发现无壳"></a>首先查壳发现无壳</h3><h3 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h3><p><img src="/2023/03/21/reserve%E4%B9%8BBABYRE/key1.png"></p><p>发现关键在于这个判断的函数，但是这个函数被异或加密了，点不进去，那么将这个函数重新亦或回来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> idc_bc695 <span class="keyword">import</span>*</span><br><span class="line">add=<span class="number">0x600B00</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">182</span>):</span><br><span class="line">    PatchByte(add+i,Byte(add+i)^<span class="number">0xC</span>)</span><br></pre></td></tr></table></figure><p>发现judge函数值变化了，按C再按P，最后得到了这个函数</p><p><img src="/2023/03/21/reserve%E4%B9%8BBABYRE/key2.png"></p><p>通过这个函数我们可以知道flag应该就是三段字符对自己的数位置进行亦或，那么可以编写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">val=<span class="string">&quot;fmcd\x7Fk7d;V`;np&quot;</span></span><br><span class="line"></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(val)):</span><br><span class="line">  flag+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(val[i])^i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#PatchByte(重定地址，对应重定结果）</span></span><br></pre></td></tr></table></figure><p>最后得到flag：flag{n1c3_j0b}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这种对函数进行操作隐藏的题还是第一次见到，主要就是将函数进行复原。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之re4-unvm-me</title>
      <link href="/2023/03/21/reserve%E4%B9%8Bre4-unvm-me/"/>
      <url>/2023/03/21/reserve%E4%B9%8Bre4-unvm-me/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界-re4-unvm-me"><a href="#攻防世界-re4-unvm-me" class="headerlink" title="攻防世界 re4-unvm-me"></a>攻防世界 re4-unvm-me</h1><h3 id="首先查壳发现无壳"><a href="#首先查壳发现无壳" class="headerlink" title="首先查壳发现无壳"></a>首先查壳发现无壳</h3><h3 id="发现这是python反编文件"><a href="#发现这是python反编文件" class="headerlink" title="发现这是python反编文件"></a>发现这是python反编文件</h3><p>将其进行反编，得到代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> md5</span><br><span class="line">md5s = [</span><br><span class="line">    <span class="number">0x831DAA3C843BA8B087C895F0ED305CE7L</span>,</span><br><span class="line">    <span class="number">0x6722F7A07246C6AF20662B855846C2C8L</span>,</span><br><span class="line">    <span class="number">0x5F04850FEC81A27AB5FC98BEFA4EB40CL</span>,</span><br><span class="line">    <span class="number">0xECF8DCAC7503E63A6A3667C5FB94F610L</span>,</span><br><span class="line">    <span class="number">0xC0FD15AE2C3931BC1E140523AE934722L</span>,</span><br><span class="line">    <span class="number">0x569F606FD6DA5D612F10CFB95C0BDE6DL</span>,</span><br><span class="line">    <span class="number">0x68CB5A1CF54C078BF0E7E89584C1A4EL</span>,</span><br><span class="line">    <span class="number">0xC11E2CD82D1F9FBD7E4D6EE9581FF3BDL</span>,</span><br><span class="line">    <span class="number">0x1DF4C637D625313720F45706A48FF20FL</span>,</span><br><span class="line">    <span class="number">0x3122EF3A001AAECDB8DD9D843C029E06L</span>,</span><br><span class="line">    <span class="number">0xADB778A0F729293E7E0B19B96A4C5A61L</span>,</span><br><span class="line">    <span class="number">0x938C747C6A051B3E163EB802A325148EL</span>,</span><br><span class="line">    <span class="number">0x38543C5E820DD9403B57BEFF6020596DL</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Can you turn me back to python ? ...&#x27;</span></span><br><span class="line">flag = raw_input(<span class="string">&#x27;well as you wish.. what is the flag: &#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(flag) &gt; <span class="number">69</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;nice try&#x27;</span></span><br><span class="line">    exit()</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(flag) % <span class="number">5</span> != <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;nice try&#x27;</span></span><br><span class="line">    exit()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(flag), <span class="number">5</span>):</span><br><span class="line">    s = flag[i:i + <span class="number">5</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(<span class="string">&#x27;0x&#x27;</span> + md5.new(s).hexdigest(), <span class="number">16</span>) != md5s[i / <span class="number">5</span>]:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;nice try&#x27;</span></span><br><span class="line">        exit()</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Congratz now you have the flag&#x27;</span></span><br></pre></td></tr></table></figure><p>通过分析代码发现实际上就是md5s中的密文进行md5解密，但有一行少一位，在那一行前面补0即可，最后解密后得到</p><p>flag：:ALEXCTF{dv5d4s2vj8nk43s8d8l6m1n5l67ds9v41n52nv37j481h3d28n4b6v3k}</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之tt3441810</title>
      <link href="/2023/03/21/reserve%E4%B9%8Btt3441810/"/>
      <url>/2023/03/21/reserve%E4%B9%8Btt3441810/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界-tt3441810"><a href="#攻防世界-tt3441810" class="headerlink" title="攻防世界 tt3441810"></a>攻防世界 tt3441810</h1><h3 id="首先查壳发现无壳"><a href="#首先查壳发现无壳" class="headerlink" title="首先查壳发现无壳"></a>首先查壳发现无壳</h3><h3 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h3><p>啥也没有</p><h3 id="放进虚拟机"><a href="#放进虚拟机" class="headerlink" title="放进虚拟机"></a>放进虚拟机</h3><p>发现这是一个个ASCII的txt文件，查看文件</p><p><img src="/2023/03/21/reserve%E4%B9%8Btt3441810/key1.png"></p><p>发现都是16进制数，将其通过ASCII码字母的方式进行字母转换</p><p>写出脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">val=<span class="string">&quot;&quot;&quot;  68 66 6C 00 00 48 BF 01  00 00 00 00 00 00 00 48</span></span><br><span class="line"><span class="string">  8D 34 24 48 BA 02 00 00  00 00 00 00 00 48 B8 01</span></span><br><span class="line"><span class="string">  00 00 00 00 00 00 00 0F  05 68 61 67 00 00 48 BF</span></span><br><span class="line"><span class="string">  01 00 00 00 00 00 00 00  48 8D 34 24 48 BA 02 00</span></span><br><span class="line"><span class="string">  00 00 00 00 00 00 48 B8  01 00 00 00 00 00 00 00</span></span><br><span class="line"><span class="string">  0F 05 68 7B 70 00 00 48  BF 01 00 00 00 00 00 00</span></span><br><span class="line"><span class="string">  00 48 8D 34 24 48 BA 02  00 00 00 00 00 00 00 48</span></span><br><span class="line"><span class="string">  B8 01 00 00 00 00 00 00  00 0F 05 68 6F 70 00 00</span></span><br><span class="line"><span class="string">  48 BF 01 00 00 00 00 00  00 00 48 8D 34 24 48 BA</span></span><br><span class="line"><span class="string">  02 00 00 00 00 00 00 00  48 B8 01 00 00 00 00 00</span></span><br><span class="line"><span class="string">  00 00 0F 05 68 70 6F 00  00 48 BF 01 00 00 00 00</span></span><br><span class="line"><span class="string">  00 00 00 48 8D 34 24 48  BA 02 00 00 00 00 00 00</span></span><br><span class="line"><span class="string">  00 48 B8 01 00 00 00 00  00 00 00 0F 05 68 70 72</span></span><br><span class="line"><span class="string">  00 00 48 BF 01 00 00 00  00 00 00 00 48 8D 34 24</span></span><br><span class="line"><span class="string">  48 BA 02 00 00 00 00 00  00 00 48 B8 01 00 00 00</span></span><br><span class="line"><span class="string">  00 00 00 00 0F 05 68 65  74 00 00 48 BF 01 00 00</span></span><br><span class="line"><span class="string">  00 00 00 00 00 48 8D 34  24 48 BA 02 00 00 00 00</span></span><br><span class="line"><span class="string">  00 00 00 48 B8 01 00 00  00 00 00 00 00 0F 05 68</span></span><br><span class="line"><span class="string">  7D 0A 00 00 48 BF 01 00  00 00 00 00 00 00 48 8D</span></span><br><span class="line"><span class="string">  34 24 48 BA 02 00 00 00  00 00 00 00 48 B8 01 00</span></span><br><span class="line"><span class="string">  00 00 00 00 00 00 0F 05  48 31 FF 48 B8 3C 00 00</span></span><br><span class="line"><span class="string">  00 00 00 00 00 0F 05  &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line">flag1=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> val.replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>).split(<span class="string">&quot; &quot;</span>):</span><br><span class="line">    key=key.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> key:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">97</span>&lt;=<span class="built_in">int</span>(key,<span class="number">16</span>)&lt;=<span class="number">127</span> <span class="keyword">or</span> <span class="number">65</span>&lt;=<span class="built_in">int</span>(key,<span class="number">16</span>)&lt;=<span class="number">90</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(<span class="built_in">int</span>(key,<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="keyword">if</span> i!=<span class="string">&#x27;H&#x27;</span> <span class="keyword">and</span> i!=<span class="string">&#x27;h&#x27;</span>:</span><br><span class="line">        flag1+=i;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="built_in">print</span>(flag1)</span><br></pre></td></tr></table></figure><p>最后得到flag：flag{poppopret}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在编码时注意这是16进制数，注意字母取值范围。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之流浪者</title>
      <link href="/2023/03/16/reserve%E4%B9%8B%E6%B5%81%E6%B5%AA%E8%80%85/"/>
      <url>/2023/03/16/reserve%E4%B9%8B%E6%B5%81%E6%B5%AA%E8%80%85/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界-流浪者"><a href="#攻防世界-流浪者" class="headerlink" title="攻防世界 流浪者"></a>攻防世界 流浪者</h1><h3 id="首先查壳发现无壳"><a href="#首先查壳发现无壳" class="headerlink" title="首先查壳发现无壳"></a>首先查壳发现无壳</h3><h3 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h3><p><img src="/2023/03/16/reserve%E4%B9%8B%E6%B5%81%E6%B5%AA%E8%80%85/key1.png"></p><p><img src="/2023/03/16/reserve%E4%B9%8B%E6%B5%81%E6%B5%AA%E8%80%85/key2.png"></p><p>跟进sub_401770函数可以发现pass，那么可以确定flag一定藏在这串字符中</p><p>分析发现v4是关键点，从第一串字符中找到第二串字符对应的下标就是v4，找到v4后发现v4并不是flag，继续找函数</p><p><img src="/2023/03/16/reserve%E4%B9%8B%E6%B5%81%E6%B5%AA%E8%80%85/key3.png"></p><p>刚刚找到的v4就是此时的v5，那么可以知道str就是要求的flag</p><h3 id="逆向写出脚本"><a href="#逆向写出脚本" class="headerlink" title="逆向写出脚本"></a>逆向写出脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">val1 = <span class="string">&quot;abcdefghiABCDEFGHIJKLMNjklmn0123456789opqrstuvwxyzOPQRSTUVWXYZ&quot;</span></span><br><span class="line"></span><br><span class="line">val2= <span class="string">&quot;KanXueCTF2019JustForhappy&quot;</span></span><br><span class="line"></span><br><span class="line">val3 = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">key = []</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(val2)):</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(val1)):</span><br><span class="line">        <span class="keyword">if</span> val2[i]==val1[n]:</span><br><span class="line">            key.append(n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> key:</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span>&lt;=i&lt;=<span class="number">9</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(i+<span class="number">48</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="number">9</span>&lt;i&lt;=<span class="number">35</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(i+<span class="number">87</span>)</span><br><span class="line">    <span class="keyword">if</span> i&gt;<span class="number">35</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(i+<span class="number">29</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>flag：j0rXI4bTeustBiIGHeCF70DDM</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>此次题目在提取出key后又进行了加密，需要对加密函数有较深理解。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之hackme</title>
      <link href="/2023/03/14/reserve%E4%B9%8Bhackme/"/>
      <url>/2023/03/14/reserve%E4%B9%8Bhackme/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界-hackme"><a href="#攻防世界-hackme" class="headerlink" title="攻防世界 hackme"></a>攻防世界 hackme</h1><h3 id="查壳发现无壳"><a href="#查壳发现无壳" class="headerlink" title="查壳发现无壳"></a>查壳发现无壳</h3><h3 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h3><p>追踪并找到sub_400F8E函数</p><p><img src="/2023/03/14/reserve%E4%B9%8Bhackme/key1.png"></p><h3 id="脚本编写"><a href="#脚本编写" class="headerlink" title="脚本编写"></a>脚本编写</h3><p>python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">val=[<span class="number">0x5F</span>, <span class="number">0xF2</span>, <span class="number">0x5E</span>, <span class="number">0x8B</span>, <span class="number">0x4E</span>, <span class="number">0x0E</span>, <span class="number">0xA3</span>, <span class="number">0xAA</span>, <span class="number">0xC7</span>, <span class="number">0x93</span>,</span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x3D</span>, <span class="number">0x5F</span>, <span class="number">0x74</span>, <span class="number">0xA3</span>, <span class="number">0x09</span>, <span class="number">0x91</span>, <span class="number">0x2B</span>, <span class="number">0x49</span>, <span class="number">0x28</span>,</span><br><span class="line">  <span class="number">0x93</span>, <span class="number">0x67</span>]</span><br><span class="line"></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">22</span>):</span><br><span class="line">    v19=<span class="number">0</span></span><br><span class="line">    v16=val[i]</span><br><span class="line">    v18=<span class="number">0</span></span><br><span class="line">    v14=i+<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> v18&lt;v14:</span><br><span class="line">        v18+=<span class="number">1</span></span><br><span class="line">        v19= <span class="number">1828812941</span> * v19 + <span class="number">12345</span></span><br><span class="line">    flag+=<span class="built_in">chr</span>((v19^val[i])&amp;<span class="number">0xff</span>) <span class="comment">#将结果与0xff进行与运算可以取到前八位</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>c语言</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> val[] = &#123; <span class="number">0x5F</span>, <span class="number">0xF2</span>, <span class="number">0x5E</span>, <span class="number">0x8B</span>, <span class="number">0x4E</span>, <span class="number">0x0E</span>, <span class="number">0xA3</span>, <span class="number">0xAA</span>, <span class="number">0xC7</span>, <span class="number">0x93</span>,</span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x3D</span>, <span class="number">0x5F</span>, <span class="number">0x74</span>, <span class="number">0xA3</span>, <span class="number">0x09</span>, <span class="number">0x91</span>, <span class="number">0x2B</span>, <span class="number">0x49</span>, <span class="number">0x28</span>,</span><br><span class="line">  <span class="number">0x93</span>, <span class="number">0x67</span> &#125;;</span><br><span class="line">    <span class="type">char</span> flag[<span class="number">23</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> v19,v18,v14;</span><br><span class="line">    <span class="type">char</span> v16;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">22</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v19 = <span class="number">0</span>;</span><br><span class="line">        v16 = val[i];</span><br><span class="line">        v18 = <span class="number">0</span>;</span><br><span class="line">        v14 = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (v18 &lt; v14)</span><br><span class="line">        &#123;</span><br><span class="line">            ++v18;</span><br><span class="line">            v19 = <span class="number">1828812941</span> * v19 + <span class="number">12345</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        flag[i] = v19 ^ v16; <span class="comment">//c语言在数值溢出后不会报错，他会直接取到前八位</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, flag);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flag：flag{d826e6926098ef46}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这道提解题关键在于do-while循环，循环次数i比较难以理解，注意python中取到前八位应该&amp;0xff。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之elround32</title>
      <link href="/2023/03/14/reserve%E4%B9%8Belround32/"/>
      <url>/2023/03/14/reserve%E4%B9%8Belround32/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界-elround"><a href="#攻防世界-elround" class="headerlink" title="攻防世界 elround"></a>攻防世界 elround</h1><h3 id="首先查壳发现无壳"><a href="#首先查壳发现无壳" class="headerlink" title="首先查壳发现无壳"></a>首先查壳发现无壳</h3><h3 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h3><p><img src="/2023/03/14/reserve%E4%B9%8Belround32/key1.png"></p><p>根据提示跟进sub_8048538</p><p><img src="/2023/03/14/reserve%E4%B9%8Belround32/key2.png"></p><p>发现flag就是v2[i]^a[i%8]的所有值，而通过qmemcpy可以提取到v2的数据，但是a1是多少呢跟进sub_8048414函数</p><p><img src="/2023/03/14/reserve%E4%B9%8Belround32/key3.png"></p><p>发现a2取到0,1,3,4,5,6,7,9时可以得到一个a1的字符，初始a2&#x3D;0；后面每一次循环都有a2&#x3D;7*(a2+1)%11,a1&#x3D;a1+1，但是在这几种情况外的情况出现时会直接跳出循环。</p><h3 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">val=[<span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x1F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x1C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x12</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x42</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x44</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x2D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x37</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x59</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x1E</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x59</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x1C</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x36</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x55</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x41</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x14</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line"></span><br><span class="line">val2=[]</span><br><span class="line"></span><br><span class="line">val3=<span class="string">&quot;&quot;</span></span><br><span class="line">a2=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> a2==<span class="number">0</span>:</span><br><span class="line">        val3+=<span class="string">&#x27;i&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> a2==<span class="number">1</span>:</span><br><span class="line">        val3+=<span class="string">&#x27;e&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> a2==<span class="number">3</span>:</span><br><span class="line">        val3+=<span class="string">&#x27;n&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> a2==<span class="number">4</span>:</span><br><span class="line">        val3+=<span class="string">&#x27;d&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> a2==<span class="number">5</span>:</span><br><span class="line">        val3+=<span class="string">&#x27;a&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> a2==<span class="number">6</span>:</span><br><span class="line">        val3+=<span class="string">&#x27;g&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> a2==<span class="number">7</span>:</span><br><span class="line">        val3+=<span class="string">&#x27;s&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> a2==<span class="number">9</span>:</span><br><span class="line">        val3+=<span class="string">&#x27;r&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    a2=<span class="number">7</span>*(a2+<span class="number">1</span>)%<span class="number">11</span></span><br><span class="line"></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(val),<span class="number">4</span>):</span><br><span class="line">    val2.append(val[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(val2)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>(val2[i]^<span class="built_in">ord</span>(val3[i%<span class="number">8</span>]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(val3)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>flag：flag{s0me7hing_S0me7hinG_t0lki3n}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>对于这道题，应关注每次循环程序运行到的地方，答案的抽取一定是在提示的字符中。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之secret-galaxy-300</title>
      <link href="/2023/03/11/reserve%E4%B9%8Bsecret-galaxy-300/"/>
      <url>/2023/03/11/reserve%E4%B9%8Bsecret-galaxy-300/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界-secret-galaxy-300"><a href="#攻防世界-secret-galaxy-300" class="headerlink" title="攻防世界 secret-galaxy-300"></a>攻防世界 secret-galaxy-300</h1><h3 id="查壳发现无壳"><a href="#查壳发现无壳" class="headerlink" title="查壳发现无壳"></a>查壳发现无壳</h3><h3 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h3><p><img src="/2023/03/11/reserve%E4%B9%8Bsecret-galaxy-300/key1.png"></p><p>并没有看到可以输出flag的函数，继续跟踪，发现了一个可以输出字符串的函数，推测这就是flag函数</p><p><img src="/2023/03/11/reserve%E4%B9%8Bsecret-galaxy-300/key2.png"></p><p>这里可以进行脚本编写得到flag，也可以在od中直接动态调试</p><p><img src="/2023/03/11/reserve%E4%B9%8Bsecret-galaxy-300/flag.png"></p><p>把断点设在这个字符串函数的入口，即004013E0，然后防止程序直接退出，再在return处设个断点，即00401519处，直接运行，回找运行过程，发现flag</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这道题感觉挺难得，需要找到flag对应的函数。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之re2-cpp-is-awesome</title>
      <link href="/2023/03/11/reserve%E4%B9%8Bre2-cpp-is-awesome/"/>
      <url>/2023/03/11/reserve%E4%B9%8Bre2-cpp-is-awesome/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界-re2-cpp-is-awesome"><a href="#攻防世界-re2-cpp-is-awesome" class="headerlink" title="攻防世界 re2-cpp-is-awesome"></a>攻防世界 re2-cpp-is-awesome</h1><h3 id="查壳发现无壳"><a href="#查壳发现无壳" class="headerlink" title="查壳发现无壳"></a>查壳发现无壳</h3><h3 id="分析代码"><a href="#分析代码" class="headerlink" title="分析代码"></a>分析代码</h3><p><img src="/2023/03/11/reserve%E4%B9%8Bre2-cpp-is-awesome/key1.png"></p><p>这里发现只要v8与后面那个函数值相等就能获得提示成功，那么推断v8就是flag</p><p>追踪可得到数组下标的值</p><p><img src="/2023/03/11/reserve%E4%B9%8Bre2-cpp-is-awesome/key2.png"></p><p>shift+e把数据提取出来</p><p>跟踪off_6020A0可以得到一串字符串</p><p>L3t_ME_T3ll_Y0u_S0m3th1ng_1mp0rtant_A_{FL4G}_W0nt_b3_3X4ctly_th4t_345y_t0_c4ptur3_H0wev3r_1T_w1ll_b3_C00l_1F_Y0u_g0t_1t</p><p>可以知道flag应该就是在这串字符串里提取的，那么就开始写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">val1=<span class="string">&quot;L3t_ME_T3ll_Y0u_S0m3th1ng_1mp0rtant_A_&#123;FL4G&#125;_W0nt_b3_3X4ctly_th4t_345y_t0_c4ptur3_H0wev3r_1T_w1ll_b3_C00l_1F_Y0u_g0t_1t&quot;</span></span><br><span class="line"></span><br><span class="line">val2=[<span class="number">0x24</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x36</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x65</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x27</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x26</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x2D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x56</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x65</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x2D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x16</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x15</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x65</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x29</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x44</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x44</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x44</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x2B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line"><span class="comment">#注意四个数字为一组，24h和align 8 有提示</span></span><br><span class="line"></span><br><span class="line">val3=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(val2),<span class="number">4</span>):</span><br><span class="line">    val3.append(val2[i])</span><br><span class="line"></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(val3)):</span><br><span class="line">    flag+=val1[val3[i]]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>最终得到flag : ALEXCTF{W3_L0v3_C_W1th_CL45535}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>提取数字时一定要注意单个字符提示。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之simple-check-100</title>
      <link href="/2023/03/10/reserve%E4%B9%8Bsimple-check-100/"/>
      <url>/2023/03/10/reserve%E4%B9%8Bsimple-check-100/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界-simple-check-100"><a href="#攻防世界-simple-check-100" class="headerlink" title="攻防世界 simple-check-100"></a>攻防世界 simple-check-100</h1><h3 id="查壳发现无壳"><a href="#查壳发现无壳" class="headerlink" title="查壳发现无壳"></a>查壳发现无壳</h3><p><img src="/2023/03/10/reserve%E4%B9%8Bsimple-check-100/pack.png"></p><h3 id="分析代码"><a href="#分析代码" class="headerlink" title="分析代码"></a>分析代码</h3><p><img src="/2023/03/10/reserve%E4%B9%8Bsimple-check-100/key1.png"></p><p>这里发现只要check为真就可以得到flag，在gdb中调试</p><p>在check函数前设一个断点，单步执行进入check函数，将eax值改为1，即可得到flag</p><p><img src="/2023/03/10/reserve%E4%B9%8Bsimple-check-100/flag.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>理解函数作用，会用gdb调试。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之guess-the-number</title>
      <link href="/2023/03/09/reserve%E4%B9%8Bguess-the-number/"/>
      <url>/2023/03/09/reserve%E4%B9%8Bguess-the-number/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界-guess-the-number"><a href="#攻防世界-guess-the-number" class="headerlink" title="攻防世界 guess-the-number"></a>攻防世界 guess-the-number</h1><h3 id="这是一个压缩文件，首先解压"><a href="#这是一个压缩文件，首先解压" class="headerlink" title="这是一个压缩文件，首先解压"></a>这是一个压缩文件，首先解压</h3><p>解压后发现这是一个java的文件，那么通过jd-gui-1.6.6.jar打开并反汇编它</p><p><img src="/2023/03/09/reserve%E4%B9%8Bguess-the-number/open.png"></p><h3 id="分析代码"><a href="#分析代码" class="headerlink" title="分析代码"></a>分析代码</h3><p><img src="/2023/03/09/reserve%E4%B9%8Bguess-the-number/key1.png"></p><p>这里发现只要my_num&#x2F;5&#x3D;guess_number就能得到flag那么就传入参数309137378</p><p><img src="/2023/03/09/reserve%E4%B9%8Bguess-the-number/flag.png"></p><p>得到flag</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>java文件的处理还是非常生疏的。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之answer_to_everything</title>
      <link href="/2023/03/09/reserve%E4%B9%8Banswer-to-everything/"/>
      <url>/2023/03/09/reserve%E4%B9%8Banswer-to-everything/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界-answer-to-everything"><a href="#攻防世界-answer-to-everything" class="headerlink" title="攻防世界 answer-to-everything"></a>攻防世界 answer-to-everything</h1><h3 id="首先查壳"><a href="#首先查壳" class="headerlink" title="首先查壳"></a>首先查壳</h3><p><img src="/2023/03/09/reserve%E4%B9%8Banswer-to-everything/pack.png"></p><p>发现无壳</p><h3 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h3><p><img src="/2023/03/09/reserve%E4%B9%8Banswer-to-everything/key1.png"></p><p>只发现一个有用的信息，kdudpeh,在这里不知道怎么办了，发现题目本来就有提示sha1，那么这就是需要sha1加密的</p><p><img src="/2023/03/09/reserve%E4%B9%8Banswer-to-everything/flag.png"></p><p>最终得到flag{80ee2a3fe31da904c596d993f7f1de4827c1450a}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>不要忽略了题目的提示。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之EasyRe</title>
      <link href="/2023/03/09/reserve%E4%B9%8BEasyRe/"/>
      <url>/2023/03/09/reserve%E4%B9%8BEasyRe/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界-EasyRe"><a href="#攻防世界-EasyRe" class="headerlink" title="攻防世界 EasyRe"></a>攻防世界 EasyRe</h1><h3 id="首先查壳"><a href="#首先查壳" class="headerlink" title="首先查壳"></a>首先查壳</h3><p><img src="/2023/03/09/reserve%E4%B9%8BEasyRe/easyrepack.png"></p><p>发现无壳</p><h3 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h3><p><img src="/2023/03/09/reserve%E4%B9%8BEasyRe/key1.png"></p><p>发现一个flag，输入发现不对，认真分析代码，发现下面一个字符串才是有用信息</p><p><img src="/2023/03/09/reserve%E4%B9%8BEasyRe/key2.png"></p><p>需要v7为0才能成功，也就是byte_40336C就和刚刚那个字符串相同，提取字符串得到xIrCj~&lt;r|2tWsv3PtI\x7Fzndka，但此时的字符串并不是初始输入的flag，那么根据代码写出脚本将其还原</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">val=<span class="string">&quot;xIrCj~&lt;r|2tWsv3PtI\x7Fzndka&quot;</span></span><br><span class="line"></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(val)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>((<span class="built_in">ord</span>(val[i])^<span class="number">6</span>)-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>但最终并不是flag，而是其颠倒的值，加串代码将其还原</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(flag[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>得到flag : flag{xNqU4otPq3ys9wkDsN}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>注意提取字符串时一定不要漏了字符。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之re1-100</title>
      <link href="/2023/03/09/reserve%E4%B9%8Bre1-100/"/>
      <url>/2023/03/09/reserve%E4%B9%8Bre1-100/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界-re1-100"><a href="#攻防世界-re1-100" class="headerlink" title="攻防世界 re1-100"></a>攻防世界 re1-100</h1><h3 id="首先查壳"><a href="#首先查壳" class="headerlink" title="首先查壳"></a>首先查壳</h3><p><img src="/2023/03/09/reserve%E4%B9%8Bre1-100/re1-100pack.png"></p><p>发现无壳</p><h3 id="扔进ida"><a href="#扔进ida" class="headerlink" title="扔进ida"></a>扔进ida</h3><p><img src="/2023/03/09/reserve%E4%B9%8Bre1-100/key1.png"></p><p>发现{daf29f59034938ae4efd53fc275d81053ed5be8c}有点像flag，输入后发现并不是</p><p><img src="/2023/03/09/reserve%E4%B9%8Bre1-100/key2.png"></p><p>分析代码，发现flag的值应该是分成四段后被打乱了顺序，末态的值是初态经过3412排序得到的，那么重新排回来得到{53fc275d81053ed5be8cdaf29f59034938ae4efd}，输入后还是错的，纠结半天最后把两个大括号去了才对了</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>排序类问题，主要分析函数作用以及提示。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之parallel-comparator-200</title>
      <link href="/2023/03/09/reserve%E4%B9%8Bparallel-comparator-200/"/>
      <url>/2023/03/09/reserve%E4%B9%8Bparallel-comparator-200/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界-parallel-comparator-200"><a href="#攻防世界-parallel-comparator-200" class="headerlink" title="攻防世界 parallel-comparator-200"></a>攻防世界 parallel-comparator-200</h1><h3 id="打开-c文件"><a href="#打开-c文件" class="headerlink" title="打开 c文件"></a>打开 c文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FLAG_LEN 20</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> * <span class="title function_">checking</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *result = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="type">char</span> *argument = (<span class="type">char</span> *)arg;</span><br><span class="line">    *result = (argument[<span class="number">0</span>]+argument[<span class="number">1</span>]) ^ argument[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">highly_optimized_parallel_comparsion</span><span class="params">(<span class="type">char</span> *user_string)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> initialization_number;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">char</span> generated_string[FLAG_LEN + <span class="number">1</span>];</span><br><span class="line">    generated_string[FLAG_LEN] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((initialization_number = random()) &gt;= <span class="number">64</span>);<span class="comment">//37</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> first_letter;</span><br><span class="line">    first_letter = (initialization_number % <span class="number">26</span>) + <span class="number">97</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;the first_letter is %d&quot;</span>,first_letter);</span><br><span class="line"></span><br><span class="line">    <span class="type">pthread_t</span> thread[FLAG_LEN];</span><br><span class="line">    <span class="type">char</span> differences[FLAG_LEN] = &#123;<span class="number">0</span>, <span class="number">9</span>, <span class="number">-9</span>, <span class="number">-1</span>, <span class="number">13</span>, <span class="number">-13</span>, <span class="number">-4</span>, <span class="number">-11</span>, <span class="number">-9</span>, <span class="number">-1</span>, <span class="number">-7</span>, <span class="number">6</span>, <span class="number">-13</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">-13</span>, <span class="number">-11</span>, <span class="number">6</span>, <span class="number">-7</span>&#125;;</span><br><span class="line">    <span class="type">char</span> *arguments[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; FLAG_LEN; i++) &#123;</span><br><span class="line">        arguments[i] = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">3</span>*<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">        arguments[i][<span class="number">0</span>] = first_letter;<span class="comment">//108</span></span><br><span class="line">        arguments[i][<span class="number">1</span>] = differences[i];</span><br><span class="line">        arguments[i][<span class="number">2</span>] = user_string[i];<span class="comment">//flag既是user_string,根据checking函数可得到user_string[i]=0^(first_letter+differences[i])</span></span><br><span class="line"></span><br><span class="line">        pthread_create((<span class="type">pthread_t</span>*)(thread+i), <span class="literal">NULL</span>, checking, arguments[i]);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="type">void</span> *result;</span><br><span class="line">    <span class="type">int</span> just_a_string[FLAG_LEN] = &#123;<span class="number">115</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">101</span>, <span class="number">95</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">95</span>, <span class="number">105</span>, <span class="number">116</span>, <span class="number">95</span>, <span class="number">105</span>, <span class="number">115</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; FLAG_LEN; i++) &#123;</span><br><span class="line">        pthread_join(*(thread+i), &amp;result);</span><br><span class="line">        generated_string[i] = *(<span class="type">char</span> *)result + just_a_string[i];</span><br><span class="line">        <span class="built_in">free</span>(result);</span><br><span class="line">        <span class="built_in">free</span>(arguments[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> is_ok = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; FLAG_LEN; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (generated_string[i] != just_a_string[i])<span class="comment">//如果相等就能返回1，那么result必须等于0</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *user_string = (<span class="type">char</span> *)<span class="built_in">calloc</span>(FLAG_LEN+<span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    fgets(user_string, FLAG_LEN+<span class="number">1</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="type">int</span> is_ok = highly_optimized_parallel_comparsion(user_string);<span class="comment">//需要is_ok不为0</span></span><br><span class="line">    <span class="keyword">if</span> (is_ok)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;You win!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Wrong!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过分析代码，可以猜测最终的flag就应该是user_string，根据checking函数可得到user_string[i]&#x3D;0^(first_letter+differences[i])，那么随机数first_letter怎么知道呢，既然这是一个c文件那么就可以运行</p><p><img src="/2023/03/09/reserve%E4%B9%8Bparallel-comparator-200/key1.png"></p><p>运行之后发现这个随机值竟然是确定的，108，并且通过提示发现just_a_string对flag的形成没有关系，但是保险起见还是把这个字符串输出一下，那么就可以直接写脚本了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">val1=[<span class="number">0</span>, <span class="number">9</span>, -<span class="number">9</span>, -<span class="number">1</span>, <span class="number">13</span>, -<span class="number">13</span>, -<span class="number">4</span>, -<span class="number">11</span>, -<span class="number">9</span>, -<span class="number">1</span>, -<span class="number">7</span>, <span class="number">6</span>, -<span class="number">13</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">9</span>, -<span class="number">13</span>, -<span class="number">11</span>, <span class="number">6</span>, -<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">val2=[<span class="number">115</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">101</span>, <span class="number">95</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">95</span>, <span class="number">105</span>, <span class="number">116</span>, <span class="number">95</span>, <span class="number">105</span>, <span class="number">115</span>]</span><br><span class="line"></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line">kk=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(val2)):</span><br><span class="line">    g=<span class="number">0</span>^(<span class="number">108</span>+val1[i])</span><br><span class="line">    flag+=<span class="built_in">chr</span>(g)</span><br><span class="line">    kk+=<span class="built_in">chr</span>(val2[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="built_in">print</span>(kk)</span><br></pre></td></tr></table></figure><p><img src="/2023/03/09/reserve%E4%B9%8Bparallel-comparator-200/flag.png"></p><p>得到flag : lucky_hacker_you_are</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我在这里找了很久的first_letter都没有找到，通过大佬的提示发现运行的随机数是个定值，最后完成题解。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之Myterious</title>
      <link href="/2023/03/09/reserve%E4%B9%8BMyterious/"/>
      <url>/2023/03/09/reserve%E4%B9%8BMyterious/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界-Myterious"><a href="#攻防世界-Myterious" class="headerlink" title="攻防世界 Myterious"></a>攻防世界 Myterious</h1><h3 id="首先查壳"><a href="#首先查壳" class="headerlink" title="首先查壳"></a>首先查壳</h3><p><img src="/2023/03/09/reserve%E4%B9%8BMyterious/myteriouspack.png"></p><p>发现无壳</p><h3 id="扔进ida32"><a href="#扔进ida32" class="headerlink" title="扔进ida32"></a>扔进ida32</h3><p><img src="/2023/03/09/reserve%E4%B9%8BMyterious/key1.png"></p><p>分析代码，发现最后返回的是Code，那么就跟进WinMain，最后看到</p><p><img src="/2023/03/09/reserve%E4%B9%8BMyterious/key2.png"></p><p>这里可以分析出flag由6部分组成，唯一要找到的就是Sourse的值，通过跟进_itoa代码发现就是把Value的值字符串化赋给Sourse，由上面的代码得到Value&#x3D;v4+1，而v4&#x3D;122，那么Value&#x3D;123，最终得到flag{123_Buff3r_0v3rf|0w}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这道题的关键在于找到Sourse的值，需要对函数有准确的分析与猜测。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之srm-50</title>
      <link href="/2023/03/09/reserve%E4%B9%8Bsrm-50/"/>
      <url>/2023/03/09/reserve%E4%B9%8Bsrm-50/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界-srm-50"><a href="#攻防世界-srm-50" class="headerlink" title="攻防世界 srm-50"></a>攻防世界 srm-50</h1><h3 id="首先查壳"><a href="#首先查壳" class="headerlink" title="首先查壳"></a>首先查壳</h3><p><img src="/2023/03/09/reserve%E4%B9%8Bsrm-50/srm50pack.png"></p><p>发现无壳</p><h3 id="扔进ida32中"><a href="#扔进ida32中" class="headerlink" title="扔进ida32中"></a>扔进ida32中</h3><p><img src="/2023/03/09/reserve%E4%B9%8Bsrm-50/key1.png"></p><p>分析代码发现最终返回的是v7，那么推断flag藏在v7中，跟进WinMain函数，接着跟进DalogFunc</p><p><img src="/2023/03/09/reserve%E4%B9%8Bsrm-50/key2.png"></p><p>发现只要if语句中的条件成立，那么就会提示成功，推断if语句中的值就是flag，仔细观察发现v11的值是乱序的，所以需要重新排序，最终得到flag  :   CZ9dmq4c8g9G7bAX</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>注意关键词提示，以及序列化问题。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reserve之maze</title>
      <link href="/2023/03/08/reserve%E4%B9%8Bmaze/"/>
      <url>/2023/03/08/reserve%E4%B9%8Bmaze/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界-maze-迷宫题"><a href="#攻防世界-maze-迷宫题" class="headerlink" title="攻防世界 maze 迷宫题"></a>攻防世界 maze 迷宫题</h1><h3 id="首先查壳"><a href="#首先查壳" class="headerlink" title="首先查壳"></a>首先查壳</h3><p><img src="/2023/03/08/reserve%E4%B9%8Bmaze/mazepack.png"></p><p>发现无壳，且为gcc编译的文件</p><h3 id="直接扔进ida"><a href="#直接扔进ida" class="headerlink" title="直接扔进ida"></a>直接扔进ida</h3><p><img src="/2023/03/08/reserve%E4%B9%8Bmaze/key1.png"></p><p><img src="/2023/03/08/reserve%E4%B9%8Bmaze/key2.png"></p><p>分析代码发现这是一道非常典型的迷宫题，那么迷宫的按钮是什么捏，跟进四个sub函数，可以基本确定‘O’与‘o’一定为一组确定一条轴，‘.’与’0’为另一组，那么怎么确定哪个是x轴哪个是y轴捏，根本没有关系，我们直接试。令‘O’与‘o’确定x轴，可以得到‘O’：左，‘o’：右，‘.’：上，‘0’：下</p><p>得到迷宫：</p><p><img src="/2023/03/08/reserve%E4%B9%8Bmaze/flagtt.png"></p><p>输入nctf{o0oo00O000oooo..OO}发现对了，那么另一种情况就不需要试了</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>迷宫题找到数字所对应的按钮即可。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reverse之re-for-50-plz-50</title>
      <link href="/2023/03/08/reverse%E4%B9%8Bre-for-50-plz-50/"/>
      <url>/2023/03/08/reverse%E4%B9%8Bre-for-50-plz-50/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界-re-for-50-plz-50"><a href="#攻防世界-re-for-50-plz-50" class="headerlink" title="攻防世界 re-for-50-plz-50"></a>攻防世界 re-for-50-plz-50</h1><h3 id="首先查壳"><a href="#首先查壳" class="headerlink" title="首先查壳"></a>首先查壳</h3><p><img src="/2023/03/08/reverse%E4%B9%8Bre-for-50-plz-50/refor50pack.png"></p><p>发现是个ELF文件，并且无壳</p><h3 id="直接扔ida32位中"><a href="#直接扔ida32位中" class="headerlink" title="直接扔ida32位中"></a>直接扔ida32位中</h3><p><img src="/2023/03/08/reverse%E4%B9%8Bre-for-50-plz-50/refor50.png"></p><p>这里分析代码发现当meow等于后面那个字符串时，可以得到flag，定位meow，我发现了需要用来进行亦或操作的钥匙</p><p><img src="/2023/03/08/reverse%E4%B9%8Bre-for-50-plz-50/key.png"></p><h3 id="最后根据代码写出脚本得到flag"><a href="#最后根据代码写出脚本得到flag" class="headerlink" title="最后根据代码写出脚本得到flag"></a>最后根据代码写出脚本得到flag</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">val=<span class="string">&#x27;cbtcqLUBChERV[[Nh@_X^D]X_YPV[CJ&#x27;</span></span><br><span class="line"></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(val)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(val[i])^<span class="number">0x37</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p><img src="/2023/03/08/reverse%E4%B9%8Bre-for-50-plz-50/refor50flag.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这道题目是基础的亦或操作题目。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单项链表基本操作</title>
      <link href="/2023/02/01/%E5%8D%95%E9%A1%B9%E9%93%BE%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/02/01/%E5%8D%95%E9%A1%B9%E9%93%BE%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="头文件-LinkList-h"><a href="#头文件-LinkList-h" class="headerlink" title="头文件 LinkList.h"></a>头文件 LinkList.h</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// __cplusplus</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义节点数据类型</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化链表</span></span><br><span class="line"><span class="keyword">struct</span> LinkNode* <span class="title function_">Init_LinkList</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在值oldval处插入一个新数据newval，oldval往后移</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InsertByValue_LinkList</span><span class="params">(<span class="keyword">struct</span> LinkNode* header,<span class="type">int</span> oldval,<span class="type">int</span> newval)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除值为val的结点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">RemoveByValue_LinkList</span><span class="params">(<span class="keyword">struct</span> LinkNode* header, <span class="type">int</span> delValue)</span>;</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Foreach_LinkList</span><span class="params">(<span class="keyword">struct</span> LinkNode* header)</span>;</span><br><span class="line"><span class="comment">//销毁链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Destroy_LinkList</span><span class="params">(<span class="keyword">struct</span> LinkNode* header)</span>;</span><br><span class="line"><span class="comment">//清空链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Clear_LinkList</span><span class="params">(<span class="keyword">struct</span> LinkNode* header)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cpluspus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// </span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="函数文件LinkList-c"><a href="#函数文件LinkList-c" class="headerlink" title="函数文件LinkList.c"></a>函数文件LinkList.c</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;LinkList.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化链表</span></span><br><span class="line"><span class="keyword">struct</span> LinkNode* <span class="title function_">Init_LinkList</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//创建头结点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">header</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> LinkNode));</span><br><span class="line">header-&gt;val = - <span class="number">1</span>;<span class="comment">//默认数据不影响</span></span><br><span class="line">header-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尾部指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">pRear</span> =</span> header;</span><br><span class="line"><span class="type">int</span> data = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入构成的数据：\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data);</span><br><span class="line"><span class="comment">//输入-1结束输入</span></span><br><span class="line"><span class="keyword">if</span> (data == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建新节点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">newnode</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> LinkNode));</span><br><span class="line">newnode-&gt;val = data;</span><br><span class="line">newnode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//新结点插入到链表中</span></span><br><span class="line">pRear-&gt;next = newnode;</span><br><span class="line"><span class="comment">//更新尾部指针</span></span><br><span class="line">pRear = newnode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将链表返回</span></span><br><span class="line"><span class="keyword">return</span> header;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在值oldval处插入一个新数据newval，oldval向后移</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InsertByValue_LinkList</span><span class="params">(<span class="keyword">struct</span> LinkNode* header, <span class="type">int</span> oldval, <span class="type">int</span> newval)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (header == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建两个辅助指针变量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">pPrev</span>=</span>header-&gt;next;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">pCurrent</span> =</span> pPrev-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (pCurrent-&gt;val != oldval)</span><br><span class="line">&#123;</span><br><span class="line">pPrev = pCurrent;</span><br><span class="line">pCurrent = pCurrent-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (pCurrent == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果pCurrent为空，则没有链表中没有符合插入的位置，直接插入到最后</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pCurrent == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">newnode</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> LinkNode));</span><br><span class="line">newnode-&gt;val = newval;</span><br><span class="line">newnode-&gt;next = pCurrent;</span><br><span class="line">pPrev-&gt;next = newnode;</span><br><span class="line"><span class="keyword">return</span> header;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除值为val的结点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">RemoveByValue_LinkList</span><span class="params">(<span class="keyword">struct</span> LinkNode* header, <span class="type">int</span> delValue)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (header == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">pPrev</span> =</span> header;</span><br><span class="line"><span class="comment">//创建用于查找要删除数据的指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">Find</span> =</span> pPrev-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (Find-&gt;val != delValue)</span><br><span class="line">&#123;</span><br><span class="line">pPrev = pPrev-&gt;next;</span><br><span class="line">Find = Find-&gt;next;</span><br><span class="line"><span class="comment">//未找到直接返回</span></span><br><span class="line"><span class="keyword">if</span> (Find == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//跳过要删除项，将要删除项前后连接</span></span><br><span class="line">pPrev-&gt;next = Find-&gt;next;</span><br><span class="line"><span class="comment">//找到将此块(要删除项)内存域释放</span></span><br><span class="line"><span class="built_in">free</span>(Find);</span><br><span class="line">Find = <span class="literal">NULL</span>;<span class="comment">//防止Find成为野指针</span></span><br><span class="line"><span class="keyword">return</span> header;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Foreach_LinkList</span><span class="params">(<span class="keyword">struct</span> LinkNode* header)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (header == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//辅助指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">pCurrent</span> =</span> header-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(pCurrent)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pCurrent-&gt;val);</span><br><span class="line">pCurrent = pCurrent-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Destroy_LinkList</span><span class="params">(<span class="keyword">struct</span> LinkNode* header)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (header == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//辅助指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">pCurrent</span> =</span> header;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">pNext</span> =</span> pCurrent;</span><br><span class="line"><span class="keyword">while</span> (pCurrent!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">pNext = pCurrent-&gt;next;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d结点被销毁\n&quot;</span>,pCurrent-&gt;val);</span><br><span class="line"><span class="built_in">free</span>(pCurrent);</span><br><span class="line">pCurrent = pNext;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清空链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Clear_LinkList</span><span class="params">(<span class="keyword">struct</span> LinkNode* header)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (header == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//辅助指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">pCurrent</span> =</span> header-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (pCurrent != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//先将pCrrent下一块域保存以便可以访问</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">pNext</span> =</span> pCurrent-&gt;next;</span><br><span class="line"><span class="comment">//释放当前节点内存</span></span><br><span class="line"><span class="built_in">free</span>(pCurrent);</span><br><span class="line"><span class="comment">//更新结点</span></span><br><span class="line">pCurrent = pNext;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">header-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> header;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="主函数用于测试TestLinkList-c"><a href="#主函数用于测试TestLinkList-c" class="headerlink" title="主函数用于测试TestLinkList.c"></a>主函数用于测试TestLinkList.c</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;LinkList.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//初始化链表,100,200,300,400,500   插入666，删除666</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">header</span> =</span> Init_LinkList();</span><br><span class="line"><span class="comment">//打印链表</span></span><br><span class="line">Foreach_LinkList(header);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line"><span class="comment">//插入数据</span></span><br><span class="line">InsertByValue_LinkList(header, <span class="number">500</span>, <span class="number">111</span>);</span><br><span class="line">Foreach_LinkList(header);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line"><span class="comment">//删除数据</span></span><br><span class="line">RemoveByValue_LinkList(header,<span class="number">111</span>);</span><br><span class="line">Foreach_LinkList(header);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line"><span class="comment">//清空链表</span></span><br><span class="line">Clear_LinkList(header);</span><br><span class="line">Foreach_LinkList(header);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line"><span class="comment">//销毁链表</span></span><br><span class="line">Destroy_LinkList(header);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;插入111，再删除111，清空链表并销毁\n&quot;</span>);</span><br><span class="line">test();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输出结果展示"><a href="#输出结果展示" class="headerlink" title="输出结果展示"></a>输出结果展示</h2><p><img src="/2023/02/01/%E5%8D%95%E9%A1%B9%E9%93%BE%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/LinkNode.png"></p><h1 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h1><p>通过快慢指针可以快速确定链表的中间位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> LinkNode* <span class="title function_">middleSpot</span><span class="params">(<span class="keyword">struct</span> LinkNode*head)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span> *<span class="title">Prev</span>=</span>head;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span> *<span class="title">Slow</span>=</span>head;</span><br><span class="line">    <span class="keyword">while</span>(Prev!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Prev=</span><br><span class="line">        <span class="keyword">if</span>(Prev!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Prev=Prev-&gt;next;</span><br><span class="line">            Slow=Slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/2023/02/01/%E5%8D%95%E9%A1%B9%E9%93%BE%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88.png"></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="/2023/01/14/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2023/01/14/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Effervescence_sort</span><span class="params">(<span class="type">int</span> len,<span class="type">int</span> a[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">9</span>;j&gt;i;j--)<span class="comment">//找到较小数并依次向上冒泡</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;a[j<span class="number">-1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                temp=a[j];</span><br><span class="line">                a[j]=a[j<span class="number">-1</span>];</span><br><span class="line">                a[j<span class="number">-1</span>]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Before sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    Effervescence_sort(<span class="number">10</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;After sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图像演示：</p><p><img src="/2023/01/14/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/effervescence_sort.gif"></p><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Chose_sort</span><span class="params">(<span class="type">int</span> len,<span class="type">int</span> a[])</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> min,i,j;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;len<span class="number">-1</span>;j++)<span class="comment">//找到最小数，将最小数按次序依次排列</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=j;i&lt;len;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            min=a[j];</span><br><span class="line">            <span class="keyword">if</span>(min&gt;a[i])</span><br><span class="line">            &#123;</span><br><span class="line">                min=a[i];</span><br><span class="line">                a[i]=a[j];</span><br><span class="line">                a[j]=min;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>],i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Before sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    Chose_sort(<span class="number">10</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;After sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图像演示：</p><p><img src="/2023/01/14/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/chose_sort.gif"></p><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Insertion_sort</span><span class="params">(<span class="type">int</span> len,<span class="type">int</span> a[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j,temp;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp=a[i];</span><br><span class="line">        <span class="keyword">for</span>(j=i;j&gt;<span class="number">0</span>;j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j<span class="number">-1</span>]&gt;temp)</span><br><span class="line">            a[j]=a[j<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        a[j]=temp;</span><br><span class="line">    &#125;<span class="comment">//若指定项的数值小于前面项，则循环项等于前一项，直到遇到循环项前一项小于指定项的数值，则循环项等于指定项数值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>],i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Before sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    Insertion_sort(<span class="number">10</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;After sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图像演示：</p><p><img src="/2023/01/14/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/Insertion_sort.gif"></p><h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">shell_sort</span><span class="params">(<span class="type">int</span> len,<span class="type">int</span> arr[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> gap, i, j;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (gap = len &gt;&gt; <span class="number">1</span>; gap &gt; <span class="number">0</span>; gap = gap &gt;&gt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> (i = gap; i &lt; len; i++) &#123;</span><br><span class="line">            temp = arr[i];</span><br><span class="line">            <span class="keyword">for</span> (j = i - gap; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp; j -= gap)</span><br><span class="line">                arr[j + gap] = arr[j];</span><br><span class="line">            arr[j + gap] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;<span class="comment">//插入排序升级版，在插入排序前先分组排序，再进行插入排序，但不稳定</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">int</span> argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>],i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Before sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    shell_sort(a,<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;After sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图像演示：</p><p><img src="/2023/01/14/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/shellsort.gif"></p><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">min</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x &lt; y ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">merge_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> *a = arr;</span><br><span class="line">    <span class="type">int</span> *b = (<span class="type">int</span> *)<span class="built_in">malloc</span>(len * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="type">int</span> seg, start;</span><br><span class="line">    <span class="keyword">for</span> (seg = <span class="number">1</span>; seg &lt; len; seg += seg)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (start = <span class="number">0</span>; start &lt; len; start += seg + seg)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> low = start, mid = min(start + seg, len), high = min(start + seg + seg, len);</span><br><span class="line">            <span class="type">int</span> k = low;</span><br><span class="line">            <span class="type">int</span> start1 = low, end1 = mid;</span><br><span class="line">            <span class="type">int</span> start2 = mid, end2 = high;</span><br><span class="line">            <span class="keyword">while</span> (start1 &lt; end1 &amp;&amp; start2 &lt; end2)</span><br><span class="line">                b[k++] = a[start1] &lt; a[start2] ? a[start1++] : a[start2++];</span><br><span class="line">            <span class="keyword">while</span> (start1 &lt; end1)</span><br><span class="line">                b[k++] = a[start1++];</span><br><span class="line">            <span class="keyword">while</span> (start2 &lt; end2)</span><br><span class="line">                b[k++] = a[start2++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> *temp = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a != arr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            b[i] = a[i];</span><br><span class="line">        b = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">int</span> argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>], i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Before sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    merge_sort(a, <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;After sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图像演示：</p><p><img src="/2023/01/14/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/merge_sort.gif"></p><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Range</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> start, end;</span><br><span class="line">&#125; Range;</span><br><span class="line">Range <span class="title function_">new_Range</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> e)</span></span><br><span class="line">&#123;</span><br><span class="line">    Range r;</span><br><span class="line">    r.start = s;</span><br><span class="line">    r.end = e;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *x, <span class="type">int</span> *y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> t = *x;</span><br><span class="line">    *x = *y;</span><br><span class="line">    *y = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">quick_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">const</span> <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (len &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// 避免len等于负值時引发段错误（Segment Fault）</span></span><br><span class="line">    <span class="comment">// r[]模拟列表,p为数量,r[p++]为push,r[--p]为pop且取得元素</span></span><br><span class="line">    Range r[len];</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    r[p++] = new_Range(<span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (p)</span><br><span class="line">    &#123;</span><br><span class="line">        Range range = r[--p];</span><br><span class="line">        <span class="keyword">if</span> (range.start &gt;= range.end)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> mid = arr[(range.start + range.end) / <span class="number">2</span>]; <span class="comment">// 选取中间4点为基准点</span></span><br><span class="line">        <span class="type">int</span> left = range.start, right = range.end;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (arr[left] &lt; mid)</span><br><span class="line">                ++left; <span class="comment">// 检测基准点左侧是否符合要求</span></span><br><span class="line">            <span class="keyword">while</span> (arr[right] &gt; mid)</span><br><span class="line">                --right; <span class="comment">// 检测基准点右侧是否符合要求</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (left &lt;= right)</span><br><span class="line">            &#123;</span><br><span class="line">                swap(&amp;arr[left], &amp;arr[right]);</span><br><span class="line">                left++;</span><br><span class="line">                right--; <span class="comment">// 移动指针以继续</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (left &lt;= right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (range.start &lt; right)</span><br><span class="line">            r[p++] = new_Range(range.start, right);</span><br><span class="line">        <span class="keyword">if</span> (range.end &gt; left)</span><br><span class="line">            r[p++] = new_Range(left, range.end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">int</span> argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>], i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Before sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    quick_sort(a, <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;After sorting:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图像演示：</p><p><img src="/2023/01/14/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/quick_sort.gif"></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言基础之文件读写操作</title>
      <link href="/2023/01/11/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/01/11/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h1><p>使用fopen函数即可打开文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FILE *<span class="title function_">fopen</span><span class="params">( <span class="type">const</span> <span class="type">char</span> *filename, <span class="type">const</span> <span class="type">char</span> *mode )</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>r</td><td>打开一个已有的文本文件，允许读取文件。</td></tr><tr><td>w</td><td>打开一个文本文件，允许写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会从文件的开头写入内容。如果文件存在，则该会被截断为零长度，重新写入。</td></tr><tr><td>a</td><td>打开一个文本文件，以追加模式写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会在已有的文件内容中追加内容。</td></tr><tr><td>r+</td><td>打开一个文本文件，允许读写文件。</td></tr><tr><td>w+</td><td>打开一个文本文件，允许读写文件。如果文件已存在，则文件会被截断为零长度，如果文件不存在，则会创建一个新文件。</td></tr><tr><td>a+</td><td>打开一个文本文件，允许读写文件。如果文件不存在，则会创建一个新文件。读取会从文件的开头开始，写入则只能是追加模式。</td></tr></tbody></table><p>如果是二进制文件，则需要以下访问模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;rb&quot;, &quot;wb&quot;, &quot;ab&quot;, &quot;rb+&quot;, &quot;r+b&quot;, &quot;wb+&quot;, &quot;w+b&quot;, &quot;ab+&quot;, &quot;a+b&quot;</span><br></pre></td></tr></table></figure><h1 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h1><p>通过函数fclose可关闭文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fclose</span><span class="params">( FILE *fp )</span>;</span><br></pre></td></tr></table></figure><p>如果成功关闭文件，<strong>fclose( )</strong> 函数返回零，如果关闭文件时发生错误，函数返回 <strong>EOF</strong>。这个函数实际上，会清空缓冲区中的数据，关闭文件，并释放用于该文件的所有内存。EOF 是一个定义在头文件 <strong>stdio.h</strong> 中的常量</p><h1 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h1><p>我们有许多文件写入的函数，其中fputc和fputs最常见，其中fputc是写入单个字符，fputs是写入字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">( <span class="type">int</span> c, FILE *fp )</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fputs</span><span class="params">( <span class="type">const</span> <span class="type">char</span> *s, FILE *fp )</span>;</span><br></pre></td></tr></table></figure><p>举个栗子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line">   fp = fopen(<span class="string">&quot;E:/test/1.txt&quot;</span>, <span class="string">&quot;w+&quot;</span>);</span><br><span class="line">   <span class="built_in">fprintf</span>(fp, <span class="string">&quot;I love you...\n&quot;</span>);</span><br><span class="line">   <span class="built_in">fputs</span>(<span class="string">&quot;You are beautiful...\n&quot;</span>, fp);</span><br><span class="line">   fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h1><p>读取文件有三种常用函数：fgetc，fgets，fscanf</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fgetc</span><span class="params">( FILE * fp )</span>;</span><br><span class="line"><span class="type">char</span> *<span class="title function_">fgets</span><span class="params">( <span class="type">char</span> *buf, <span class="type">int</span> n, FILE *fp )</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fscanf</span><span class="params">(FILE *fp, <span class="type">const</span> <span class="type">char</span> *format, ...)</span> </span><br></pre></td></tr></table></figure><p>函数**fgetc()**只读取一个字符</p><p>函数 <strong>fgets()</strong> 从 fp 所指向的输入流中读取 n - 1 个字符。它会把读取的字符串复制到缓冲区 <strong>buf</strong>，并在最后追加一个 <strong>null</strong> 字符来终止字符串。</p><p>如果这个函数在读取最后一个字符之前就遇到一个换行符 ‘\n’ 或文件的末尾 EOF，则只会返回读取到的字符，包括换行符。也可以使用 <strong>int fscanf(FILE *fp, const char *format, …)</strong> 函数来从文件中读取字符串，但是在遇到第一个空格和换行符时，它会停止读取。</p><p>举个栗子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">   <span class="type">char</span> buff[<span class="number">255</span>];</span><br><span class="line"> </span><br><span class="line">   fp = fopen(<span class="string">&quot;E:/test/1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">   <span class="built_in">fscanf</span>(fp, <span class="string">&quot;%s&quot;</span>, buff);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;1: %s\n&quot;</span>, buff );</span><br><span class="line"> </span><br><span class="line">   fgets(buff, <span class="number">255</span>, (FILE*)fp);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;2: %s\n&quot;</span>, buff );</span><br><span class="line">   </span><br><span class="line">   fgets(buff, <span class="number">255</span>, (FILE*)fp);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;3: %s\n&quot;</span>, buff );</span><br><span class="line">   fclose(fp);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会读取上一部分创建的文件，产生下列结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1: I</span><br><span class="line">2:  love you...</span><br><span class="line">3:You are beautiful...</span><br></pre></td></tr></table></figure><p>首先，<strong>fscanf()</strong> 方法只读取了 <strong>I</strong>，因为它在后边遇到了一个空格。其次，调用 <strong>fgets()</strong> 读取剩余的部分，直到行尾。最后，调用 <strong>fgets()</strong> 完整地读取第二行。</p><h1 id="二进制I-x2F-O函数"><a href="#二进制I-x2F-O函数" class="headerlink" title="二进制I&#x2F;O函数"></a>二进制I&#x2F;O函数</h1><p>下面两个函数用于二进制输入和输出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> <span class="title function_">fread</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">size_t</span> size_of_elements, </span></span><br><span class="line"><span class="params">             <span class="type">size_t</span> number_of_elements, FILE *a_file)</span>;</span><br><span class="line">              </span><br><span class="line"><span class="type">size_t</span> <span class="title function_">fwrite</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *ptr, <span class="type">size_t</span> size_of_elements, </span></span><br><span class="line"><span class="params">             <span class="type">size_t</span> number_of_elements, FILE *a_file)</span>;</span><br></pre></td></tr></table></figure><p>这两个函数都是用于存储块的读写 - 通常是数组或结构体。</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言基础之结构体</title>
      <link href="/2023/01/09/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%BB%93%E6%9E%84%E4%BD%93/"/>
      <url>/2023/01/09/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%BB%93%E6%9E%84%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<h1 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h1><p>有三种定义方法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">int</span> high;</span><br><span class="line">&#125;stu;<span class="comment">//其中stu为结构体变量，Student为结构体名字，这个结构体名字可以省略，于是就有第二种定义法</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">int</span> high;</span><br><span class="line">&#125;stu;</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以不省去结构体名称，在接下来的步骤中去定义变量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">int</span> high;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stu</span>;</span></span><br></pre></td></tr></table></figure><h1 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h1><p>typedef可以重新定义结构体类型，简化定义变量时的步骤</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">int</span> high;</span><br><span class="line">&#125;Student;<span class="comment">//将struct Student类重新命名为Student</span></span><br><span class="line">Student stu;<span class="comment">//通过Student直接定义新的结构体变量</span></span><br></pre></td></tr></table></figure><h1 id="结构体嵌套"><a href="#结构体嵌套" class="headerlink" title="结构体嵌套"></a>结构体嵌套</h1><p>结构体是一种支持多层嵌套的类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Birthday</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> year;</span><br><span class="line">    <span class="type">int</span> month;</span><br><span class="line">    <span class="type">int</span> day;</span><br><span class="line">&#125;Birthday;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">int</span> high;</span><br><span class="line">    Birthday birthday;<span class="comment">//将结构体Birthday嵌套进Student中</span></span><br><span class="line">&#125;Student;</span><br><span class="line">Student stu;</span><br><span class="line"><span class="comment">//访问</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;student name:%s student birthday:%d-%d-%d&quot;</span>,stu.name,stu.birthday.year,stu.birthday.month,stu.birthday.day);</span><br></pre></td></tr></table></figure><h1 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h1><p>结构体也是一种类型，所以可以使用数组来储存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">int</span> high;</span><br><span class="line">&#125;Student;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printStudentinfo</span><span class="params">(Student *stu,<span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;name:%s\tid:%d\thigh:%d\n&quot;</span>,(stu+i)-&gt;name,(stu+i)-&gt;id,(stu+i)-&gt;high);<span class="comment">//若用指针访问元素则用-&gt;,若用数组访问可以用stu[i].name</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Student stus[]=&#123;</span><br><span class="line">        &#123;<span class="string">&quot;zhangsan&quot;</span>,<span class="number">01</span>,<span class="number">190</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;lisi&quot;</span>,<span class="number">02</span>,<span class="number">192</span>&#125;</span><br><span class="line">    &#125;;<span class="comment">//定义结构体数组</span></span><br><span class="line">    printStudentinfo(stus,<span class="number">2</span>);<span class="comment">//利用函数打印结构体数组</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/01/09/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%BB%93%E6%9E%84%E4%BD%93/%E7%BB%93%E6%9E%84%E4%BD%93%E6%95%B0%E7%BB%84.png"></p><h1 id="位域"><a href="#位域" class="headerlink" title="位域"></a>位域</h1><p>通过位域可以指定使用空间储存的位数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> a:<span class="number">4</span>;<span class="comment">//规定a不能超过4位</span></span><br><span class="line">    unsighed b:<span class="number">1</span>;<span class="comment">//规定b不能超过1位</span></span><br><span class="line">&#125;bit,*pbit;</span><br><span class="line"></span><br><span class="line">bit.a=<span class="number">8</span>;<span class="comment">//若bit.a大于8，则只会留下位域内的值，其余值将丢弃</span></span><br><span class="line">bit.b=<span class="number">1</span>;</span><br><span class="line">pbit=&amp;bit;</span><br><span class="line">pbit-&gt;a=<span class="number">9</span>;<span class="comment">//此步超过了位域，则pbit-&gt;a变为0，因为9用二进制表示为10000</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结构体题型后续更新……</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无谓的焦躁</title>
      <link href="/2023/01/08/%E6%97%A0%E8%B0%93%E7%9A%84%E7%84%A6%E8%BA%81/"/>
      <url>/2023/01/08/%E6%97%A0%E8%B0%93%E7%9A%84%E7%84%A6%E8%BA%81/</url>
      
        <content type="html"><![CDATA[<h1 id="焦躁起源"><a href="#焦躁起源" class="headerlink" title="焦躁起源"></a>焦躁起源</h1><p>  不知怎么的，最近莫名的焦躁在心里循环往复，像水蛭一点一点地正吸食着我的鲜血，我无法排解。人们总是把不好的情感归于他人，我当然也不例外。我习惯性的将这种情感归咎于我的家人，因为我不知道到底该归咎于谁。我开始绝食，就连自己都不知道绝食的原因是什么。我无法承认这都是自己的过错，原因竟是我很焦躁。我把这种焦躁称为无谓的焦躁，慢慢地，我看清了这种焦躁，这是自己奢望预期却难以达到目标的一种挫败感，我们享受每一次成就，享受别人的夸赞，但挫败感会将所有人拉向深渊，难以挣脱。于是焦躁应运而生，无法消去。</p><p><img src="/2023/01/08/%E6%97%A0%E8%B0%93%E7%9A%84%E7%84%A6%E8%BA%81/flower.WEBP"></p><h1 id="焦躁埋藏"><a href="#焦躁埋藏" class="headerlink" title="焦躁埋藏"></a>焦躁埋藏</h1><p>  无法释怀的焦躁感往往将人拖垮，我们能做的只有将焦躁埋藏。面对这个世界，我从未感受到真实，有的只是虚无缥缈的破败感。所谓的人情世故，所谓的社交关系，也就是假笑应付了事。我常常在思考一个问题，如果一块表走得不准，那它每一秒都是错的，如果这表停了，那它起码每天有两次是对的。我的意思是，生活中或许我应该放弃一些事情，才能将焦躁埋藏。</p><p><img src="/2023/01/08/%E6%97%A0%E8%B0%93%E7%9A%84%E7%84%A6%E8%BA%81/umbrella.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 博主情感录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 情感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Happy new year</title>
      <link href="/2023/01/01/Happy-new-year/"/>
      <url>/2023/01/01/Happy-new-year/</url>
      
        <content type="html"><![CDATA[<h1 id="新年快乐！！！"><a href="#新年快乐！！！" class="headerlink" title="新年快乐！！！"></a>新年快乐！！！</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>The story of you and sun</title>
      <link href="/2022/12/31/The-story-of-you-and-sun/"/>
      <url>/2022/12/31/The-story-of-you-and-sun/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.hshdweb.cn/?p=32">你与阳光的故事</a><br>  每个人都有年少，每个人都会在年少中徘徊，想要一直抓住青春的尾巴，但青春是抓不住的，到头来也能是回忆青春残存的美好，在脑海深处去拽出那唯一一点舍不得丢掉的东西。<br>  每个男孩的青春里都曾住过一个足以用一生去释怀的女孩。你与这个女孩的开始可能是一次偶遇，可能是一次交流，可能是一起成为同桌互相学习，可能是久识情感的升温。这个女孩扰乱了你原本风平浪静的心，在心里荡漾起来春心。你会无时无刻不在想念她，无时无刻不在关心她。但你总是藏在角落，你害怕在阳光下暴露自己，你害怕阳光不愿意接受你，你更害怕失去阳光，所以你只能在角落偷偷看着阳光，因为只有这样你才能在某个瞬间得到一点阳光的温暖。你会记下每一次阳光来临时的感受，夸赞她对你来说是多么重要，以及她对你施舍的那一点温暖是多么珍贵，你总是这样麻痹自己。但好像阳光照耀的总是世界，你又有几分实力与世界去抢夺阳光。<br>  直到有一天，你发现自己的青春好像要结束了，在角落的你那仅存的一点阳光似乎将要离去，你不甘心，所以你开始觉悟，你要将阳光留在这里。你筹划好一切，在阳光下暴露了自己，但好像阳光对你却心生胆怯，用几朵你知道是炊烟所化的浮云打发了你。从此，你好像看不到阳光了，但你从来不会忘记阳光那微不足道的温暖。你妄想那几朵浮云终会散开，你终会与阳光我再见，但你错了，阳光不会撕开浮云，因为那本来就是为躲避你所准备的。<br>  是啊，你悲伤，你心痛，你想向阳光乞求同情。你保持与阳光交流，保持向阳光诉说，阳光没对你有任何答复。你安慰自己阳光是很忙的，等空下来一定会答复你，可在阳光眼里，你比乌云更另她烦躁，她从来不想给你任何答复，哪怕她正无聊得发呆。童话中的美好故事，都往往只是为了满足人们对美好的向往所编撰，现实中的阳光，不会因你而停留，她只会为夏至停留，并且也只是停留一小会儿罢了。<br>  你回到了你自己的角落，只能眼睁睁地看着阳光离开，大道理你都懂，但你无法控制你自己，你躲在角落，哭泣，悔恨。你痛恨自己的无能，痛恨自己的懦弱，18 岁的你迷茫又浮躁，想要车，想要房子，爱情，想要享受生活想去旅行，你那么浮躁，却想看透人生，这便注定了阳光的离去。<br>  三年过去了，来到了大学，看到了很多形形色色的人，但好像对她你还是情有独钟，你坐在桌子前，看着无意间看到了杨绛先生写下的一段话 ：无论什么关系，当情分被消耗殆尽，缘分便走到了终点，把错归咎于自己，并且礼貌的退场，把自己还给自己，把别人还给别人，让花成花，让树成树，从此山水一程，再不相逢，愿来生不见，不欠，不念。此时的你不知道自己到底释没释怀，你只知道这句话真的很让人心痛。</p>]]></content>
      
      
      <categories>
          
          <category> 博主情感录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 情感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mynew</title>
      <link href="/2022/12/28/mynew/"/>
      <url>/2022/12/28/mynew/</url>
      
        <content type="html"><![CDATA[<p>Welcome to my new blog!</p><p>这个博客还在摸索中捏！！！！</p><p>SUPERHUANG is the best!!!</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf(&quot;SUPERHIANG is the best&quot;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/12/28/hello-world/"/>
      <url>/2022/12/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.hsh’s new blog.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
